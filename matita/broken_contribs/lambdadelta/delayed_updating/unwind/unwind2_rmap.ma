(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "delayed_updating/unwind/preunwind2_rmap.ma".
include "delayed_updating/syntax/path.ma".

(* TAILED UNWIND FOR RELOCATION MAP *****************************************)

rec definition unwind2_rmap (p) (f) on p: ùîΩùîπ ‚âù
match p with
[ list_empty     ‚áí f
| list_lcons l q ‚áí ‚ñ∂[l](unwind2_rmap q f)
].

interpretation
  "tailed unwind (relocation map)"
  'BlackRightTriangle p f = (unwind2_rmap p f).

(* Basic constructions ******************************************************)

lemma unwind2_rmap_empty (f):
      f = ‚ñ∂[ùêû]f.
// qed.

lemma unwind2_rmap_rcons (f) (p) (l):
      ‚ñ∂[l]‚ñ∂[p]f = ‚ñ∂[p‚óñl]f.
// qed.

lemma unwind2_rmap_d_dx (f) (p) (k):
      (‚Æ§*[k]‚ñ∂[p]f) = ‚ñ∂[p‚óñùó±k]f.
// qed.

lemma unwind2_rmap_m_dx (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[p‚óñùó∫]f.
// qed.

lemma unwind2_rmap_L_dx (f) (p):
      (‚´Ø‚ñ∂[p]f) = ‚ñ∂[p‚óñùóü]f.
// qed.

lemma unwind2_rmap_A_dx (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[p‚óñùóî]f.
// qed.

lemma unwind2_rmap_S_dx (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[p‚óñùó¶]f.
// qed.

(* Constructions with path_append *******************************************)

lemma unwind2_rmap_append (f) (p) (q):
      ‚ñ∂[q]‚ñ∂[p]f = ‚ñ∂[p‚óèq]f.
#f #p #q elim q -q // #l #q #IH
<unwind2_rmap_rcons <unwind2_rmap_rcons //
qed.

(* Constructions with path_lcons ********************************************)

lemma unwind2_rmap_lcons (f) (p) (l):
      ‚ñ∂[p]‚ñ∂[l]f = ‚ñ∂[l‚óóp]f.
// qed.

lemma unwind2_rmap_d_sn (f) (p) (k):
      ‚ñ∂[p]‚Æ§*[k]f = ‚ñ∂[ùó±k‚óóp]f.
// qed.

lemma unwind2_rmap_m_sn (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[ùó∫‚óóp]f.
// qed.

lemma unwind2_rmap_L_sn (f) (p):
      ‚ñ∂[p]‚´Øf = ‚ñ∂[ùóü‚óóp]f.
// qed.

lemma unwind2_rmap_A_sn (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[ùóî‚óóp]f.
// qed.

lemma unwind2_rmap_S_sn (f) (p):
      ‚ñ∂[p]f = ‚ñ∂[ùó¶‚óóp]f.
// qed.
