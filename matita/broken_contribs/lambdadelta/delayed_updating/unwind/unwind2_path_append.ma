(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "delayed_updating/unwind/unwind2_path.ma".
include "delayed_updating/syntax/path_structure_inner.ma".
include "delayed_updating/syntax/path_proper.ma".
include "ground/xoa/ex_4_2.ma".

(* TAILED UNWIND FOR PATH ***************************************************)

(* Constructions with pic ***************************************************)

lemma unwind2_path_pic (f) (p):
      p œµ ùêà ‚Üí ‚äóp = ‚ñº[f]p.
#f * // * // #k #q #Hq
elim (pic_inv_d_dx ‚Ä¶ Hq)
qed-.

(* Constructions with append and pic ****************************************)

lemma unwind2_path_append_pic_sn (f) (p) (q): p œµ ùêà ‚Üí
      (‚äóp)‚óè(‚ñº[‚ñ∂[p]f]q) = ‚ñº[f](p‚óèq).
#f #p * [ #Hp | * [ #k ] #q #_ ]
[ <(unwind2_path_pic ‚Ä¶ Hp) -Hp //
| <unwind2_path_d_dx <unwind2_path_d_dx
  /2 width=3 by trans_eq/
| <unwind2_path_L_dx <unwind2_path_L_dx //
| <unwind2_path_A_dx <unwind2_path_A_dx //
| <unwind2_path_S_dx <unwind2_path_S_dx //
]
qed.

(* Constructions with append and ppc ****************************************)

lemma unwind2_path_append_ppc_dx (f) (p) (q): q œµ ùêè ‚Üí
      (‚äóp)‚óè(‚ñº[‚ñ∂[p]f]q) = ‚ñº[f](p‚óèq).
#f #p * [ #Hq | * [ #k ] #q #_ ]
[ elim (ppc_inv_empty ‚Ä¶ Hq)
| <unwind2_path_d_dx <unwind2_path_d_dx
  /2 width=3 by trans_eq/
| <unwind2_path_L_dx <unwind2_path_L_dx //
| <unwind2_path_A_dx <unwind2_path_A_dx //
| <unwind2_path_S_dx <unwind2_path_S_dx //
]
qed.

(* Constructions with path_lcons ********************************************)

lemma unwind2_path_d_empty (f) (k):
      (ùó±(fÔº†‚ù®k‚ù©)‚óóùêû) = ‚ñº[f](ùó±k‚óóùêû).
// qed.

lemma unwind2_path_d_lcons (f) (p) (l) (k):
      ‚ñº[f‚Ä¢ùêÆ‚ù®k‚ù©](l‚óóp) = ‚ñº[f](ùó±k‚óól‚óóp).
#f #p #l #k <unwind2_path_append_ppc_dx in ‚ä¢ (???%); //
qed.

lemma unwind2_path_L_sn (f) (p):
      (ùóü‚óó‚ñº[‚´Øf]p) = ‚ñº[f](ùóü‚óóp).
#f #p <unwind2_path_append_pic_sn //
qed.

lemma unwind2_path_A_sn (f) (p):
      (ùóî‚óó‚ñº[f]p) = ‚ñº[f](ùóî‚óóp).
#f #p <unwind2_path_append_pic_sn //
qed.

lemma unwind2_path_S_sn (f) (p):
      (ùó¶‚óó‚ñº[f]p) = ‚ñº[f](ùó¶‚óóp).
#f #p <unwind2_path_append_pic_sn //
qed.

(* Destructions with pic ****************************************************)

lemma unwind2_path_des_pic (f) (p):
      ‚ñº[f]p œµ ùêà ‚Üí p œµ ùêà.
#f * // * [ #k ] #p //
<unwind2_path_d_dx #H0
elim (pic_inv_d_dx ‚Ä¶ H0)
qed-.

(* Destructions with append and pic *****************************************)

lemma unwind2_path_des_append_pic_sn (f) (p) (q1) (q2):
      q1 œµ ùêà ‚Üí q1‚óèq2 = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉp1,p2. p1 œµ ùêà & q1 = ‚äóp1 & q2 = ‚ñº[‚ñ∂[p1]f]p2 & p1‚óèp2 = p.
#f #p #q1 * [| * [ #k ] #q2 ] #Hq1
[ <list_append_empty_sn #H0 destruct
  lapply (unwind2_path_des_pic ‚Ä¶ Hq1) -Hq1 #Hp
  <(unwind2_path_pic ‚Ä¶ Hp)
  /2 width=6 by ex4_2_intro/
| #H0 elim (eq_inv_d_dx_unwind2_path ‚Ä¶ H0) -H0 #r #h #Hr #H1 #H2 destruct
  elim (eq_inv_append_structure_pic ‚Ä¶ Hr) -Hr #s1 #s2 #Hs1 #H1 #H2 #H3 destruct
  /2 width=6 by ex4_2_intro/
| #H0 elim (eq_inv_L_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H2 destruct
  elim (eq_inv_append_structure_pic ‚Ä¶ Hr) -Hr #s1 #s2 #Hs1 #H1 #H2 #H3 destruct
  /2 width=6 by ex4_2_intro/
| #H0 elim (eq_inv_A_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H0 destruct
  elim (eq_inv_append_structure_pic ‚Ä¶ Hr) -Hr #s1 #s2 #Hs1 #H1 #H2 #H3 destruct
  /2 width=6 by ex4_2_intro/
| #H0 elim (eq_inv_S_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H0 destruct
  elim (eq_inv_append_structure_pic ‚Ä¶ Hr) -Hr #s1 #s2 #Hs1 #H1 #H2 #H3 destruct
  /2 width=6 by ex4_2_intro/
]
qed-.

(* Inversions with append and ppc *******************************************)

lemma unwind2_path_inv_append_ppc_dx (f) (p) (q1) (q2):
      q2 œµ ùêè ‚Üí q1‚óèq2 = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉp1,p2. q1 = ‚äóp1 & q2 = ‚ñº[‚ñ∂[p1]f]p2 & p1‚óèp2 = p.
#f #p #q1 * [| * [ #k ] #q2 ] #Hq1
[ <list_append_empty_sn #H0 destruct
  elim (ppc_inv_empty ‚Ä¶ Hq1)
| #H0 elim (eq_inv_d_dx_unwind2_path ‚Ä¶ H0) -H0 #r #h #Hr #H1 #H2 destruct
  elim (eq_inv_append_structure ‚Ä¶ Hr) -Hr #s1 #s2 #H1 #H2 #H3 destruct
  /2 width=5 by ex3_2_intro/
| #H0 elim (eq_inv_L_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H2 destruct
  elim (eq_inv_append_structure ‚Ä¶ Hr) -Hr #s1 #s2 #H1 #H2 #H3 destruct
  /2 width=5 by refl, ex3_2_intro/
| #H0 elim (eq_inv_A_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H0 destruct
  elim (eq_inv_append_structure ‚Ä¶ Hr) -Hr #s1 #s2 #H1 #H2 #H3 destruct
  /2 width=5 by refl, ex3_2_intro/
| #H0 elim (eq_inv_S_dx_unwind2_path ‚Ä¶ H0) -H0 #r #Hr #H0 destruct
  elim (eq_inv_append_structure ‚Ä¶ Hr) -Hr #s1 #s2 #H1 #H2 #H3 destruct
  /2 width=5 by refl, ex3_2_intro/
]
qed-.

(* Inversions with path_lcons ***********************************************)

lemma eq_inv_d_sn_unwind2_path (f) (q) (p) (k):
      (ùó±k‚óóq) = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉr,h. ùêû = ‚äór & (‚ñ∂[r]f)Ôº†‚ù®h‚ù© = k & ùêû = q & r‚óñùó±h = p.
#f * [| #l #q ] #p #k
[ <list_cons_comm #H0
  elim (eq_inv_d_dx_unwind2_path ‚Ä¶ H0) -H0 #r1 #r2 #Hr1 #H1 #H2 destruct
  /2 width=5 by ex4_2_intro/
| >list_cons_comm #H0
  elim (unwind2_path_inv_append_ppc_dx ‚Ä¶ H0) -H0 // #r1 #r2 #Hr1 #_ #_ -r2
  elim (eq_inv_d_dx_structure ‚Ä¶ Hr1)
]
qed-.

lemma eq_inv_L_sn_unwind2_path (f) (q) (p):
      (ùóü‚óóq) = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉr1,r2. ùêû = ‚äór1 & q = ‚ñº[‚´Ø‚ñ∂[r1]f]r2 & r1‚óèùóü‚óór2 = p.
#f #q #p
>list_cons_comm #H0
elim (unwind2_path_des_append_pic_sn ‚Ä¶ H0) <list_cons_comm in H0; //
#H0 #r1 #r2 #_ #H2r1 #H1 #H2 destruct
elim (eq_inv_L_dx_structure ‚Ä¶ H2r1) -H2r1 #s1 #s2 #H1 #_ #H3 destruct
<list_append_assoc in H0; <list_append_assoc
<unwind2_path_append_ppc_dx //
<unwind2_path_L_sn <H1 <list_append_empty_dx #H0
elim (eq_inv_list_rcons_bi ????? H0) -H0 #H0 #_
/2 width=5 by ex3_2_intro/
qed-.

lemma eq_inv_A_sn_unwind2_path (f) (q) (p):
      (ùóî‚óóq) = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉr1,r2. ùêû = ‚äór1 & q = ‚ñº[‚ñ∂[r1]f]r2 & r1‚óèùóî‚óór2 = p.
#f #q #p
>list_cons_comm #H0
elim (unwind2_path_des_append_pic_sn ‚Ä¶ H0) <list_cons_comm in H0; //
#H0 #r1 #r2 #_ #H2r1 #H1 #H2 destruct
elim (eq_inv_A_dx_structure ‚Ä¶ H2r1) -H2r1 #s1 #s2 #H1 #_ #H3 destruct
<list_append_assoc in H0; <list_append_assoc
<unwind2_path_append_ppc_dx //
<unwind2_path_A_sn <H1 <list_append_empty_dx #H0
elim (eq_inv_list_rcons_bi ????? H0) -H0 #H0 #_
/2 width=5 by ex3_2_intro/
qed-.

lemma eq_inv_S_sn_unwind2_path (f) (q) (p):
      (ùó¶‚óóq) = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉr1,r2. ùêû = ‚äór1 & q = ‚ñº[‚ñ∂[r1]f]r2 & r1‚óèùó¶‚óór2 = p.
#f #q #p
>list_cons_comm #H0
elim (unwind2_path_des_append_pic_sn ‚Ä¶ H0) <list_cons_comm in H0; //
#H0 #r1 #r2 #_ #H2r1 #H1 #H2 destruct
elim (eq_inv_S_dx_structure ‚Ä¶ H2r1) -H2r1 #s1 #s2 #H1 #_ #H3 destruct
<list_append_assoc in H0; <list_append_assoc
<unwind2_path_append_ppc_dx //
<unwind2_path_S_sn <H1 <list_append_empty_dx #H0
elim (eq_inv_list_rcons_bi ????? H0) -H0 #H0 #_
/2 width=5 by ex3_2_intro/
qed-.

(* Advanced eliminations with path ******************************************)

lemma path_ind_unwind (Q:predicate ‚Ä¶):
      Q (ùêû) ‚Üí
      (‚àÄk. Q (ùêû) ‚Üí Q (ùó±k‚óóùêû)) ‚Üí
      (‚àÄk,l,p. Q (l‚óóp) ‚Üí Q (ùó±k‚óól‚óóp)) ‚Üí
      (‚àÄp. Q p ‚Üí Q (ùóü‚óóp)) ‚Üí
      (‚àÄp. Q p ‚Üí Q (ùóî‚óóp)) ‚Üí
      (‚àÄp. Q p ‚Üí Q (ùó¶‚óóp)) ‚Üí
      ‚àÄp. Q p.
#Q #IH1 #IH2 #IH3 #IH4 #IH5 #IH6 #p
@(list_ind_rcons ‚Ä¶ p) -p // #p * [ #k ]
[ @(list_ind_rcons ‚Ä¶ p) -p ]
/2 width=1 by/
qed-.
