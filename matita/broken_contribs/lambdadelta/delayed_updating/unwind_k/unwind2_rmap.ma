(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "delayed_updating/unwind_k/preunwind2_rmap.ma".
include "delayed_updating/syntax/path.ma".

(* TAILED UNWIND FOR RELOCATION MAP *****************************************)

rec definition unwind2_rmap (f) (p) on p: tr_map ‚âù
match p with
[ list_empty     ‚áí f
| list_lcons l q ‚áí ‚ñ∂[unwind2_rmap f q]l
].

interpretation
  "tailed unwind (relocation map)"
  'BlackRightTriangle f p = (unwind2_rmap f p).

(* Basic constructions ******************************************************)

lemma unwind2_rmap_empty (f):
      f = ‚ñ∂[f]ùêû.
// qed.

lemma unwind2_rmap_rcons (f) (p) (l):
      ‚ñ∂[‚ñ∂[f]p]l = ‚ñ∂[f](p‚óñl).
// qed.

lemma unwind2_rmap_d_dx (f) (p) (k:‚Ñ§‚Å∫):
      ‚ñ∂[f]p‚àòùêÆ‚ù®k‚ù© = ‚ñ∂[f](p‚óñùó±k).
// qed.

lemma unwind2_rmap_m_dx (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](p‚óñùó∫).
// qed.

lemma unwind2_rmap_L_dx (f) (p):
      (‚´Ø‚ñ∂[f]p) = ‚ñ∂[f](p‚óñùóü).
// qed.

lemma unwind2_rmap_A_dx (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](p‚óñùóî).
// qed.

lemma unwind2_rmap_S_dx (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](p‚óñùó¶).
// qed.

(* Constructions with path_append *******************************************)

lemma unwind2_rmap_append (f) (p) (q):
      ‚ñ∂[‚ñ∂[f]p]q = ‚ñ∂[f](p‚óèq).
#f #p #q elim q -q // #l #q #IH
<unwind2_rmap_rcons <unwind2_rmap_rcons //
qed.

(* Constructions with path_lcons ********************************************)

lemma unwind2_rmap_lcons (f) (p) (l):
      ‚ñ∂[‚ñ∂[f]l]p = ‚ñ∂[f](l‚óóp).
// qed.

lemma unwind2_rmap_d_sn (f) (p) (k:‚Ñ§‚Å∫):
      ‚ñ∂[f‚àòùêÆ‚ù®k‚ù©]p = ‚ñ∂[f](ùó±k‚óóp).
// qed.

lemma unwind2_rmap_m_sn (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](ùó∫‚óóp).
// qed.

lemma unwind2_rmap_L_sn (f) (p):
      ‚ñ∂[‚´Øf]p = ‚ñ∂[f](ùóü‚óóp).
// qed.

lemma unwind2_rmap_A_sn (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](ùóî‚óóp).
// qed.

lemma unwind2_rmap_S_sn (f) (p):
      ‚ñ∂[f]p = ‚ñ∂[f](ùó¶‚óóp).
// qed.
