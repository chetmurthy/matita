(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/functions/upspoon_1.ma".
include "ground/arith/nat_succ.ma".
include "ground/arith/ynat_nat.ma".

(* SUCCESSOR FOR NON-NEGATIVE INTEGERS WITH INFINITY ************************)

definition ysucc_aux (n): ynat ‚âù
           yinj_nat (‚Üën).

(*** ysucc *)
definition ysucc: ynat ‚Üí ynat ‚âù
           ynat_bind_nat ysucc_aux (‚àû).

interpretation
  "successor (non-negative integers with infinity)"
  'UpSpoon x = (ysucc x).

(* Constructions ************************************************************)

(*** ysucc_inj *)
lemma ysucc_inj (n): yinj_nat (‚Üën) = ‚´Ø(yinj_nat n).
@(ynat_bind_nat_inj ysucc_aux)
qed.

(*** ysucc_Y *)
lemma ysucc_inf: ‚àû = ‚´Ø‚àû.
// qed.

(* Inversions ***************************************************************)

(*** ysucc_inv_inj_sn *)
lemma eq_inv_inj_ysucc (n1) (x2:ynat):
      yinj_nat n1 = ‚´Øx2 ‚Üí
      ‚àÉ‚àÉn2. yinj_nat n2 = x2 & ‚Üën2 ={‚Ñï} n1.
#n1 #x2 @(ynat_split_nat_inf ‚Ä¶ x2) -x2
[ /3 width=3 by eq_inv_yinj_nat_bi, ex2_intro/
| #H elim (eq_inv_yinj_nat_inf ‚Ä¶ H)
]
qed-.

(*** ysucc_inv_inj_dx *)
lemma eq_inv_ysucc_inj (x1) (n2):
      (‚´Øx1) = yinj_nat n2  ‚Üí
      ‚àÉ‚àÉn1. yinj_nat n1 = x1 & ‚Üën1 ={‚Ñï} n2.
/2 width=1 by eq_inv_inj_ysucc/ qed-.

(*** ysucc_inv_Y_sn *)
lemma eq_inv_inf_ysucc (x2): ‚àû = ‚´Øx2 ‚Üí ‚àû = x2.
#x2 @(ynat_split_nat_inf ‚Ä¶ x2) -x2 //
#n1 <ysucc_inj #H elim (eq_inv_inf_yinj_nat ‚Ä¶ H)
qed-.

(*** ysucc_inv_Y_dx *)
lemma eq_inv_ysucc_inf (x1): ‚´Øx1 = ‚àû ‚Üí ‚àû = x1.
/2 width=1 by eq_inv_inf_ysucc/ qed-.

(*** ysucc_inv_inj *)
lemma eq_inv_ysucc_bi: injective ‚Ä¶ ysucc.
#x1 @(ynat_split_nat_inf ‚Ä¶ x1) -x1
[ #n1 #x2 <ysucc_inj #H
  elim (eq_inv_inj_ysucc ‚Ä¶ H) -H #n2 #H1 #H2 destruct
  <(eq_inv_nsucc_bi ‚Ä¶ H2) -H2 //
| #x2 #H <(eq_inv_inf_ysucc ‚Ä¶ H) -H //
]
qed-.

(*** ysucc_inv_refl *)
lemma eq_inv_fix_ysucc (x): x = ‚´Øx ‚Üí ‚àû = x.
#x @(ynat_split_nat_inf ‚Ä¶ x) -x //
#n <ysucc_inj #H
lapply (eq_inv_yinj_nat_bi ‚Ä¶ H) -H #H
elim (eq_inv_fix_nsucc ‚Ä¶ H)
qed-.

(*** ysucc_inv_O_sn *)
lemma eq_inv_zero_ysucc (x): ùüé = ‚´Øx ‚Üí ‚ä•.
#x #H
elim (eq_inv_inj_ysucc (ùüé) ? H) -H #n #_ #H
/2 width=2 by eq_inv_zero_npos/
qed-.

(*** ysucc_inv_O_dx *)
lemma eq_inv_ysucc_zero (x): ‚´Øx = ùüé ‚Üí ‚ä•.
/2 width=2 by eq_inv_zero_ysucc/ qed-.

(* Eliminations *************************************************************)

(*** ynat_ind *)
lemma ynat_ind_succ (Q:predicate ‚Ä¶):
      Q (ùüé) ‚Üí (‚àÄn:‚Ñï. Q (yinj_nat n) ‚Üí Q (‚´Ø(yinj_nat n))) ‚Üí Q (‚àû) ‚Üí ‚àÄx. Q x.
#Q #IH1 #IH2 #IH3 #x @(ynat_split_nat_inf ‚Ä¶ x) -x //
#n @(nat_ind_succ ‚Ä¶ n) -n /2 width=1 by/
qed-.
