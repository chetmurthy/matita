(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/functions/element_t_1.ma".
include "ground/relocation/pr_map.ma".
include "ground/arith/pnat.ma".

(* TOTAL RELOCATION MAPS ****************************************************)

definition tr_map: Type[0] ‚âù stream (‚Ñï‚Å∫).

corec definition tr_inj: tr_map ‚Üí pr_map.
* *
[ #f @(‚´Ø(tr_inj f))
| #p #f @(‚Üë(tr_inj (p‚®Æf)))
]
defined.

interpretation
  "injection (total relocation maps)"
  'ElementT f = (tr_inj f).

(* Basic constructions ******************************************************)

lemma tr_inj_unfold_unit (f): ‚´Øùê≠‚ù®f‚ù© = ùê≠‚ù®ùüè‚®Æf‚ù©.
#f <(stream_unfold ‚Ä¶ (ùê≠‚ù®ùüè‚®Æf‚ù©)) in ‚ä¢ (???%); //
qed.

lemma tr_inj_unfold_succ (f): ‚àÄp. ‚Üëùê≠‚ù®p‚®Æf‚ù© = ùê≠‚ù®‚Üëp‚®Æf‚ù©.
#f #p <(stream_unfold ‚Ä¶ (ùê≠‚ù®‚Üëp‚®Æf‚ù©)) in ‚ä¢ (???%); //
qed.

(* Basic inversions *********************************************************)

(*** push_inv_seq_sn *)
lemma eq_inv_cons_pr_push (f) (g):
      ‚àÄp. ùê≠‚ù®p‚®Æg‚ù© = ‚´Øf ‚Üí ‚àß‚àß ùüè = p & ùê≠‚ù®g‚ù© = f.
#f #g *
[ <tr_inj_unfold_unit
  /3 width=1 by eq_inv_pr_push_bi, conj/
| #p <tr_inj_unfold_succ #H
  elim (eq_inv_pr_next_push ‚Ä¶ H)
]
qed-.

(*** push_inv_seq_dx *)
lemma eq_inv_pr_push_cons (f) (g):
      ‚àÄp. ‚´Øf = ùê≠‚ù®p‚®Æg‚ù© ‚Üí ‚àß‚àß ùüè = p & ùê≠‚ù®g‚ù© = f.
#f #g *
[ <tr_inj_unfold_unit
  /3 width=1 by eq_inv_pr_push_bi, conj/
| #p <tr_inj_unfold_succ #H
  elim (eq_inv_pr_push_next ‚Ä¶ H)
]
qed-.

(*** next_inv_seq_sn *)
lemma eq_inv_cons_pr_next (f) (g):
      ‚àÄp. ùê≠‚ù®p‚®Æg‚ù© = ‚Üëf ‚Üí ‚àÉ‚àÉq. ùê≠‚ù®q‚®Æg‚ù© = f & ‚Üëq = p.
#f #g *
[ <tr_inj_unfold_unit #H
  elim (eq_inv_pr_push_next ‚Ä¶ H)
| #p <tr_inj_unfold_succ #H
  /3 width=3 by eq_inv_pr_next_bi, ex2_intro/
]
qed-.

(*** next_inv_seq_dx *)
lemma eq_inv_pr_next_cons (f) (g):
      ‚àÄp. ‚Üëf = ùê≠‚ù®p‚®Æg‚ù© ‚Üí ‚àÉ‚àÉq. ùê≠‚ù®q‚®Æg‚ù© = f & ‚Üëq = p.
#f #g *
[ <tr_inj_unfold_unit #H
  elim (eq_inv_pr_next_push ‚Ä¶ H)
| #p <tr_inj_unfold_succ #H
  /3 width=3 by eq_inv_pr_next_bi, ex2_intro/
]
qed-.
