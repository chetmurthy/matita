(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/relocation/fu/fur_dapp.ma".
include "ground/arith/nat_plus_rplus.ma".
include "ground/arith/nat_split.ma".
include "ground/notation/functions/at_2.ma".

(* EXTENDED DEPTH APPLICATION FOR FINITE RELOCATION MAPS FOR UNWIND *********)

definition fur_xapp (f) (n): ‚Ñï ‚âù
           nsplit ‚Ä¶ (ùüé) (Œªp.(‚Å§fÔº†‚ß£‚ù®p‚ù©)) n
.

interpretation
  "extended depth application (finite relocation maps for unwind)"
  'At f n = (fur_xapp f n).

(* Basic constructions ******************************************************)

lemma fur_xapp_zero (f):
      (ùüé) = fÔº†‚ù®ùüé‚ù©.
// qed.

lemma fur_xapp_pos (f) (p):
      (‚Å§fÔº†‚ß£‚ù®p‚ù©) = fÔº†‚ù®‚Å§p‚ù©.
// qed.

lemma fur_xapp_j_dx_pos (f) (k) (p):
      fÔº†‚ù®‚Å§(p+k)‚ù© = (‚Æ§*[k]f)Ôº†‚ù®‚Å§p‚ù©.
// qed.

lemma fur_xapp_j_dx_succ (f) (k) (n:‚Ñï):
      fÔº†‚ù®‚Å§‚Üë(n+k)‚ù© = (‚Æ§*[k]f)Ôº†‚ù®‚Å§‚Üën‚ù©.
#f #k #n
<fur_xapp_j_dx_pos //
qed.
