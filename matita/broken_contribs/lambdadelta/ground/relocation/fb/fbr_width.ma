(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/relocation/fb/fbr_map.ma".
include "ground/arith/nat_plus.ma".
include "ground/notation/functions/updownarrow_1.ma".

(* WIDTH FOR FINITE RELOCATION MAPS WITH BOOLEANS ***************************)

rec definition fbr_width (f) on f: ‚Ñï ‚âù
match f with
[ list_empty     ‚áí ùüé
| list_lcons i g ‚áí
  if i then (‚Å§‚Üë(fbr_width g)) else fbr_width g
].

interpretation
  "width (finite relocation maps with booleans)"
  'UpDownArrow f = (fbr_width f).

(* Basic constructions ******************************************************)

lemma fbr_width_empty:
      (ùüé) = ‚Üïùê¢.
// qed.

lemma fbr_width_push_dx (f):
      ‚Üïf = ‚Üï‚´Øf.
// qed.

lemma fbr_width_next_dx (f):
      (‚Å§‚Üë‚Üïf) = ‚Üï‚Üëf.
// qed.

(* Main constructions *******************************************************)

theorem fbr_width_append (f) (g):
        (‚Üïf+‚Üïg) = ‚Üï(f‚óèg).
#f #g elim g -g //
* #g #IH <list_append_lcons_sn
[ <fbr_width_next_dx <fbr_width_next_dx //
| <fbr_width_push_dx <fbr_width_push_dx //
]
qed.

(* Constructions with fbr_lcons *********************************************)

lemma fbr_width_push_sn (f):
      ‚Üïf = ‚Üï(ùóΩ‚óóf).
// qed.

lemma fbr_width_next_sn (f):
      (‚Å§‚Üë‚Üïf) = ‚Üï(ùóª‚óóf).
// qed.
