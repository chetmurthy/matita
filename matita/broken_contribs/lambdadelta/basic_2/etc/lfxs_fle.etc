(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/static/fle_fqup.ma".
include "basic_2/static/fle_fid.ma".
include "basic_2/static/lfxs_length.ma".
include "basic_2/static/lfxs_fqup.ma".
include "basic_2/static/lfeq_fid.ma".

(* Note: "‚¶ÉL2, T1‚¶Ñ ‚äÜ ‚¶ÉL0, T1‚¶Ñ" may not hold *)
definition R_lfxs_fle_compatible: predicate (relation3 ‚Ä¶) ‚âù ŒªR.
                                  ‚àÄL0,T0,T1. R L0 T0 T1 ‚Üí
                                  ‚àÄL2. L0 ‚™§*[R, T0] L2 ‚Üí
                                  ‚àß‚àß ‚¶ÉL2, T0‚¶Ñ ‚äÜ ‚¶ÉL0, T0‚¶Ñ & ‚¶ÉL2, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T0‚¶Ñ
                                   & ‚¶ÉL0, T1‚¶Ñ ‚äÜ ‚¶ÉL0, T0‚¶Ñ.

axiom fle_inv_zero_bind_dx: ‚àÄI,K,V,X. ‚¶ÉK.‚ìë{I}V, X‚¶Ñ ‚äÜ ‚¶ÉK.‚ìë{I}V, #O‚¶Ñ ‚Üí
                            ‚à®‚à® ùêà‚¶ÉK.‚ìë{I}V, #O‚¶Ñ | ‚¶ÉK.‚ìë{I}V, X‚¶Ñ ‚äÜ ‚¶ÉK, V‚¶Ñ.
                                   
lemma fle_lfxs_conf_fle: ‚àÄR. (* c_reflexive ‚Ä¶ R ‚Üí *)
                         R_lfxs_fle_compatible R ‚Üí
                         ‚àÄL0,T0,T1. ‚¶ÉL0, T1‚¶Ñ ‚äÜ ‚¶ÉL0, T0‚¶Ñ ‚Üí
                         ‚àÄL2. L0 ‚™§*[R, T0] L2 ‚Üí
                         ‚àß‚àß ‚¶ÉL2, T0‚¶Ñ ‚äÜ ‚¶ÉL0, T0‚¶Ñ & ‚¶ÉL2, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T0‚¶Ñ.
#R #HR #L0 #T0 @(fqup_wf_ind_eq (‚íª) ‚Ä¶ (‚ãÜ) L0 T0) -L0 -T0
#G #L #T #IH #G0 #L0 * *
[ #s #HG #HL #HT #X #HX #Y #HY destruct -HR -IH
  lapply (lfxs_fwd_length ‚Ä¶ HY) -HY #H0
  lapply (fle_inv_fid_dx ‚Ä¶ HX ?) -HX
  /4 width=6 by fle_sort_length, fid_length, fle_fid_sn, conj/
| * [| #i ] #HG #HL #HT #X #HX #Y #HY destruct
  [ elim (lfxs_inv_zero ‚Ä¶ HY) -HY *
    [ #H1 #H2 destruct -IH /2 width=1 by conj/
    | #I #K0 #K2 #V0 #V1 #HK02 #HV01 #H1 #H2 destruct -IH
      elim (HR ‚Ä¶ HV01 ‚Ä¶ HK02) -HR -HV01 -HK02 #HKV1 #HKV2 #HKV3
      @conj
      [
      |  
(*    
        elim H2R -H2R #H2R
        [ <(H2R G0) in HV02; -H2R #HV02
          elim (IH ‚Ä¶ HV02 ‚Ä¶ HK02) /2 width=2 by fqu_fqup, fqu_lref_O/ -IH -HV02 -HK02 #H1V #H2V #H3V
        | lapply (H2R ‚Ä¶ HV02) -H2R -HV02 #HV20
          elim (IH ‚Ä¶ V0 ‚Ä¶ HK02) [|*: /2 width=4 by fqu_fqup, fqu_lref_O/ ] -IH -HK02 #H1V #_ #_
        ]
      | #f #I #K0 #K2 #Hf #HK02 #H1 #H2 destruct
      ]
    | * #I0 #K0 #V0 #V1 #HV01 #HV1X #H destruct
      elim (lfxs_inv_zero_pair_sn ‚Ä¶ HY) -HY #K2 #V2 #HK02 #HV02 #H destruct
    ]
  | elim (cpx_inv_lref1 ‚Ä¶ HX) -HX
    [ #H destruct
      elim (lfxs_inv_lref ‚Ä¶ HY) -HY *
      [ #H0 #H1 destruct /2 width=1 by and3_intro/
      | #I0 #I2 #K0 #K2 #HK02 #H1 #H2 destruct
        lapply (lfxs_fwd_length ‚Ä¶ HK02) #HK
        elim (IH ‚Ä¶ HK02) [|*: /2 width=4 by fqu_fqup/ ] -IH -HK02
        /3 width=5 by and3_intro, fle_lifts_SO/
      ]
    | * #I0 #K0 #V1 #HV1 #HV1X #H0 destruct
      elim (lfxs_inv_lref_bind_sn ‚Ä¶ HY) -HY #I2 #K2 #HK02 #H destruct
      lapply (lfxs_fwd_length ‚Ä¶ HK02) #HK
      elim (IH ‚Ä¶ HK02) [|*: /2 width=4 by fqu_fqup/ ] -IH -HV1 -HK02
      /3 width=5 by fle_lifts_SO, and3_intro/
    ]
  ]
| #l #HG #HL #HT #X #HX #Y #HY destruct -IH
  lapply (lfxs_fwd_length ‚Ä¶ HY) -HY #H0
  >(cpx_inv_gref1 ‚Ä¶ HX) -X
  /3 width=1 by fle_gref_length, and3_intro/
| #p #I #V0 #T0 #HG #HL #HT #X #HX #Y #HY destruct
  lapply (lfxs_fwd_length ‚Ä¶ HY) #H0
  elim (lfxs_inv_bind ‚Ä¶ V0 ? HY) -HY // #HV0 #HT0
  elim (cpx_inv_bind1 ‚Ä¶ HX) -HX *
  [ #V1 #T1 #HV01 #HT01 #H destruct
    elim (IH ‚Ä¶ HV01 ‚Ä¶ HV0) -HV01 -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HT01 ‚Ä¶ HT0) -HT01 -HT0 -IH // #H1T #H2T #H3T
    /4 width=3 by fle_bind_eq, fle_fwd_pair_sn, and3_intro/
  | #T #HT #HXT #H1 #H2 destruct
    elim (IH G0 ‚Ä¶ V0‚Ä¶ V0 ‚Ä¶ HV0) -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HT ‚Ä¶ HT0) -HT -HT0 -IH // #H1T #H2T #H3T
    /3 width=5 by fle_bind, fle_inv_lifts_sn, and3_intro/
  ]
| #I #V0 #X0 #HG #HL #HT #X #HX #Y #HY destruct
  elim (lfxs_inv_flat ‚Ä¶ HY) -HY #HV0 #HX0
  elim (cpx_inv_flat1 ‚Ä¶ HX) -HX *
  [ #V1 #T1 #HV01 #HT01 #H destruct
    elim (IH ‚Ä¶ HV01 ‚Ä¶ HV0) -HV01 -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HT01 ‚Ä¶ HX0) -HT01 -HX0 -IH // #H1T #H2T #H3T
    /3 width=3 by fle_flat, and3_intro/
  | #HX #H destruct
    elim (IH G0 ‚Ä¶ V0‚Ä¶ V0 ‚Ä¶ HV0) -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HX ‚Ä¶ HX0) -HX -HX0 -IH // #H1T #H2T #H3T
    /4 width=3 by fle_flat_sn, fle_flat_dx_dx, fle_flat_dx_sn, and3_intro/
  | #HX #H destruct
    elim (IH ‚Ä¶ HX ‚Ä¶ HV0) -HX -HV0 // #H1V #H2V #H3V
    elim (IH G0 ‚Ä¶ X0‚Ä¶ X0 ‚Ä¶ HX0) -HX0 -IH // #H1T #H2T #H3T
    /4 width=3 by fle_flat_sn, fle_flat_dx_dx, fle_flat_dx_sn, and3_intro/
  | #p #V1 #W0 #W1 #T0 #T1 #HV01 #HW01 #HT01 #H1 #H2 #H3 destruct
    elim (lfxs_inv_bind ‚Ä¶ W0 ? HX0) -HX0 // #HW0 #HT0
    elim (IH ‚Ä¶ HV01 ‚Ä¶ HV0) -HV01 -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HW01 ‚Ä¶ HW0) -HW01 -HW0 // #H1W #H2W #H3W
    elim (IH ‚Ä¶ HT01 ‚Ä¶ HT0) -HT01 -HT0 -IH // #H1T #H2T #H3T
    lapply (fle_fwd_pair_sn ‚Ä¶ H2T) -H2T #H2T
    lapply (fle_fwd_pair_sn ‚Ä¶ H3T) -H3T #H3T
    @and3_intro [ /3 width=5 by fle_flat, fle_bind/ ] (**) (* full auto too slow *)
    @fle_bind_sn_ge /4 width=1 by fle_shift, fle_flat_sn, fle_flat_dx_dx, fle_flat_dx_sn, fle_bind_dx_sn/
  | #p #V1 #X1 #W0 #W1 #T0 #T1 #HV01 #HVX1 #HW01 #HT01 #H1 #H2 #H3 destruct
    elim (lfxs_inv_bind ‚Ä¶ W0 ? HX0) -HX0 // #HW0 #HT0
    elim (IH ‚Ä¶ HV01 ‚Ä¶ HV0) -HV01 -HV0 // #H1V #H2V #H3V
    elim (IH ‚Ä¶ HW01 ‚Ä¶ HW0) -HW01 -HW0 // #H1W #H2W #H3W
    elim (IH ‚Ä¶ HT01 ‚Ä¶ HT0) -HT01 -HT0 -IH // #H1T #H2T #H3T
    lapply (fle_fwd_pair_sn ‚Ä¶ H2T) -H2T #H2T
    lapply (fle_fwd_pair_sn ‚Ä¶ H3T) -H3T #H3T
    @and3_intro[ /3 width=5 by fle_flat, fle_bind/ ] (**) (* full auto too slow *)
    @fle_bind_sn_ge //
    [1,3: /3 width=1 by fle_flat_dx_dx, fle_bind_dx_sn/
    |2,4: /4 width=3 by fle_flat_sn, fle_flat_dx_sn, fle_flat_dx_dx, fle_shift, fle_lifts_sn/
    ]
  ]
]
*)
