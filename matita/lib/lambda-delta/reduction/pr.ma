(*
    ||M||  This file is part of HELM, an Hypertextual, Electronic
    ||A||  Library of Mathematics, developed at the Computer Science
    ||T||  Department of the University of Bologna, Italy.
    ||I||
    ||T||
    ||A||  This file is distributed under the terms of the
    \   /  GNU General Public License Version 2
     \ /
      V_______________________________________________________________ *)

include "lambda-delta/substitution/thin.ma".

(* SINGLE STEP PARALLEL REDUCTION *******************************************)

inductive pr: lenv ‚Üí term ‚Üí term ‚Üí Prop ‚âù
| pr_sort : ‚àÄL,k. pr L (‚ãÜk) (‚ãÜk)
| pr_lref : ‚àÄL,i. pr L (#i) (#i)
| pr_bind : ‚àÄL,I,V1,V2,T1,T2. pr L V1 V2 ‚Üí pr (L. ùïì{I} V1) T1 T2 ‚Üí
            pr L (ùïì{I} V1. T1) (ùïì{I} V2. T2)
| pr_flat : ‚àÄL,I,V1,V2,T1,T2. pr L V1 V2 ‚Üí pr L T1 T2 ‚Üí
            pr L (ùïó{I} V1. T1) (ùïó{I} V2. T2)
| pr_beta : ‚àÄL,V1,V2,W,T1,T2.
            pr L V1 V2 ‚Üí pr (L. ùïì{Abst} W) T1 T2 ‚Üí (*ùïì*)
            pr L (ùïö{Appl} V1. ùïö{Abst} W. T1) (ùïö{Abbr} V2. T2)
| pr_delta: ‚àÄL,K,V1,V2,V,i.
            ‚Üì[0,i] L ‚â° K. ùïì{Abbr} V1 ‚Üí pr K V1 V2 ‚Üí ‚Üë[0,i+1] V2 ‚â° V ‚Üí
            pr L (#i) V
| pr_theta: ‚àÄL,V,V1,V2,W1,W2,T1,T2.
            pr L V1 V2 ‚Üí ‚Üë[0,1] V2 ‚â° V ‚Üí pr L W1 W2 ‚Üí pr (L. ùïì{Abbr} W1) T1 T2 ‚Üí (*ùïì*)
            pr L (ùïö{Appl} V1. ùïö{Abbr} W1. T1) (ùïö{Abbr} W2. ùïö{Appl} V. T2)
| pr_zeta : ‚àÄL,V,T,T1,T2. ‚Üë[0,1] T1 ‚â° T ‚Üí pr L T1 T2 ‚Üí
            pr L (ùïö{Abbr} V. T) T2
| pr_tau  : ‚àÄL,V,T1,T2. pr L T1 T2 ‚Üí pr L (ùïö{Cast} V. T1) T2
.

interpretation "single step parallel reduction" 'PR L T1 T2 = (pr L T1 T2).

(* The three main lemmas on reduction ***************************************)

lemma pr_inv_lift: ‚àÄL,T1,T2. L ‚ä¢ T1 ‚áí T2 ‚Üí
                   ‚àÄd,e,K. ‚Üì[d,e] L ‚â° K ‚Üí ‚àÄU1. ‚Üë[d,e] U1 ‚â° T1 ‚Üí
                   ‚àÉ‚àÉU2. ‚Üë[d,e] U2 ‚â° T2 & K ‚ä¢ U1 ‚áí U2.
#L #T1 #T2 #H elim H -H L T1 T2
[ #L #k #d #e #K #_ #U1 #HU1
  lapply (lift_inv_sort2 ‚Ä¶ HU1) -HU1 #H destruct -U1 /2/
| #L #i #d #e #K #_ #U1 #HU1
  lapply (lift_inv_lref2 ‚Ä¶ HU1) -HU1 * * #Hid #H destruct -U1 /3/
| #L #I #V1 #V2 #T1 #T2 #_ #_ #IHV12 #IHT12 #d #e #K #HLK #X #HX
  lapply (lift_inv_bind2 ‚Ä¶ HX) -HX * #V0 #T0 #HV01 #HT01 #HX destruct -X;
  elim (IHV12 ‚Ä¶ HLK ‚Ä¶ HV01) -IHV12 #V3 #HV32 #HV03
  elim (IHT12 ‚Ä¶ HT01) -IHT12 HT01 [2,3: -HV32 HV03 /3/] -HLK HV01 /3 width=5/
| #L #I #V1 #V2 #T1 #T2 #_ #_ #IHV12 #IHT12 #d #e #K #HLK #X #HX
  elim (lift_inv_flat2 ‚Ä¶ HX) -HX #V0 #T0 #HV01 #HT01 #HX destruct -X;
  elim (IHV12 ‚Ä¶ HLK ‚Ä¶ HV01) -IHV12 HV01 #V3 #HV32 #HV03
  elim (IHT12 ‚Ä¶ HLK ‚Ä¶ HT01) -IHT12 HT01 HLK /3 width=5/
| #L #V1 #V2 #W1 #T1 #T2 #_ #_ #IHV12 #IHT12 #d #e #K #HLK #X #HX
  elim (lift_inv_flat2 ‚Ä¶ HX) -HX #V0 #Y #HV01 #HY #HX destruct -X;
  elim (lift_inv_bind2 ‚Ä¶ HY) -HY #W0 #T0 #HW01 #HT01 #HY destruct -Y;
  elim (IHV12 ‚Ä¶ HLK ‚Ä¶ HV01) -IHV12 HV01 #V3 #HV32 #HV03
  elim (IHT12 ‚Ä¶ HT01) -IHT12 HT01
    [3: -HV32 HV03 @(thin_skip ‚Ä¶ HLK) /2/ |2: skip ] (**) (* /3 width=5/ is too slow *)
    -HLK HW01
  /3 width=5/
| #L #K0 #V1 #V2 #V0 #i #HLK0 #HV12 #HV20 #IHV12 #d #e #K #HLK #X #HX
  lapply (lift_inv_lref2 ‚Ä¶ HX) -HX * * #Hid #HX destruct -X;
  [ -HV12;
    elim (thin_conf_lt ‚Ä¶ HLK ‚Ä¶ HLK0 Hid) -HLK HLK0 L #L #V3 #HKL #HK0L #HV31
    elim (IHV12 ‚Ä¶ HK0L ‚Ä¶ HV31) -IHV12 HK0L HV31 #V4 #HV42 #HV34
    elim (lift_trans_le ‚Ä¶ HV42 ‚Ä¶ HV20 ?) -HV42 HV20 V2 // #V2 #HV42
    >arith5 // -Hid #HV20  
    @(ex2_1_intro ‚Ä¶ V2) /2 width=6/ (**) (* /3 width=8/ is slow *)
  | -IHV12;
    lapply (thin_conf_ge ‚Ä¶ HLK ‚Ä¶ HLK0 Hid) -HLK HLK0 L #HK
    elim (lift_free ‚Ä¶ HV20 d (i - e + 1) ? ? ?) -HV20 /2/
    >arith3 /2/ -Hid /3 width=8/ (**) (* just /3 width=8/ is a bit slow *)
  ]
| #L #V #V1 #V2 #W1 #W2 #T1 #T2 #_ #HV2 #_ #_ #IHV12 #IHW12 #IHT12 #d #e #K #HLK #X #HX
  elim (lift_inv_flat2 ‚Ä¶ HX) -HX #V0 #Y #HV01 #HY #HX destruct -X;
  elim (lift_inv_bind2 ‚Ä¶ HY) -HY #W0 #T0 #HW01 #HT01 #HY destruct -Y;
  elim (IHV12 ? ? ? HLK ? HV01) -IHV12 HV01 #V3 #HV32 #HV03
  elim (IHW12 ? ? ? HLK ? HW01) -IHW12 #W3 #HW32 #HW03
  elim (IHT12 ‚Ä¶ HT01) -IHT12 HT01
    [3: -HV2 HV32 HV03 HW32 HW03 @(thin_skip ‚Ä¶ HLK) /2/ |2: skip ] (**) (* /3/ is too slow *)
    -HLK HW01 #T3 #HT32 #HT03
  elim (lift_trans_le ‚Ä¶ HV32 ‚Ä¶ HV2 ?) -HV32 HV2 V2 // #V2 #HV32 #HV2
  @(ex2_1_intro ‚Ä¶ (ùïì{Abbr}W3.ùïó{Appl}V2.T3)) /3/ (**) (* /4/ loops *)
| #L #V #T #T1 #T2 #HT1 #_ #IHT12 #d #e #K #HLK #X #HX
  elim (lift_inv_bind2 ‚Ä¶ HX) -HX #V0 #T0 #_ #HT0 #H destruct -X;
  elim (lift_conf_rev ‚Ä¶ HT1 ‚Ä¶ HT0 ?) -HT1 HT0 T // #T #HT0 #HT1
  elim (IHT12 ‚Ä¶ HLK ‚Ä¶ HT1) -IHT12 HLK HT1 /3 width=5/
| #L #V #T1 #T2 #_ #IHT12 #d #e #K #HLK #X #HX
  elim (lift_inv_flat2 ‚Ä¶ HX) -HX #V0 #T0 #_ #HT01 #H destruct -X;
  elim (IHT12 ‚Ä¶ HLK ‚Ä¶ HT01) -IHT12 HLK HT01 /3/
]
qed.

(* this may be moved *)
lemma pr_refl: ‚àÄT,L. L ‚ä¢ T ‚áí T.
#T elim T -T //
#I elim I -I /2/
qed.
