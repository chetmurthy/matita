(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "Basic-2/substitution/drop.ma".

(* PARALLEL SUBSTITUTION ON TERMS *******************************************)

inductive tps: lenv ‚Üí term ‚Üí nat ‚Üí nat ‚Üí term ‚Üí Prop ‚âù
| tps_sort : ‚àÄL,k,d,e. tps L (‚ãÜk) d e (‚ãÜk)
| tps_lref : ‚àÄL,i,d,e. tps L (#i) d e (#i)
| tps_subst: ‚àÄL,K,V,W,i,d,e. d ‚â§ i ‚Üí i < d + e ‚Üí
             ‚Üì[0, i] L ‚â° K. ùïì{Abbr} V ‚Üí ‚Üë[0, i + 1] V ‚â° W ‚Üí tps L (#i) d e W
| tps_bind : ‚àÄL,I,V1,V2,T1,T2,d,e.
             tps L V1 d e V2 ‚Üí tps (L. ùïì{I} V1) T1 (d + 1) e T2 ‚Üí
             tps L (ùïì{I} V1. T1) d e (ùïì{I} V2. T2)
| tps_flat : ‚àÄL,I,V1,V2,T1,T2,d,e.
             tps L V1 d e V2 ‚Üí tps L T1 d e T2 ‚Üí
             tps L (ùïó{I} V1. T1) d e (ùïó{I} V2. T2)
.

interpretation "parallel substritution (term)"
   'PSubst L T1 d e T2 = (tps L T1 d e T2).

(* Basic properties *********************************************************)

lemma tps_leq_repl: ‚àÄL1,T1,T2,d,e. L1 ‚ä¢ T1 [d, e] ‚â´ T2 ‚Üí
                    ‚àÄL2. L1 [d, e] ‚âà L2 ‚Üí L2 ‚ä¢ T1 [d, e] ‚â´ T2.
#L1 #T1 #T2 #d #e #H elim H -H L1 T1 T2 d e
[ //
| //
| #L1 #K1 #V #W #i #d #e #Hdi #Hide #HLK1 #HVW #L2 #HL12
  elim (drop_leq_drop1 ‚Ä¶ HL12 ‚Ä¶ HLK1 ? ?) -HL12 HLK1 // /2/
| /4/
| /3/
]
qed.

lemma tps_refl: ‚àÄT,L,d,e. L ‚ä¢ T [d, e] ‚â´ T.
#T elim T -T //
#I elim I -I /2/
qed.

lemma tps_weak: ‚àÄL,T1,T2,d1,e1. L ‚ä¢ T1 [d1, e1] ‚â´ T2 ‚Üí
                ‚àÄd2,e2. d2 ‚â§ d1 ‚Üí d1 + e1 ‚â§ d2 + e2 ‚Üí
                L ‚ä¢ T1 [d2, e2] ‚â´ T2.
#L #T1 #T #d1 #e1 #H elim H -L T1 T d1 e1
[ //
| //
| #L #K #V #W #i #d1 #e1 #Hid1 #Hide1 #HLK #HVW #d2 #e2 #Hd12 #Hde12
  lapply (transitive_le ‚Ä¶ Hd12 ‚Ä¶ Hid1) -Hd12 Hid1 #Hid2
  lapply (lt_to_le_to_lt ‚Ä¶ Hide1 ‚Ä¶ Hde12) -Hide1 /2/
| /4/
| /4/
]
qed.

lemma tps_weak_top: ‚àÄL,T1,T2,d,e.
                    L ‚ä¢ T1 [d, e] ‚â´ T2 ‚Üí L ‚ä¢ T1 [d, |L| - d] ‚â´ T2.
#L #T1 #T #d #e #H elim H -L T1 T d e
[ //
| //
| #L #K #V #W #i #d #e #Hdi #_ #HLK #HVW
  lapply (drop_fwd_drop2_length ‚Ä¶ HLK) #Hi
  lapply (le_to_lt_to_lt ‚Ä¶ Hdi Hi) #Hd
  lapply (plus_minus_m_m_comm (|L|) d ?) /2/
| normalize /2/
| /2/
]
qed.

lemma tps_weak_all: ‚àÄL,T1,T2,d,e.
                    L ‚ä¢ T1 [d, e] ‚â´ T2 ‚Üí L ‚ä¢ T1 [0, |L|] ‚â´ T2.
#L #T1 #T #d #e #HT12
lapply (tps_weak ‚Ä¶ HT12 0 (d + e) ? ?) -HT12 // #HT12
lapply (tps_weak_top ‚Ä¶ HT12) //
qed.

(* Basic inversion lemmas ***************************************************)

lemma tps_inv_lref1_aux: ‚àÄL,T1,T2,d,e. L ‚ä¢ T1 [d, e] ‚â´ T2 ‚Üí ‚àÄi. T1 = #i ‚Üí
                         T2 = #i ‚à® 
                         ‚àÉ‚àÉK,V,i. d ‚â§ i & i < d + e &
                                  ‚Üì[O, i] L ‚â° K. ùïì{Abbr} V &
                                  ‚Üë[O, i + 1] V ‚â° T2.
#L #T1 #T2 #d #e * -L T1 T2 d e
[ #L #k #d #e #i #H destruct
| /2/
| #L #K #V #T2 #i #d #e #Hdi #Hide #HLK #HVT2 #j #H destruct -i /3 width=7/
| #L #I #V1 #V2 #T1 #T2 #d #e #_ #_ #i #H destruct
| #L #I #V1 #V2 #T1 #T2 #d #e #_ #_ #i #H destruct
]
qed.

lemma tps_inv_lref1: ‚àÄL,T2,i,d,e. L ‚ä¢ #i [d, e] ‚â´ T2 ‚Üí
                     T2 = #i ‚à® 
                     ‚àÉ‚àÉK,V,i. d ‚â§ i & i < d + e &
                              ‚Üì[O, i] L ‚â° K. ùïì{Abbr} V &
                              ‚Üë[O, i + 1] V ‚â° T2.
/2/ qed.

lemma tps_inv_bind1_aux: ‚àÄd,e,L,U1,U2. L ‚ä¢ U1 [d, e] ‚â´ U2 ‚Üí
                         ‚àÄI,V1,T1. U1 = ùïì{I} V1. T1 ‚Üí
                         ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 [d, e] ‚â´ V2 & 
                                  L. ùïì{I} V1 ‚ä¢ T1 [d + 1, e] ‚â´ T2 &
                                  U2 =  ùïì{I} V2. T2.
#d #e #L #U1 #U2 * -d e L U1 U2
[ #L #k #d #e #I #V1 #T1 #H destruct
| #L #i #d #e #I #V1 #T1 #H destruct
| #L #K #V #W #i #d #e #_ #_ #_ #_ #I #V1 #T1 #H destruct
| #L #J #V1 #V2 #T1 #T2 #d #e #HV12 #HT12 #I #V #T #H destruct /2 width=5/
| #L #J #V1 #V2 #T1 #T2 #d #e #_ #_ #I #V #T #H destruct
]
qed.

lemma tps_inv_bind1: ‚àÄd,e,L,I,V1,T1,U2. L ‚ä¢ ùïì{I} V1. T1 [d, e] ‚â´ U2 ‚Üí
                     ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 [d, e] ‚â´ V2 & 
                              L. ùïì{I} V1 ‚ä¢ T1 [d + 1, e] ‚â´ T2 &
                              U2 =  ùïì{I} V2. T2.
/2/ qed.

lemma tps_inv_flat1_aux: ‚àÄd,e,L,U1,U2. L ‚ä¢ U1 [d, e] ‚â´ U2 ‚Üí
                         ‚àÄI,V1,T1. U1 = ùïó{I} V1. T1 ‚Üí
                         ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 [d, e] ‚â´ V2 & L ‚ä¢ T1 [d, e] ‚â´ T2 &
                                  U2 =  ùïó{I} V2. T2.
#d #e #L #U1 #U2 * -d e L U1 U2
[ #L #k #d #e #I #V1 #T1 #H destruct
| #L #i #d #e #I #V1 #T1 #H destruct
| #L #K #V #W #i #d #e #_ #_ #_ #_ #I #V1 #T1 #H destruct
| #L #J #V1 #V2 #T1 #T2 #d #e #_ #_ #I #V #T #H destruct
| #L #J #V1 #V2 #T1 #T2 #d #e #HV12 #HT12 #I #V #T #H destruct /2 width=5/
]
qed.

lemma tps_inv_flat1: ‚àÄd,e,L,I,V1,T1,U2. L ‚ä¢ ùïó{I} V1. T1 [d, e] ‚â´ U2 ‚Üí
                     ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 [d, e] ‚â´ V2 & L ‚ä¢ T1 [d, e] ‚â´ T2 &
                              U2 =  ùïó{I} V2. T2.
/2/ qed.
