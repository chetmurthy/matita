(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "Basic_2/unfold/tpss_lift.ma".
include "Basic_2/reducibility/tpr_lift.ma".
include "Basic_2/reducibility/cpr.ma".

(* CONTEXT-SENSITIVE PARALLEL REDUCTION ON TERMS ****************************)

(* Advanced properties ******************************************************)

lemma cpr_cdelta: ‚àÄL,K,V1,W1,W2,i.
                  ‚Üì[0, i] L ‚â° K. ùïì{Abbr} V1 ‚Üí K ‚ä¢ V1 [0, |L| - i - 1] ‚â´* W1 ‚Üí
                  ‚Üë[0, i + 1] W1 ‚â° W2 ‚Üí L ‚ä¢ #i ‚áí W2.
#L #K #V1 #W1 #W2 #i #HLK #HVW1 #HW12
lapply (ldrop_fwd_ldrop2_length ‚Ä¶ HLK) #Hi
@ex2_1_intro [2: // | skip | @tpss_subst /width=6/ ] (**) (* /3 width=6/ is too slow *)
qed.

(* Advanced inversion lemmas ************************************************)

(* Basic_1: was: pr2_gen_lref *)
lemma cpr_inv_lref1: ‚àÄL,T2,i. L ‚ä¢ #i ‚áí T2 ‚Üí
                     T2 = #i ‚à®
                     ‚àÉ‚àÉK,V1,T1. ‚Üì[0, i] L ‚â° K. ùïì{Abbr} V1 &
                                K ‚ä¢ V1 [0, |L| - i - 1] ‚â´* T1 &
                                ‚Üë[0, i + 1] T1 ‚â° T2 &
                                i < |L|.
#L #T2 #i * #X #H
>(tpr_inv_atom1 ‚Ä¶ H) -H #H
elim (tpss_inv_lref1 ‚Ä¶ H) -H /2 width=1/
* /3 width=6/
qed-.

(* Basic_1: was: pr2_gen_abst *)
lemma cpr_inv_abst1: ‚àÄV1,T1,U2. ùïî{Abst} V1. T1 ‚áí U2 ‚Üí
                     ‚àÉ‚àÉV2,T2. V1 ‚áí V2 & T1 ‚áí T2 & U2 = ùïî{Abst} V2. T2.
/2 width=3/ qed-.

(* Relocation properties ****************************************************)

(* Basic_1: was: pr2_lift *)
lemma cpr_lift: ‚àÄL,K,d,e. ‚Üì[d, e] L ‚â° K ‚Üí
                ‚àÄT1,U1. ‚Üë[d, e] T1 ‚â° U1 ‚Üí ‚àÄT2,U2. ‚Üë[d, e] T2 ‚â° U2 ‚Üí
                K ‚ä¢ T1 ‚áí T2 ‚Üí L ‚ä¢ U1 ‚áí U2.
#L #K #d #e #HLK #T1 #U1 #HTU1 #T2 #U2 #HTU2 * #T #HT1 #HT2
elim (lift_total T d e) #U #HTU 
lapply (tpr_lift ‚Ä¶ HT1 ‚Ä¶ HTU1 ‚Ä¶ HTU) -T1 #HU1
elim (lt_or_ge (|K|) d) #HKd
[ lapply (tpss_lift_le ‚Ä¶ HT2 ‚Ä¶ HLK HTU ‚Ä¶ HTU2) -T2 -T -HLK [ /2 width=2/ | /3 width=4/ ]
| lapply (tpss_lift_be ‚Ä¶ HT2 ‚Ä¶ HLK HTU ‚Ä¶ HTU2) -T2 -T -HLK // /3 width=4/
]
qed.

(* Basic_1: was: pr2_gen_lift *)
lemma cpr_inv_lift: ‚àÄL,K,d,e. ‚Üì[d, e] L ‚â° K ‚Üí
                    ‚àÄT1,U1. ‚Üë[d, e] T1 ‚â° U1 ‚Üí ‚àÄU2. L ‚ä¢ U1 ‚áí U2 ‚Üí
                    ‚àÉ‚àÉT2. ‚Üë[d, e] T2 ‚â° U2 & K ‚ä¢ T1 ‚áí T2.
#L #K #d #e #HLK #T1 #U1 #HTU1 #U2 * #U #HU1 #HU2
elim (tpr_inv_lift ‚Ä¶ HU1 ‚Ä¶ HTU1) -U1 #T #HTU #T1
elim (lt_or_ge (|L|) d) #HLd
[ elim (tpss_inv_lift1_le ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ?) -U -HLK [ /5 width=4/ | /2 width=2/ ]
| elim (lt_or_ge (|L|) (d + e)) #HLde
  [ elim (tpss_inv_lift1_be_up ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ? ?) -U -HLK // [ /5 width=4/ | /2 width=2/ ] 
  | elim (tpss_inv_lift1_be ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ? ?) -U -HLK // /5 width=4/
  ]
]
qed.
