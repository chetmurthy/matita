(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "Basic_2/substitution/tps_lift.ma".
include "Basic_2/unfold/tpss.ma".

(* PARTIAL UNFOLD ON TERMS **************************************************)

(* Advanced properties ******************************************************)

lemma tpss_subst: ‚àÄL,K,V,U1,i,d,e.
                  d ‚â§ i ‚Üí i < d + e ‚Üí
                  ‚Üì[0, i] L ‚â° K. ùïì{Abbr} V ‚Üí K ‚ä¢ V [0, d + e - i - 1] ‚â´* U1 ‚Üí
                  ‚àÄU2. ‚Üë[0, i + 1] U1 ‚â° U2 ‚Üí L ‚ä¢ #i [d, e] ‚â´* U2.
#L #K #V #U1 #i #d #e #Hdi #Hide #HLK #H @(tpss_ind ‚Ä¶ H) -H U1
[ /3/
| #U #U1 #_ #HU1 #IHU #U2 #HU12
  elim (lift_total U 0 (i+1)) #U0 #HU0
  lapply (IHU ‚Ä¶ HU0) -IHU #H
  lapply (drop_fwd_drop2 ‚Ä¶ HLK) -HLK #HLK
  lapply (tps_lift_ge ‚Ä¶ HU1 ‚Ä¶ HLK HU0 HU12 ?) -HU1 HLK HU0 HU12 // normalize #HU02
  lapply (tps_weak ‚Ä¶ HU02 d e ? ?) -HU02 [ >arith_i2 // | /2/ | /2/ ]
]
qed.

(* Advanced inverion lemmas *************************************************)

lemma tpss_inv_atom1: ‚àÄL,T2,I,d,e. L ‚ä¢ ùïí{I} [d, e] ‚â´* T2 ‚Üí
                      T2 = ùïí{I} ‚à®
                      ‚àÉ‚àÉK,V1,V2,i. d ‚â§ i & i < d + e &
                                   ‚Üì[O, i] L ‚â° K. ùïì{Abbr} V1 &
                                   K ‚ä¢ V1 [0, d + e - i - 1] ‚â´* V2 &
                                   ‚Üë[O, i + 1] V2 ‚â° T2 &
                                   I = LRef i.
#L #T2 #I #d #e #H @(tpss_ind ‚Ä¶ H) -H T2
[ /2/
| #T #T2 #_ #HT2 *
  [ #H destruct -T;
    elim (tps_inv_atom1 ‚Ä¶ HT2) -HT2 [ /2/ | * /3 width=10/ ]
  | * #K #V1 #V #i #Hdi #Hide #HLK #HV1 #HVT #HI
    lapply (drop_fwd_drop2 ‚Ä¶ HLK) #H
    elim (tps_inv_lift1_up ‚Ä¶ HT2 ‚Ä¶ H ‚Ä¶ HVT ? ? ?) normalize -HT2 H HVT [2,3,4: /2/ ] #V2 <minus_plus #HV2 #HVT2
    @or_intror @(ex6_4_intro ‚Ä¶ Hdi Hide HLK ‚Ä¶ HVT2 HI) /2/ (**) (* /4 width=10/ is too slow *)
  ]
]
qed.

lemma tpss_inv_lref1: ‚àÄL,T2,i,d,e. L ‚ä¢ #i [d, e] ‚â´* T2 ‚Üí
                      T2 = #i ‚à®
                      ‚àÉ‚àÉK,V1,V2. d ‚â§ i & i < d + e &
                                 ‚Üì[O, i] L ‚â° K. ùïì{Abbr} V1 &
                                 K ‚ä¢ V1 [0, d + e - i - 1] ‚â´* V2 &
                                 ‚Üë[O, i + 1] V2 ‚â° T2.
#L #T2 #i #d #e #H
elim (tpss_inv_atom1 ‚Ä¶ H) -H /2/
* #K #V1 #V2 #j #Hdj #Hjde #HLK #HV12 #HVT2 #H destruct -i /3 width=6/
qed.

lemma tpss_inv_refl_SO2: ‚àÄL,T1,T2,d. L ‚ä¢ T1 [d, 1] ‚â´* T2 ‚Üí
                         ‚àÄK,V. ‚Üì[0, d] L ‚â° K. ùïì{Abst} V ‚Üí T1 = T2.
#L #T1 #T2 #d #H #K #V #HLK @(tpss_ind ‚Ä¶ H) -H T2 //
#T #T2 #_ #HT2 #IHT <(tps_inv_refl_SO2 ‚Ä¶ HT2 ‚Ä¶ HLK) //
qed.

(* Relocation properties ****************************************************)

lemma tpss_lift_le: ‚àÄK,T1,T2,dt,et. K ‚ä¢ T1 [dt, et] ‚â´* T2 ‚Üí
                    ‚àÄL,U1,d,e. dt + et ‚â§ d ‚Üí ‚Üì[d, e] L ‚â° K ‚Üí
                    ‚Üë[d, e] T1 ‚â° U1 ‚Üí ‚àÄU2. ‚Üë[d, e] T2 ‚â° U2 ‚Üí
                    L ‚ä¢ U1 [dt, et] ‚â´* U2.
#K #T1 #T2 #dt #et #H #L #U1 #d #e #Hdetd #HLK #HTU1 @(tpss_ind ‚Ä¶ H) -H T2
[ #U2 #H >(lift_mono ‚Ä¶ HTU1 ‚Ä¶ H) -H //
| -HTU1 #T #T2 #_ #HT2 #IHT #U2 #HTU2
  elim (lift_total T d e) #U #HTU
  lapply (IHT ‚Ä¶ HTU) -IHT #HU1
  lapply (tps_lift_le ‚Ä¶ HT2 ‚Ä¶ HLK HTU HTU2 ?) -HT2 HLK HTU HTU2 /2/
]
qed.

lemma tpss_lift_ge: ‚àÄK,T1,T2,dt,et. K ‚ä¢ T1 [dt, et] ‚â´* T2 ‚Üí
                    ‚àÄL,U1,d,e. d ‚â§ dt ‚Üí ‚Üì[d, e] L ‚â° K ‚Üí
                    ‚Üë[d, e] T1 ‚â° U1 ‚Üí ‚àÄU2. ‚Üë[d, e] T2 ‚â° U2 ‚Üí
                    L ‚ä¢ U1 [dt + e, et] ‚â´* U2.
#K #T1 #T2 #dt #et #H #L #U1 #d #e #Hddt #HLK #HTU1 @(tpss_ind ‚Ä¶ H) -H T2
[ #U2 #H >(lift_mono ‚Ä¶ HTU1 ‚Ä¶ H) -H //
| -HTU1 #T #T2 #_ #HT2 #IHT #U2 #HTU2
  elim (lift_total T d e) #U #HTU
  lapply (IHT ‚Ä¶ HTU) -IHT #HU1
  lapply (tps_lift_ge ‚Ä¶ HT2 ‚Ä¶ HLK HTU HTU2 ?) -HT2 HLK HTU HTU2 /2/
]
qed.

lemma tpss_inv_lift1_le: ‚àÄL,U1,U2,dt,et. L ‚ä¢ U1 [dt, et] ‚â´* U2 ‚Üí
                         ‚àÄK,d,e. ‚Üì[d, e] L ‚â° K ‚Üí ‚àÄT1. ‚Üë[d, e] T1 ‚â° U1 ‚Üí
                         dt + et ‚â§ d ‚Üí
                         ‚àÉ‚àÉT2. K ‚ä¢ T1 [dt, et] ‚â´* T2 & ‚Üë[d, e] T2 ‚â° U2.
#L #U1 #U2 #dt #et #H #K #d #e #HLK #T1 #HTU1 #Hdetd @(tpss_ind ‚Ä¶ H) -H U2
[ /2/
| -HTU1 #U #U2 #_ #HU2 * #T #HT1 #HTU
  elim (tps_inv_lift1_le ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ?) -HU2 HLK HTU /3/
]
qed.

lemma tpss_inv_lift1_ge: ‚àÄL,U1,U2,dt,et. L ‚ä¢ U1 [dt, et] ‚â´* U2 ‚Üí
                         ‚àÄK,d,e. ‚Üì[d, e] L ‚â° K ‚Üí ‚àÄT1. ‚Üë[d, e] T1 ‚â° U1 ‚Üí
                         d + e ‚â§ dt ‚Üí
                         ‚àÉ‚àÉT2. K ‚ä¢ T1 [dt - e, et] ‚â´* T2 & ‚Üë[d, e] T2 ‚â° U2.
#L #U1 #U2 #dt #et #H #K #d #e #HLK #T1 #HTU1 #Hdedt @(tpss_ind ‚Ä¶ H) -H U2
[ /2/
| -HTU1 #U #U2 #_ #HU2 * #T #HT1 #HTU
  elim (tps_inv_lift1_ge ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ?) -HU2 HLK HTU /3/
]
qed.

lemma tpss_inv_lift1_eq: ‚àÄL,U1,U2,d,e.
                         L ‚ä¢ U1 [d, e] ‚â´* U2 ‚Üí ‚àÄT1. ‚Üë[d, e] T1 ‚â° U1 ‚Üí U1 = U2.
#L #U1 #U2 #d #e #H #T1 #HTU1 @(tpss_ind ‚Ä¶ H) -H U2 //
#U #U2 #_ #HU2 #IHU destruct -U1
<(tps_inv_lift1_eq ‚Ä¶ HU2 ‚Ä¶ HTU1) -HU2 HTU1 //
qed.
