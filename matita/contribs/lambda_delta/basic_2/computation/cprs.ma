(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/reducibility/cnf.ma".

(* CONTEXT-SENSITIVE PARALLEL COMPUTATION ON TERMS **************************)

(* Basic_1: includes: pr3_pr2 *)
definition cprs: lenv ‚Üí relation term ‚âù
                 ŒªL. TC ‚Ä¶ (cpr L).

interpretation "context-sensitive parallel computation (term)"
   'PRedStar L T1 T2 = (cprs L T1 T2).

(* Basic eliminators ********************************************************)

lemma cprs_ind: ‚àÄL,T1. ‚àÄR:predicate term. R T1 ‚Üí
                (‚àÄT,T2. L ‚ä¢ T1 ‚û°* T ‚Üí L ‚ä¢ T ‚û° T2 ‚Üí R T ‚Üí R T2) ‚Üí
                ‚àÄT2. L ‚ä¢ T1 ‚û°* T2 ‚Üí R T2.
#L #T1 #R #HT1 #IHT1 #T2 #HT12 @(TC_star_ind ‚Ä¶ HT1 IHT1 ‚Ä¶ HT12) //
qed-.

axiom cprs_ind_dx: ‚àÄL,T2. ‚àÄR:predicate term. R T2 ‚Üí
                   (‚àÄT1,T. L ‚ä¢ T1 ‚û° T ‚Üí L ‚ä¢ T ‚û°* T2 ‚Üí R T ‚Üí R T1) ‚Üí
                   ‚àÄT1. L ‚ä¢ T1 ‚û°* T2 ‚Üí R T1.

(* Basic properties *********************************************************)

(* Basic_1: was: pr3_refl *)
lemma cprs_refl: ‚àÄL,T. L ‚ä¢ T ‚û°* T.
/2 width=1/ qed.

lemma cprs_strap1: ‚àÄL,T1,T,T2.
                   L ‚ä¢ T1 ‚û°* T ‚Üí L ‚ä¢ T ‚û° T2 ‚Üí L ‚ä¢ T1 ‚û°* T2.
/2 width=3/ qed.

(* Basic_1: was: pr3_step *)
lemma cprs_strap2: ‚àÄL,T1,T,T2.
                   L ‚ä¢ T1 ‚û° T ‚Üí L ‚ä¢ T ‚û°* T2 ‚Üí L ‚ä¢ T1 ‚û°* T2.
/2 width=3/ qed.

(* Note: it does not hold replacing |L1| with |L2| *)
lemma cprs_lsubs_conf: ‚àÄL1,T1,T2. L1 ‚ä¢ T1 ‚û°* T2 ‚Üí
                       ‚àÄL2. L1 [0, |L1|] ‚âº L2 ‚Üí L2 ‚ä¢ T1 ‚û°* T2.
/3 width=3/
qed.

lemma cprs_flat_dx: ‚àÄI,L,V1,V2. L ‚ä¢ V1 ‚û° V2 ‚Üí ‚àÄT1,T2. L ‚ä¢ T1 ‚û°* T2 ‚Üí
                    L ‚ä¢ ‚ìï{I} V1. T1 ‚û°* ‚ìï{I} V2. T2.
#I #L #V1 #V2 #HV12 #T1 #T2 #HT12 @(cprs_ind ‚Ä¶ HT12) -T2 /3 width=1/
#T #T2 #_ #HT2 #IHT2
@(cprs_strap1 ‚Ä¶ IHT2) -IHT2 /2 width=1/
qed.

(* Basic inversion lemmas ***************************************************)

(* Basic_1: was: pr3_gen_sort *)
lemma cprs_inv_sort1: ‚àÄL,U2,k. L ‚ä¢ ‚ãÜk ‚û°* U2 ‚Üí U2 = ‚ãÜk.
#L #U2 #k #H @(cprs_ind ‚Ä¶ H) -U2 //
#U2 #U #_ #HU2 #IHU2 destruct
>(cpr_inv_sort1 ‚Ä¶ HU2) -HU2 //
qed-.

(* Basic_1: was: pr3_gen_cast *)
lemma cprs_inv_cast1: ‚àÄL,W1,T1,U2. L ‚ä¢ ‚ì£W1.T1 ‚û°* U2 ‚Üí L ‚ä¢ T1 ‚û°* U2 ‚à®
                      ‚àÉ‚àÉW2,T2. L ‚ä¢ W1 ‚û°* W2 & L ‚ä¢ T1 ‚û°* T2 & U2 = ‚ì£W2.T2.
#L #W1 #T1 #U2 #H @(cprs_ind ‚Ä¶ H) -U2 /3 width=5/
#U2 #U #_ #HU2 * /3 width=3/ *
#W #T #HW1 #HT1 #H destruct
elim (cpr_inv_cast1 ‚Ä¶ HU2) -HU2 /3 width=3/ *
#W2 #T2 #HW2 #HT2 #H destruct /4 width=5/
qed-.

lemma cprs_inv_cnf1: ‚àÄL,T,U. L ‚ä¢ T ‚û°* U ‚Üí L ‚ä¢ ùêç[T] ‚Üí T = U.
#L #T #U #H @(cprs_ind_dx ‚Ä¶ H) -T //
#T0 #T #H1T0 #_ #IHT #H2T0
lapply (H2T0 ‚Ä¶ H1T0) -H1T0 #H destruct /2 width=1/
qed-.

(* Basic_1: removed theorems 6:
   clear_pr3_trans pr3_cflat pr3_gen_bind
   pr3_iso_appl_bind pr3_iso_appls_appl_bind pr3_iso_appls_bind
*)
