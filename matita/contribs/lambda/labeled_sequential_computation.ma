(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "pointer_list.ma".
include "parallel_computation.ma".

(* LABELED SEQUENTIAL COMPUTATION (MULTISTEP) *******************************)

definition lsreds: ptrl ‚Üí relation term ‚âù lstar ‚Ä¶ lsred.

interpretation "labelled sequential computation"
   'SeqRedStar M s N = (lsreds s M N).

notation "hvbox( M break ‚Ü¶* [ term 46 s ] break term 46 N )"
   non associative with precedence 45
   for @{ 'SeqRedStar $M $s $N }.

lemma lsreds_refl: reflexive ‚Ä¶ (lsreds (‚óä)).
//
qed.

lemma lsreds_step_sn: ‚àÄp,M1,M. M1 ‚Ü¶[p] M ‚Üí ‚àÄs,M2. M ‚Ü¶*[s] M2 ‚Üí M1 ‚Ü¶*[p::s] M2.
/2 width=3/
qed-.

lemma lsreds_step_dx: ‚àÄs,M1,M. M1 ‚Ü¶*[s] M ‚Üí ‚àÄp,M2. M ‚Ü¶[p] M2 ‚Üí M1 ‚Ü¶*[s@p::‚óä] M2.
/2 width=3/
qed-.

lemma lsreds_step_rc: ‚àÄp,M1,M2. M1 ‚Ü¶[p] M2 ‚Üí M1 ‚Ü¶*[p::‚óä] M2.
/2 width=1/
qed.

lemma lsreds_inv_nil: ‚àÄs,M1,M2. M1 ‚Ü¶*[s] M2 ‚Üí ‚óä = s ‚Üí M1 = M2.
/2 width=5 by lstar_inv_nil/
qed-.

lemma lsreds_inv_cons: ‚àÄs,M1,M2. M1 ‚Ü¶*[s] M2 ‚Üí ‚àÄq,r. q::r = s ‚Üí
                       ‚àÉ‚àÉM. M1 ‚Ü¶[q] M & M ‚Ü¶*[r] M2.
/2 width=3 by lstar_inv_cons/
qed-.

lemma lsreds_inv_step_rc: ‚àÄp,M1,M2. M1 ‚Ü¶*[p::‚óä] M2 ‚Üí M1 ‚Ü¶[p] M2.
/2 width=1 by lstar_inv_step/
qed-.

lemma lsreds_inv_pos: ‚àÄs,M1,M2. M1 ‚Ü¶*[s] M2 ‚Üí 0 < |s| ‚Üí
                      ‚àÉ‚àÉp,r,M. p::r = s & M1 ‚Ü¶[p] M & M ‚Ü¶*[r] M2.
/2 width=1 by lstar_inv_pos/
qed-.

lemma lsred_compatible_rc: ho_compatible_rc lsreds.
/3 width=1/
qed.

lemma lsreds_compatible_sn: ho_compatible_sn lsreds.
/3 width=1/
qed.

lemma lsreds_compatible_dx: ho_compatible_dx lsreds.
/3 width=1/
qed.

lemma lsreds_lift: ‚àÄs. liftable (lsreds s).
/2 width=1/
qed.

lemma lsreds_inv_lift: ‚àÄs. deliftable_sn (lsreds s).
/3 width=3 by lstar_deliftable_sn, lsred_inv_lift/
qed-.

lemma lsreds_dsubst: ‚àÄs. dsubstable_dx (lsreds s).
/2 width=1/
qed.

theorem lsreds_mono: ‚àÄs. singlevalued ‚Ä¶ (lsreds s).
/3 width=7 by lstar_singlevalued, lsred_mono/
qed-.

theorem lsreds_trans: ltransitive ‚Ä¶ lsreds.
/2 width=3 by lstar_ltransitive/
qed-.

lemma lsreds_compatible_appl: ‚àÄr,B1,B2. B1 ‚Ü¶*[r] B2 ‚Üí ‚àÄs,A1,A2. A1 ‚Ü¶*[s] A2 ‚Üí
                              @B1.A1 ‚Ü¶*[(sn:::r)@dx:::s] @B2.A2.
#r #B1 #B2 #HB12 #s #A1 #A2 #HA12
@(lsreds_trans ‚Ä¶ (@B2.A1)) /2 width=1/
qed.

lemma lsreds_compatible_beta: ‚àÄr,B1,B2. B1 ‚Ü¶*[r] B2 ‚Üí ‚àÄs,A1,A2. A1 ‚Ü¶*[s] A2 ‚Üí
                              @B1.ùõå.A1 ‚Ü¶*[(sn:::r)@(dx:::rc:::s)@‚óä::‚óä] [‚ÜôB2] A2.
#r #B1 #B2 #HB12 #s #A1 #A2 #HA12
@(lsreds_trans ‚Ä¶ (@B2.ùõå.A1)) /2 width=1/ -r -B1
@(lsreds_step_dx ‚Ä¶ (@B2.ùõå.A2)) // /3 width=1/
qed.

(* Note: "|s|" should be unparetesized *)
lemma lsreds_fwd_mult: ‚àÄs,M1,M2. M1 ‚Ü¶*[s] M2 ‚Üí #{M2} ‚â§ #{M1} ^ (2 ^ (|s|)).
#s #M1 #M2 #H @(lstar_ind_l ????????? H) -s -M1 normalize //
#p #s #M1 #M #HM1 #_ #IHM2
lapply (lsred_fwd_mult ‚Ä¶ HM1) -p #HM1
@(transitive_le ‚Ä¶ IHM2) -M2
/3 width=1 by le_exp1, lt_O_exp, lt_to_le/ (**) (* auto: slow without trace *)
qed-.

theorem lsreds_preds: ‚àÄs,M1,M2. M1 ‚Ü¶*[s] M2 ‚Üí M1 ‚§á* M2.
#s #M1 #M2 #H @(lstar_ind_l ????????? H) -s -M1 //
#a #s #M1 #M #HM1 #_ #IHM2
@(preds_step_sn ‚Ä¶ IHM2) -M2 /2 width=2/
qed.

lemma pred_lsreds: ‚àÄM1,M2. M1 ‚§á M2 ‚Üí ‚àÉr. M1 ‚Ü¶*[r] M2.
#M1 #M2 #H elim H -M1 -M2 /2 width=2/
[ #A1 #A2 #_ * /3 width=2/
| #B1 #B2 #A1 #A2 #_ #_ * #r #HB12 * /3 width=2/
| #B1 #B2 #A1 #A2 #_ #_ * #r #HB12 * /3 width=2/
qed-.

theorem preds_lsreds: ‚àÄM1,M2. M1 ‚§á* M2 ‚Üí ‚àÉr. M1 ‚Ü¶*[r] M2.
#M1 #M2 #H elim H -M2 /2 width=2/
#M #M2 #_ #HM2 * #r #HM1
elim (pred_lsreds ‚Ä¶ HM2) -HM2 #s #HM2
lapply (lsreds_trans ‚Ä¶ HM1 ‚Ä¶ HM2) -M /2 width=2/
qed-.

theorem lsreds_conf: ‚àÄs1,M0,M1. M0 ‚Ü¶*[s1] M1 ‚Üí ‚àÄs2,M2. M0 ‚Ü¶*[s2] M2 ‚Üí
                     ‚àÉ‚àÉr1,r2,M. M1 ‚Ü¶*[r1] M & M2 ‚Ü¶*[r2] M.
#s1 #M0 #M1 #HM01 #s2 #M2 #HM02
lapply (lsreds_preds ‚Ä¶ HM01) -s1 #HM01
lapply (lsreds_preds ‚Ä¶ HM02) -s2 #HM02
elim (preds_conf ‚Ä¶ HM01 ‚Ä¶ HM02) -M0 #M #HM1 #HM2
elim (preds_lsreds ‚Ä¶ HM1) -HM1
elim (preds_lsreds ‚Ä¶ HM2) -HM2 /2 width=5/
qed-.
