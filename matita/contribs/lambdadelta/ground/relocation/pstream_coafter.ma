(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/functions/cocompose_2.ma".
include "ground/relocation/rtmap_coafter.ma".

(* RELOCATION N-STREAM ******************************************************)

rec definition fun0 (p1:pnat) on p1: rtmap ‚Üí pnat.
* * [ | #p2 #f2 @(ùüè) ]
#f2 cases p1 -p1 [ @(ùüè) ]
#p1 @(‚Üë(fun0 p1 f2))
defined.

rec definition fun2 (p1:pnat) on p1: rtmap ‚Üí rtmap.
* * [ | #p2 #f2 @(p2‚®Æf2) ]
#f2 cases p1 -p1 [ @f2 ]
#p1 @(fun2 p1 f2)
defined.

rec definition fun1 (p1:pnat) (f1:rtmap) on p1: rtmap ‚Üí rtmap.
* * [ | #p2 #f2 @(p1‚®Æf1) ]
#f2 cases p1 -p1 [ @f1 ]
#p1 @(fun1 p1 f1 f2)
defined.

corec definition cocompose: rtmap ‚Üí rtmap ‚Üí rtmap.
#f2 * #p1 #f1
@(stream_cons ‚Ä¶ (fun0 p1 f2)) @(cocompose (fun2 p1 f2) (fun1 p1 f1 f2))
defined.

interpretation "functional co-composition (nstream)"
   'CoCompose f1 f2 = (cocompose f1 f2).

(* Basic properties on funs *************************************************)

(* Note: we need theese since matita blocks recursive Œ¥ when Œπ is blocked *)
lemma fun0_xn: ‚àÄf2,p1. ùüè = fun0 p1 (‚Üëf2).
* #p2 #f2 * //
qed.

lemma fun2_xn: ‚àÄf2,p1. f2 = fun2 p1 (‚Üëf2).
* #p2 #f2 * //
qed.

lemma fun1_xxn: ‚àÄf2,f1,p1. fun1 p1 f1 (‚Üëf2) = p1‚®Æf1.
* #p2 #f2 #f1 * //
qed.

(* Basic properies on cocompose *********************************************)

lemma cocompose_rew: ‚àÄf2,f1,p1. (fun0 p1 f2)‚®Æ(fun2 p1 f2)~‚àò(fun1 p1 f1 f2) = f2 ~‚àò (p1‚®Æf1).
#f2 #f1 #p1 <(stream_rew ‚Ä¶ (f2~‚àò(p1‚®Æf1))) normalize //
qed.

(* Basic inversion lemmas on compose ****************************************)

lemma cocompose_inv_ppx: ‚àÄf2,f1,f,x. (‚´Øf2) ~‚àò (‚´Øf1) = x‚®Æf ‚Üí
                         ‚àß‚àß ùüè = x & f2 ~‚àò f1 = f.
#f2 #f1 #f #x
<cocompose_rew #H destruct
normalize /2 width=1 by conj/
qed-.

lemma cocompose_inv_pnx: ‚àÄf2,f1,f,p1,x. (‚´Øf2) ~‚àò (‚Üëp1‚®Æf1) = x‚®Æf ‚Üí
                         ‚àÉ‚àÉp. ‚Üëp = x & f2 ~‚àò (p1‚®Æf1) = p‚®Æf.
#f2 #f1 #f #p1 #x
<cocompose_rew #H destruct
@(ex2_intro ‚Ä¶ (fun0 p1 f2)) // <cocompose_rew
/3 width=1 by eq_f2/
qed-.

lemma cocompose_inv_nxx: ‚àÄf2,f1,f,p1,x. (‚Üëf2) ~‚àò (p1‚®Æf1) = x‚®Æf ‚Üí
                         ‚àß‚àß ùüè = x & f2 ~‚àò (p1‚®Æf1) = f.
#f2 #f1 #f #p1 #x
<cocompose_rew #H destruct
/2 width=1 by conj/
qed-.

(* Specific properties on coafter *******************************************)

corec lemma coafter_total_aux: ‚àÄf2,f1,f. f2 ~‚àò f1 = f ‚Üí f2 ~‚äö f1 ‚âò f.
* #p2 #f2 * #p1 #f1 * #p #f cases p2 -p2
[ cases p1 -p1
  [ #H cases (cocompose_inv_ppx ‚Ä¶ H) -H /3 width=7 by coafter_refl, eq_f2/
  | #p1 #H cases (cocompose_inv_pnx ‚Ä¶ H) -H /3 width=7 by coafter_push/
  ]
| #p2 >next_rew #H cases (cocompose_inv_nxx ‚Ä¶ H) -H /3 width=5 by coafter_next/
]
qed-.

theorem coafter_total: ‚àÄf2,f1. f2 ~‚äö f1 ‚âò f2 ~‚àò f1.
/2 width=1 by coafter_total_aux/ qed.
