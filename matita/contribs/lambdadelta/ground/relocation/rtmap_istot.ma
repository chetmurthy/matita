(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/relations/istotal_1.ma".
include "ground/relocation/rtmap_at.ma".

(* RELOCATION MAP ***********************************************************)

definition istot: predicate rtmap ‚âù Œªf. ‚àÄi. ‚àÉj. @‚ù™i,f‚ù´ ‚âò j.

interpretation "test for totality (rtmap)"
   'IsTotal f = (istot f).

(* Basic inversion lemmas ***************************************************)

lemma istot_inv_push: ‚àÄg. ùêì‚ù™g‚ù´ ‚Üí ‚àÄf. ‚´Øf = g ‚Üí ùêì‚ù™f‚ù´.
#g #Hg #f #H #i elim (Hg (‚Üëi)) -Hg
#j #Hg elim (at_inv_npx ‚Ä¶ Hg ‚Ä¶ H) -Hg -H /2 width=3 by ex_intro/
qed-.

lemma istot_inv_next: ‚àÄg. ùêì‚ù™g‚ù´ ‚Üí ‚àÄf. ‚Üëf = g ‚Üí ùêì‚ù™f‚ù´.
#g #Hg #f #H #i elim (Hg i) -Hg
#j #Hg elim (at_inv_xnx ‚Ä¶ Hg ‚Ä¶ H) -Hg -H /2 width=2 by ex_intro/
qed-.

(* Properties on tl *********************************************************)

lemma istot_tl: ‚àÄf. ùêì‚ù™f‚ù´ ‚Üí ùêì‚ù™‚´±f‚ù´.
#f cases (pn_split f) *
#g * -f /2 width=3 by istot_inv_next, istot_inv_push/
qed.

(* Properties on tls ********************************************************)

lemma istot_tls: ‚àÄn,f. ùêì‚ù™f‚ù´ ‚Üí ùêì‚ù™‚´±*[n]f‚ù´.
#n elim n -n /3 width=1 by istot_tl/
qed.

(* Main forward lemmas on at ************************************************)

corec theorem at_ext: ‚àÄf1,f2. ùêì‚ù™f1‚ù´ ‚Üí ùêì‚ù™f2‚ù´ ‚Üí
                      (‚àÄi,i1,i2. @‚ù™i,f1‚ù´ ‚âò i1 ‚Üí @‚ù™i,f2‚ù´ ‚âò i2 ‚Üí i1 = i2) ‚Üí
                      f1 ‚â° f2.
#f1 cases (pn_split f1) * #g1 #H1
#f2 cases (pn_split f2) * #g2 #H2
#Hf1 #Hf2 #Hi
[ @(eq_push ‚Ä¶ H1 H2) @at_ext -at_ext /2 width=3 by istot_inv_push/ -Hf1 -Hf2
  #i #i1 #i2 #Hg1 #Hg2 lapply (Hi (‚Üëi) (‚Üëi1) (‚Üëi2) ??) /2 width=7 by at_push/
| cases (Hf2 0) -Hf1 -Hf2 -at_ext
  #j2 #Hf2 cases (at_increasing_strict ‚Ä¶ Hf2 ‚Ä¶ H2) -H2
  lapply (Hi 0 0 j2 ‚Ä¶ Hf2) /2 width=2 by at_refl/ -Hi -Hf2 -H1
  #H2 #H cases (lt_le_false ‚Ä¶ H) -H //
| cases (Hf1 0) -Hf1 -Hf2 -at_ext
  #j1 #Hf1 cases (at_increasing_strict ‚Ä¶ Hf1 ‚Ä¶ H1) -H1
  lapply (Hi 0 j1 0 Hf1 ?) /2 width=2 by at_refl/ -Hi -Hf1 -H2
  #H1 #H cases (lt_le_false ‚Ä¶ H) -H //
| @(eq_next ‚Ä¶ H1 H2) @at_ext -at_ext /2 width=3 by istot_inv_next/ -Hf1 -Hf2
  #i #i1 #i2 #Hg1 #Hg2 lapply (Hi i (‚Üëi1) (‚Üëi2) ??) /2 width=5 by at_next/
]
qed-.

(* Advanced properties on at ************************************************)

lemma at_dec: ‚àÄf,i1,i2. ùêì‚ù™f‚ù´ ‚Üí Decidable (@‚ù™i1,f‚ù´ ‚âò i2).
#f #i1 #i2 #Hf lapply (Hf i1) -Hf *
#j2 #Hf elim (eq_nat_dec i2 j2)
[ #H destruct /2 width=1 by or_introl/
| /4 width=6 by at_mono, or_intror/
]
qed-.

lemma is_at_dec_le: ‚àÄf,i2,i. ùêì‚ù™f‚ù´ ‚Üí (‚àÄi1. i1 + i ‚â§ i2 ‚Üí @‚ù™i1,f‚ù´ ‚âò i2 ‚Üí ‚ä•) ‚Üí
                    Decidable (‚àÉi1. @‚ù™i1,f‚ù´ ‚âò i2).
#f #i2 #i #Hf elim i -i
[ #Ht @or_intror * /3 width=3 by at_increasing/
| #i #IH #Ht elim (at_dec f (i2-i) i2) /3 width=2 by ex_intro, or_introl/
  #Hi2 @IH -IH #i1 #H #Hi elim (le_to_or_lt_eq ‚Ä¶ H) -H /2 width=3 by/
  #H destruct -Ht /2 width=1 by/
]
qed-.

lemma is_at_dec: ‚àÄf,i2. ùêì‚ù™f‚ù´ ‚Üí Decidable (‚àÉi1. @‚ù™i1,f‚ù´ ‚âò i2).
#f #i2 #Hf @(is_at_dec_le ?? (‚Üëi2)) /2 width=4 by lt_le_false/
qed-.

(* Advanced properties on isid **********************************************)

lemma isid_at_total: ‚àÄf. ùêì‚ù™f‚ù´ ‚Üí (‚àÄi1,i2. @‚ù™i1,f‚ù´ ‚âò i2 ‚Üí i1 = i2) ‚Üí ùêà‚ù™f‚ù´.
#f #H1f #H2f @isid_at
#i lapply (H1f i) -H1f *
#j #Hf >(H2f ‚Ä¶ Hf) in ‚ä¢ (???%); -H2f //
qed.
