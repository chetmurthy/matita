(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/functions/uparrowstar_2.ma".
include "ground/arith/nat_succ_iter.ma".
include "ground/relocation/rtmap_eq.ma".

(* RELOCATION MAP ***********************************************************)

definition nexts (f:rtmap) (n:nat) ‚âù next^n f.

interpretation "nexts (rtmap)" 'UpArrowStar n f = (nexts f n).

(* Basic properties *********************************************************)

lemma nexts_O: ‚àÄf. f = ‚Üë*[ùüé] f.
// qed.

lemma nexts_S: ‚àÄf,n. ‚Üë‚Üë*[n] f = ‚Üë*[‚Üën] f.
#f #n @(niter_succ ‚Ä¶ next)
qed.

lemma nexts_eq_repl: ‚àÄn. eq_repl (Œªf1,f2. ‚Üë*[n] f1 ‚â° ‚Üë*[n] f2).
#n @(nat_ind_succ ‚Ä¶ n) -n /3 width=5 by eq_next/
qed.

(* Advanced properties ******************************************************)

lemma nexts_swap: ‚àÄf,n. ‚Üë‚Üë*[n] f = ‚Üë*[n] ‚Üëf.
#f #n @(niter_appl ‚Ä¶ next)
qed.

lemma nexts_xn: ‚àÄn,f. ‚Üë*[n] ‚Üëf = ‚Üë*[‚Üën] f.
// qed.

(* Basic_inversion lemmas *****************************************************)

lemma eq_inv_nexts_sn: ‚àÄn,f1,g2. ‚Üë*[n] f1 ‚â° g2 ‚Üí
                       ‚àÉ‚àÉf2. f1 ‚â° f2 & ‚Üë*[n] f2 = g2.
#n @(nat_ind_succ ‚Ä¶ n) -n /2 width=3 by ex2_intro/
#n #IH #f1 #g2 #H elim (eq_inv_nx ‚Ä¶ H) -H [|*: // ]
#f0 #Hf10 #H1 elim (IH ‚Ä¶ Hf10) -IH -Hf10 #f2 #Hf12 #H2 destruct
/2 width=3 by ex2_intro/
qed-.

lemma eq_inv_nexts_dx: ‚àÄn,f2,g1. g1 ‚â° ‚Üë*[n] f2 ‚Üí
                       ‚àÉ‚àÉf1. f1 ‚â° f2 & ‚Üë*[n] f1 = g1.
#n @(nat_ind_succ ‚Ä¶ n) -n /2 width=3 by ex2_intro/
#n #IH #f2 #g1 #H elim (eq_inv_xn ‚Ä¶ H) -H [|*: // ]
#f0 #Hf02 #H1 elim (IH ‚Ä¶ Hf02) -IH -Hf02 #f1 #Hf12 #H2 destruct
/2 width=3 by ex2_intro/
qed-.
