(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/notation/functions/upspoon_1.ma".
include "ground/lib/stream.ma".
include "ground/arith/pnat.ma".

(* RELOCATION P-STREAM ******************************************************)

definition gr_push: gr_map ‚Üí gr_map ‚âù Œªf. ùüè‚®Æf.

interpretation "push (pstream)" 'UpSpoon f = (gr_push f).

definition gr_next: gr_map ‚Üí gr_map.
* #p #f @(‚Üëp‚®Æf)
defined.

interpretation "next (pstream)" 'UpArrow f = (gr_next f).

(* Basic properties *********************************************************)

lemma gr_push_unfold: ‚àÄf. ùüè‚®Æf = ‚´Øf.
// qed.

lemma gr_next_unfold: ‚àÄf,p. (‚Üëp)‚®Æf = ‚Üë(p‚®Æf).
// qed.

(* Basic inversion lemmas ***************************************************)

lemma eq_inv_gr_push_bi: injective ? ? gr_push.
#f1 #f2 <gr_push_unfold <gr_push_unfold #H destruct //
qed-.

lemma eq_inv_gr_push_next: ‚àÄf1,f2. ‚´Øf1 = ‚Üëf2 ‚Üí ‚ä•.
#f1 * #p2 #f2 <gr_push_unfold <gr_next_unfold #H destruct
qed-.

lemma eq_inv_gr_next_push: ‚àÄf1,f2. ‚Üëf1 = ‚´Øf2 ‚Üí ‚ä•.
* #p1 #f1 #f2 <gr_next_unfold <gr_push_unfold #H destruct
qed-.

lemma eq_inv_gr_next_bi: injective ? ? gr_next.
* #p1 #f1 * #p2 #f2 <gr_next_unfold <gr_next_unfold #H destruct //
qed-.

lemma case_prop (Q:predicate gr_map):
      (‚àÄf. Q (‚´Øf)) ‚Üí (‚àÄf. Q (‚Üëf)) ‚Üí ‚àÄf. Q f.
#Q #H1 #H2 * * //
qed-.

lemma case_type0 (Q:gr_map‚ÜíType[0]):
      (‚àÄf. Q (‚´Øf)) ‚Üí (‚àÄf. Q (‚Üëf)) ‚Üí ‚àÄf. Q f.
#Q #H1 #H2 * * //
qed-.

lemma iota_push: ‚àÄQ,a,b,f. a f = case_type0 Q a b (‚´Øf).
// qed.

lemma iota_next: ‚àÄQ,a,b,f. b f = case_type0 Q a b (‚Üëf).
#Q #a #b * //
qed.
