(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/rt_computation/fpbg_fpbs.ma".
include "basic_2/rt_computation/fsb_feqx.ma".

(* STRONGLY NORMALIZING CLOSURES FOR PARALLEL RST-TRANSITION ****************)

(* Properties with parallel rst-computation for closures ********************)

lemma fsb_fpbs_trans: ‚àÄh,G1,L1,T1. ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ ‚Üí
                      ‚àÄG2,L2,T2. ‚¶ÉG1,L1,T1‚¶Ñ ‚â•[h] ‚¶ÉG2,L2,T2‚¶Ñ ‚Üí ‚â•[h] ùêí‚¶ÉG2,L2,T2‚¶Ñ.
#h #G1 #L1 #T1 #H @(fsb_ind_alt ‚Ä¶ H) -G1 -L1 -T1
#G1 #L1 #T1 #H1 #IH #G2 #L2 #T2 #H12
elim (fpbs_inv_fpbg ‚Ä¶ H12) -H12
[ -IH /2 width=5 by fsb_feqx_trans/
| -H1 * /2 width=5 by/
]
qed-.

(* Properties with proper parallel rst-computation for closures *************)

lemma fsb_intro_fpbg: ‚àÄh,G1,L1,T1. (
                         ‚àÄG2,L2,T2. ‚¶ÉG1,L1,T1‚¶Ñ >[h] ‚¶ÉG2,L2,T2‚¶Ñ ‚Üí ‚â•[h] ùêí‚¶ÉG2,L2,T2‚¶Ñ
                      ) ‚Üí ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ.
/4 width=1 by fsb_intro, fpb_fpbg/ qed.

(* Eliminators with proper parallel rst-computation for closures ************)

lemma fsb_ind_fpbg_fpbs: ‚àÄh. ‚àÄQ:relation3 genv lenv term.
                         (‚àÄG1,L1,T1. ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ ‚Üí
                                     (‚àÄG2,L2,T2. ‚¶ÉG1,L1,T1‚¶Ñ >[h] ‚¶ÉG2,L2,T2‚¶Ñ ‚Üí Q G2 L2 T2) ‚Üí
                                     Q G1 L1 T1
                         ) ‚Üí
                         ‚àÄG1,L1,T1. ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ ‚Üí 
                         ‚àÄG2,L2,T2. ‚¶ÉG1,L1,T1‚¶Ñ ‚â•[h] ‚¶ÉG2,L2,T2‚¶Ñ ‚Üí Q G2 L2 T2.
#h #Q #IH1 #G1 #L1 #T1 #H @(fsb_ind_alt ‚Ä¶ H) -G1 -L1 -T1
#G1 #L1 #T1 #H1 #IH #G2 #L2 #T2 #H12
@IH1 -IH1
[ -IH /2 width=5 by fsb_fpbs_trans/
| -H1 #G0 #L0 #T0 #H10
  elim (fpbs_fpbg_trans ‚Ä¶ H12 ‚Ä¶ H10) -G2 -L2 -T2
  /2 width=5 by/
]
qed-.

lemma fsb_ind_fpbg: ‚àÄh. ‚àÄQ:relation3 genv lenv term.
                    (‚àÄG1,L1,T1. ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ ‚Üí
                                (‚àÄG2,L2,T2. ‚¶ÉG1,L1,T1‚¶Ñ >[h] ‚¶ÉG2,L2,T2‚¶Ñ ‚Üí Q G2 L2 T2) ‚Üí
                                Q G1 L1 T1
                    ) ‚Üí
                    ‚àÄG1,L1,T1. ‚â•[h] ùêí‚¶ÉG1,L1,T1‚¶Ñ ‚Üí  Q G1 L1 T1.
#h #Q #IH #G1 #L1 #T1 #H @(fsb_ind_fpbg_fpbs ‚Ä¶ H) -H
/3 width=1 by/
qed-.

(* Inversion lemmas with proper parallel rst-computation for closures *******)

lemma fsb_fpbg_refl_false (h) (G) (L) (T):
                          ‚â•[h] ùêí‚¶ÉG,L,T‚¶Ñ ‚Üí ‚¶ÉG,L,T‚¶Ñ >[h] ‚¶ÉG,L,T‚¶Ñ ‚Üí ‚ä•.
#h #G #L #T #H
@(fsb_ind_fpbg ‚Ä¶ H) -G -L -T #G1 #L1 #T1 #_ #IH #H
/2 width=5 by/
qed-.
