(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/rt_transition/cpx_drops.ma".
include "basic_2/rt_computation/cpxs.ma".

(* UNCOUNTED CONTEXT-SENSITIVE PARALLEL RT-COMPUTATION FOR TERMS ************)

(* Advanced properties ******************************************************)

lemma cpxs_delta: ‚àÄh,I,G,K,V1,V2. ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] V2 ‚Üí
                  ‚àÄW2. ‚¨Ü*[1] V2 ‚â° W2 ‚Üí ‚¶ÉG, K.‚ìë{I}V1‚¶Ñ ‚ä¢ #0 ‚¨à*[h] W2.
#h #I #G #K #V1 #V2 #H @(cpxs_ind ‚Ä¶ H) -V2
[ /3 width=3 by cpx_cpxs, cpx_delta/
| #V #V2 #_ #HV2 #IH #W2 #HVW2
  elim (lifts_total V (ùêî‚ù¥1‚ùµ)) #W #HVW
  elim (cpx_lifts ‚Ä¶ HV2 (‚ìâ) ‚Ä¶ (K.‚ìë{I}V1) ‚Ä¶ HVW) -HV2
  [ #V0 #HV20 <(lifts_mono ‚Ä¶ HVW2 ‚Ä¶ HV20) -V2 -V0 /3 width=3 by cpxs_strap1/
  | /3 width=1 by drops_refl, drops_drop/
  ]
]
qed.

lemma cpxs_lref: ‚àÄh,I,G,K,V,T,i. ‚¶ÉG, K‚¶Ñ ‚ä¢ #i ‚¨à*[h] T ‚Üí
                 ‚àÄU. ‚¨Ü*[1] T ‚â° U ‚Üí ‚¶ÉG, K.‚ìë{I}V‚¶Ñ ‚ä¢ #‚´Øi ‚¨à*[h] U.
#h #I #G #K #V #T #i #H @(cpxs_ind ‚Ä¶ H) -T
[ /3 width=3 by cpx_cpxs, cpx_lref/
| #T0 #T #_ #HT2 #IH #U #HTU
  elim (lifts_total T0 (ùêî‚ù¥1‚ùµ)) #U0 #HTU0
  elim (cpx_lifts ‚Ä¶ HT2 (‚ìâ) ‚Ä¶ (K.‚ìë{I}V) ‚Ä¶ HTU0) -HT2
  [ #X #HTX <(lifts_mono ‚Ä¶ HTU ‚Ä¶ HTX) -T -X /3 width=3 by cpxs_strap1/
  | /3 width=1 by drops_refl, drops_drop/
  ]
]
qed.

(* Basic_2A1: was: cpxs_delta *)
lemma cpxs_delta_drops: ‚àÄh,I,G,L,K,V1,V2,i.
                        ‚¨á*[i] L ‚â° K.‚ìë{I}V1 ‚Üí ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] V2 ‚Üí
                        ‚àÄW2. ‚¨Ü*[‚´Øi] V2 ‚â° W2 ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ #i ‚¨à*[h] W2.
#h #I #G #L #K #V1 #V2 #i #HLK #H @(cpxs_ind ‚Ä¶ H) -V2
[ /3 width=7 by cpx_cpxs, cpx_delta_drops/
| #V #V2 #_ #HV2 #IH #W2 #HVW2
  elim (lifts_total V (ùêî‚ù¥‚´Øi‚ùµ)) #W #HVW
  elim (cpx_lifts ‚Ä¶ HV2 (‚ìâ) ‚Ä¶ L ‚Ä¶ HVW) -HV2
  [ #V0 #HV20 <(lifts_mono ‚Ä¶ HVW2 ‚Ä¶ HV20) -V2 -V0 /3 width=3 by cpxs_strap1/
  | /2 width=3 by drops_isuni_fwd_drop2/ 
  ]
]
qed.
(*
(* Advanced inversion lemmas ************************************************)

lemma cpxs_inv_lref1: ‚àÄh,o,G,L,T2,i. ‚¶ÉG, L‚¶Ñ ‚ä¢ #i ‚¨à*[h, o] T2 ‚Üí
                      T2 = #i ‚à®
                      ‚àÉ‚àÉI,K,V1,T1. ‚¨á[i] L ‚â° K.‚ìë{I}V1 & ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h, o] T1 &
                                   ‚¨Ü[0, i+1] T1 ‚â° T2.
#h #o #G #L #T2 #i #H @(cpxs_ind ‚Ä¶ H) -T2 /2 width=1 by or_introl/
#T #T2 #_ #HT2 *
[ #H destruct
  elim (cpx_inv_lref1 ‚Ä¶ HT2) -HT2 /2 width=1 by or_introl/
  * /4 width=7 by cpx_cpxs, ex3_4_intro, or_intror/
| * #I #K #V1 #T1 #HLK #HVT1 #HT1
  lapply (drop_fwd_drop2 ‚Ä¶ HLK) #H0LK
  elim (cpx_inv_lift1 ‚Ä¶ HT2 ‚Ä¶ H0LK ‚Ä¶ HT1) -H0LK -T
  /4 width=7 by cpxs_strap1, ex3_4_intro, or_intror/
]
qed-.

(* Relocation properties ****************************************************)

lemma cpxs_lift: ‚àÄh,o,G. d_liftable (cpxs h o G).
/3 width=10 by cpx_lift, cpxs_strap1, d_liftable_LTC/ qed.

lemma cpxs_inv_lift1: ‚àÄh,o,G. d_deliftable_sn (cpxs h o G).
/3 width=6 by d_deliftable_sn_LTC, cpx_inv_lift1/
qed-.
*)
