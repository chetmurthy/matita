(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/relocation/drops_ctc.ma".
include "basic_2/rt_transition/cpx_drops.ma".
include "basic_2/rt_computation/cpxs.ma".

(* UNCOUNTED CONTEXT-SENSITIVE PARALLEL RT-COMPUTATION FOR TERMS ************)

(* Advanced properties ******************************************************)

lemma cpxs_delta: ‚àÄh,I,G,K,V1,V2. ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] V2 ‚Üí
                  ‚àÄW2. ‚¨Ü*[1] V2 ‚âò W2 ‚Üí ‚¶ÉG, K.‚ìë{I}V1‚¶Ñ ‚ä¢ #0 ‚¨à*[h] W2.
#h #I #G #K #V1 #V2 #H @(cpxs_ind ‚Ä¶ H) -V2
[ /3 width=3 by cpx_cpxs, cpx_delta/
| #V #V2 #_ #HV2 #IH #W2 #HVW2
  elim (lifts_total V (ùêî‚ù¥1‚ùµ))
  /5 width=11 by cpxs_strap1, cpx_lifts_bi, drops_refl, drops_drop/
]
qed.

lemma cpxs_lref: ‚àÄh,I,G,K,T,i. ‚¶ÉG, K‚¶Ñ ‚ä¢ #i ‚¨à*[h] T ‚Üí
                 ‚àÄU. ‚¨Ü*[1] T ‚âò U ‚Üí ‚¶ÉG, K.‚ìò{I}‚¶Ñ ‚ä¢ #‚Üëi ‚¨à*[h] U.
#h #I #G #K #T #i #H @(cpxs_ind ‚Ä¶ H) -T
[ /3 width=3 by cpx_cpxs, cpx_lref/
| #T0 #T #_ #HT2 #IH #U #HTU
  elim (lifts_total T0 (ùêî‚ù¥1‚ùµ))
  /5 width=11 by cpxs_strap1, cpx_lifts_bi, drops_refl, drops_drop/
]
qed.

(* Basic_2A1: was: cpxs_delta *)
lemma cpxs_delta_drops: ‚àÄh,I,G,L,K,V1,V2,i.
                        ‚¨á*[i] L ‚âò K.‚ìë{I}V1 ‚Üí ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] V2 ‚Üí
                        ‚àÄW2. ‚¨Ü*[‚Üëi] V2 ‚âò W2 ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ #i ‚¨à*[h] W2.
#h #I #G #L #K #V1 #V2 #i #HLK #H @(cpxs_ind ‚Ä¶ H) -V2
[ /3 width=7 by cpx_cpxs, cpx_delta_drops/
| #V #V2 #_ #HV2 #IH #W2 #HVW2
  elim (lifts_total V (ùêî‚ù¥‚Üëi‚ùµ))
  /4 width=11 by cpxs_strap1, cpx_lifts_bi, drops_isuni_fwd_drop2/
]
qed.

(* Advanced inversion lemmas ************************************************)

lemma cpxs_inv_zero1: ‚àÄh,G,L,T2. ‚¶ÉG, L‚¶Ñ ‚ä¢ #0 ‚¨à*[h] T2 ‚Üí
                      T2 = #0 ‚à®
                      ‚àÉ‚àÉI,K,V1,V2. ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] V2 & ‚¨Ü*[1] V2 ‚âò T2 &
                                   L = K.‚ìë{I}V1.
#h #G #L #T2 #H @(cpxs_ind ‚Ä¶ H) -T2 /2 width=1 by or_introl/
#T #T2 #_ #HT2 *
[ #H destruct
  elim (cpx_inv_zero1 ‚Ä¶ HT2) -HT2 /2 width=1 by or_introl/
  * /4 width=7 by cpx_cpxs, ex3_4_intro, or_intror/
| * #I #K #V1 #T1 #HVT1 #HT1 #H destruct
  elim (cpx_inv_lifts_sn ‚Ä¶ HT2 (‚ìâ) ‚Ä¶ K ‚Ä¶ HT1) -T
  /4 width=7 by cpxs_strap1, drops_refl, drops_drop, ex3_4_intro, or_intror/
]
qed-.

lemma cpxs_inv_lref1: ‚àÄh,G,L,T2,i. ‚¶ÉG, L‚¶Ñ ‚ä¢ #‚Üëi ‚¨à*[h] T2 ‚Üí
                      T2 = #(‚Üëi) ‚à®
                      ‚àÉ‚àÉI,K,T. ‚¶ÉG, K‚¶Ñ ‚ä¢ #i ‚¨à*[h] T & ‚¨Ü*[1] T ‚âò T2 & L = K.‚ìò{I}.
#h #G #L #T2 #i #H @(cpxs_ind ‚Ä¶ H) -T2 /2 width=1 by or_introl/
#T #T2 #_ #HT2 *
[ #H destruct
  elim (cpx_inv_lref1 ‚Ä¶ HT2) -HT2 /2 width=1 by or_introl/
  * /4 width=6 by cpx_cpxs, ex3_3_intro, or_intror/
| * #I #K #T1 #Hi #HT1 #H destruct
  elim (cpx_inv_lifts_sn ‚Ä¶ HT2 (‚ìâ) ‚Ä¶ K ‚Ä¶ HT1) -T
  /4 width=6 by cpxs_strap1, drops_refl, drops_drop, ex3_3_intro, or_intror/
]
qed-.

(* Basic_2A1: was: cpxs_inv_lref1 *)
lemma cpxs_inv_lref1_drops: ‚àÄh,G,L,T2,i. ‚¶ÉG, L‚¶Ñ ‚ä¢ #i ‚¨à*[h] T2 ‚Üí
                            T2 = #i ‚à®
                            ‚àÉ‚àÉI,K,V1,T1. ‚¨á*[i] L ‚âò K.‚ìë{I}V1 & ‚¶ÉG, K‚¶Ñ ‚ä¢ V1 ‚¨à*[h] T1 &
                                         ‚¨Ü*[‚Üëi] T1 ‚âò T2.
#h #G #L #T2 #i #H @(cpxs_ind ‚Ä¶ H) -T2 /2 width=1 by or_introl/
#T #T2 #_ #HT2 *
[ #H destruct
  elim (cpx_inv_lref1_drops ‚Ä¶ HT2) -HT2 /2 width=1 by or_introl/
  * /4 width=7 by cpx_cpxs, ex3_4_intro, or_intror/
| * #I #K #V1 #T1 #HLK #HVT1 #HT1
  lapply (drops_isuni_fwd_drop2 ‚Ä¶ HLK) // #H0LK
  elim (cpx_inv_lifts_sn ‚Ä¶ HT2 ‚Ä¶ H0LK ‚Ä¶ HT1) -H0LK -T
  /4 width=7 by cpxs_strap1, ex3_4_intro, or_intror/
]
qed-.

(* Properties with generic relocation ***************************************)

(* Basic_2A1: includes: cpxs_lift *)
lemma cpxs_lifts_sn: ‚àÄh,G. d_liftable2_sn ‚Ä¶ lifts (cpxs h G).
/3 width=10 by cpx_lifts_sn, cpxs_strap1, d2_liftable_sn_CTC/ qed-.

lemma cpxs_lifts_bi: ‚àÄh,G. d_liftable2_bi ‚Ä¶ lifts (cpxs h G).
/3 width=12 by cpxs_lifts_sn, d_liftable2_sn_bi, lifts_mono/ qed-.

(* Inversion lemmas with generic relocation *********************************)

(* Basic_2A1: includes: cpxs_inv_lift1 *)
lemma cpxs_inv_lifts_sn: ‚àÄh,G. d_deliftable2_sn ‚Ä¶ lifts (cpxs h G).
/3 width=6 by d2_deliftable_sn_CTC, cpx_inv_lifts_sn/ qed-.

lemma cpxs_inv_lifts_bi: ‚àÄh,G. d_deliftable2_bi ‚Ä¶ lifts (cpxs h G).
/3 width=12 by cpxs_inv_lifts_sn, d_deliftable2_sn_bi, lifts_inj/ qed-.
