(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/rt_computation/cpxs_lfpx.ma".
include "basic_2/rt_computation/csx_drops.ma".
include "basic_2/rt_computation/csx_cpxs.ma".

(* STRONGLY NORMALIZING TERMS FOR UNCOUNTED PARALLEL RT-TRANSITION **********)

(* Advanced properties ******************************************************)

(* Basic_2A1: was just: csx_lpx_conf *)
lemma csx_lfpx_conf: ‚àÄh,o,G,L1,T. ‚¶ÉG, L1‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉT‚¶Ñ ‚Üí
                     ‚àÄL2. ‚¶ÉG, L1‚¶Ñ ‚ä¢ ‚¨à[h, T] L2 ‚Üí ‚¶ÉG, L2‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉT‚¶Ñ.
#h #o #G #L1 #T #H @(csx_ind_cpxs ‚Ä¶ H) -T
/5 width=3 by csx_intro, lfpx_cpx_trans, lfpx_cpxs_conf/
qed-.

lemma csx_abst: ‚àÄh,o,p,G,L,W. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉW‚¶Ñ ‚Üí
                ‚àÄT. ‚¶ÉG, L.‚ìõW‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉT‚¶Ñ ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶É‚ìõ{p}W.T‚¶Ñ.
#h #o #p #G #L #W #HW @(csx_ind ‚Ä¶ HW) -W
#W #_ #IHW #T #HT @(csx_ind ‚Ä¶ HT) -T #T #HT #IHT
@csx_intro #X #H1 #H2
elim (cpx_inv_abst1 ‚Ä¶ H1) -H1
#W0 #T0 #HLW0 #HLT0 #H destruct
elim (tdneq_inv_pair ‚Ä¶ H2) -H2
[ #H elim H -H //
| -IHT #H lapply (csx_cpx_trans ‚Ä¶ o ‚Ä¶ HLT0) // -HT
  #HT0 lapply (csx_lfpx_conf ‚Ä¶ HT0 ‚Ä¶ (L.‚ìõW0)) -HT0 /4 width=1 by lfpx_pair/
| -IHW -HT /4 width=3 by csx_cpx_trans, cpx_pair_sn/
]
qed.

lemma csx_abbr: ‚àÄh,o,p,G,L,V. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉV‚¶Ñ ‚Üí
                ‚àÄT. ‚¶ÉG, L.‚ììV‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉT‚¶Ñ ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶É‚ìì{p}V.T‚¶Ñ.
#h #o #p #G #L #V #HV @(csx_ind ‚Ä¶ HV) -V
#V #_ #IHV #T #HT @(csx_ind_cpxs ‚Ä¶ HT) -T #T #HT #IHT
@csx_intro #X #H1 #H2
elim (cpx_inv_abbr1 ‚Ä¶ H1) -H1 *
[ #V1 #T1 #HLV1 #HLT1 #H destruct
  elim (tdneq_inv_pair ‚Ä¶ H2) -H2
  [ #H elim H -H //
  | /4 width=3 by csx_cpx_trans, csx_lfpx_conf, lfpx_pair/
  | -IHV /4 width=3 by csx_cpx_trans, cpx_cpxs, cpx_pair_sn/
  ]
| -IHV -IHT -H2
  /4 width=7 by csx_cpx_trans, csx_inv_lifts, drops_drop, drops_refl/
]
qed.

fact csx_appl_theta_aux: ‚àÄh,o,p,G,L,U. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶ÉU‚¶Ñ ‚Üí ‚àÄV1,V2. ‚¨Ü*[1] V1 ‚â° V2 ‚Üí
                         ‚àÄV,T. U = ‚ìì{p}V.‚ìêV2.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ùêí‚¶É‚ìêV1.‚ìì{p}V.T‚¶Ñ.
#h #o #p #G #L #X #H @(csx_ind_cpxs ‚Ä¶ H) -X
#X #HVT #IHVT #V1 #V2 #HV12 #V #T #H destruct
lapply (csx_fwd_pair_sn ‚Ä¶ HVT) #HV
lapply (csx_fwd_bind_dx ‚Ä¶ HVT) -HVT #HVT
@csx_intro #X #HL #H
elim (cpx_inv_appl1 ‚Ä¶ HL) -HL *
[ -HV #V0 #Y #HLV10 #HL #H0 destruct
  elim (cpx_inv_abbr1 ‚Ä¶ HL) -HL *
  [ #V3 #T3 #HV3 #HLT3 #H0 destruct
    elim (lift_total V0 0 1) #V4 #HV04
    elim (eq_term_dec (‚ìì{a}V.‚ìêV2.T) (‚ìì{a}V3.‚ìêV4.T3))
    [ -IHVT #H0 destruct
      elim (eq_false_inv_tpair_sn ‚Ä¶ H) -H
      [ -HLV10 -HV3 -HLT3 -HVT
        >(lift_inj ‚Ä¶ HV12 ‚Ä¶ HV04) -V4
        #H elim H //
      | * #_ #H elim H //
      ]
    | -H -HVT #H
      lapply (cpx_lift ‚Ä¶ HLV10 (L.‚ììV) (‚íª) ‚Ä¶ HV12 ‚Ä¶ HV04) -HLV10 -HV12 /2 width=1 by drop_drop/ #HV24
      @(IHVT ‚Ä¶ H ‚Ä¶ HV04) -IHVT /4 width=1 by cpx_cpxs, cpx_bind, cpx_flat/
    ]
  | -H -IHVT #T0 #HLT0 #HT0 #H0 destruct
    lapply (csx_cpx_trans ‚Ä¶ HVT (‚ìêV2.T0) ?) /2 width=1 by cpx_flat/ -T #HVT0
    lapply (csx_inv_lift ‚Ä¶ L ‚Ä¶ (‚íª) ‚Ä¶ 1 HVT0 ? ? ?) -HVT0
    /3 width=5 by csx_cpx_trans, cpx_pair_sn, drop_drop, lift_flat/
  ]
| -HV -HV12 -HVT -IHVT -H #b #V0 #W0 #W1 #T0 #T1 #_ #_ #_ #H destruct
| -IHVT -H #b #V0 #V3 #W0 #W1 #T0 #T1 #HLV10 #HV03 #HLW01 #HLT01 #H1 #H2 destruct
  lapply (cpx_lift ‚Ä¶ HLV10 (L. ‚ììW0) ‚Ä¶ HV12 ‚Ä¶ HV03) -HLV10 -HV12 -HV03 /2 width=2 by drop_drop/ #HLV23
  @csx_abbr /2 width=3 by csx_cpx_trans/ -HV
  @(csx_lpx_conf ‚Ä¶ (L.‚ììW0)) /2 width=1 by lpx_pair/ -W1
  /4 width=5 by csx_cpxs_trans, cpx_cpxs, cpx_flat/
]
qed-.

lemma csx_appl_theta: ‚àÄh,o,a,V1,V2. ‚¨Ü[0, 1] V1 ‚â° V2 ‚Üí
                      ‚àÄG,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ‚ìì{a}V.‚ìêV2.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨à*[h, o] ‚ìêV1.‚ìì{a}V.T.
/2 width=5 by csx_appl_theta_aux/ qed.
