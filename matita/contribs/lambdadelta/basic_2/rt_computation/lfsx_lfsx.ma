(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/static/lfdeq_lfdeq.ma".
include "basic_2/rt_transition/lfpx_lfdeq.ma".
include "basic_2/rt_computation/lfsx.ma".

(* STRONGLY NORMALIZING LOCAL ENV.S FOR UNCOUNTED PARALLEL RT-TRANSITION ****)

axiom pippo: ‚àÄh,o,p,I,G,L1,L2,V,T. ‚¶ÉG, L1‚¶Ñ ‚ä¢ ‚¨à[h, V] L2 ‚Üí
             ‚àÉ‚àÉL. ‚¶ÉG, L1‚¶Ñ ‚ä¢ ‚¨à[h, ‚ìë{p,I}V.T] L & L ‚â°[h, o, V] L2.

(* Advanced properties ******************************************************)

lemma lfsx_lfdeq_trans: ‚àÄh,o,G,L1,T. G ‚ä¢ ‚¨à*[h, o, T] ùêí‚¶ÉL1‚¶Ñ ‚Üí
                        ‚àÄL2. L1 ‚â°[h, o, T] L2 ‚Üí G ‚ä¢ ‚¨à*[h, o, T] ùêí‚¶ÉL2‚¶Ñ.
#h #o #G #L1 #T #H @(lfsx_ind ‚Ä¶ H) -L1
#L1 #_ #IHL1 #L2 #HL12 @lfsx_intro
#L #HL2 #HnL2 elim (lfdeq_lfpx_trans ‚Ä¶ HL2 ‚Ä¶ HL12) -HL2
/4 width=5 by lfdeq_repl/
qed-.

(* Advanced forward lemmas **************************************************)

(* Basic_2A1: was: lsx_fwd_bind_sn *)
lemma lfsx_fwd_bind_sn: ‚àÄh,o,p,I,G,L,V,T. G ‚ä¢ ‚¨à*[h, o, ‚ìë{p,I}V.T] ùêí‚¶ÉL‚¶Ñ ‚Üí
                        G ‚ä¢ ‚¨à*[h, o, V] ùêí‚¶ÉL‚¶Ñ.
#h #o #p #I #G #L #V #T #H @(lfsx_ind ‚Ä¶ H) -L
#L1 #_ #IHL1 @lfsx_intro
#L2 #H #HnL12 elim (pippo ‚Ä¶ o p I ‚Ä¶ T H) -H
/6 width=4 by lfsx_lfdeq_trans, lfdeq_trans, lfdeq_fwd_bind_sn/
qed-.
(*
lemma lfsx_fwd_flat_sn: ‚àÄh,o,I,G,L,V,T,l. G ‚ä¢ ‚¨à*[h, o, ‚ìï{I}V.T, l] L ‚Üí
                       G ‚ä¢ ‚¨à*[h, o, V, l] L.
#h #o #I #G #L #V #T #l #H @(lfsx_ind ‚Ä¶ H) -L
#L1 #_ #IHL1 @lfsx_intro
#L2 #HL12 #HV @IHL1 /3 width=3 by lfdeq_fwd_flat_sn/
qed-.

lemma lfsx_fwd_flat_dx: ‚àÄh,o,I,G,L,V,T,l. G ‚ä¢ ‚¨à*[h, o, ‚ìï{I}V.T, l] L ‚Üí
                       G ‚ä¢ ‚¨à*[h, o, T, l] L.
#h #o #I #G #L #V #T #l #H @(lfsx_ind ‚Ä¶ H) -L
#L1 #_ #IHL1 @lfsx_intro
#L2 #HL12 #HV @IHL1 /3 width=3 by lfdeq_fwd_flat_dx/
qed-.

lemma lfsx_fwd_pair_sn: ‚àÄh,o,I,G,L,V,T,l. G ‚ä¢ ‚¨à*[h, o, ‚ë°{I}V.T, l] L ‚Üí
                       G ‚ä¢ ‚¨à*[h, o, V, l] L.
#h #o * /2 width=4 by lfsx_fwd_bind_sn, lfsx_fwd_flat_sn/
qed-.

(* Basic inversion lemmas ***************************************************)

lemma lfsx_inv_flat: ‚àÄh,o,I,G,L,V,T,l. G ‚ä¢ ‚¨à*[h, o, ‚ìï{I}V.T, l] L ‚Üí
                    G ‚ä¢ ‚¨à*[h, o, V, l] L ‚àß G ‚ä¢ ‚¨à*[h, o, T, l] L.
/3 width=3 by lfsx_fwd_flat_sn, lfsx_fwd_flat_dx, conj/ qed-.
*)