(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/rt_transition/lpr_drops.ma".
include "basic_2/rt_computation/cpms_lpr.ma".
include "basic_2/rt_computation/fpbg_fqup.ma".
include "basic_2/rt_conversion/cpce_drops.ma".
include "basic_2/rt_conversion/lpce_drops.ma".
include "basic_2/dynamic/cnv_drops.ma".

(* CONTEXT-SENSITIVE NATIVE VALIDITY FOR TERMS ******************************)

definition IH (h) (a): relation3 genv lenv term ‚âù
           ŒªG,L0,T0. ‚¶ÉG,L0‚¶Ñ ‚ä¢ T0 ![h,a] ‚Üí
           ‚àÄn,T1. ‚¶ÉG,L0‚¶Ñ ‚ä¢ T0 ‚û°[n,h] T1 ‚Üí ‚àÄT2. ‚¶ÉG,L0‚¶Ñ ‚ä¢ T0 ‚¨åŒ∑[h] T2 ‚Üí
           ‚àÄL1. ‚¶ÉG,L0‚¶Ñ ‚ä¢ ‚û°[h] L1 ‚Üí ‚àÄL2. ‚¶ÉG,L0‚¶Ñ ‚ä¢ ‚¨åŒ∑[h] L2 ‚Üí
           ‚àÉ‚àÉT. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 ‚¨åŒ∑[h] T & ‚¶ÉG,L2‚¶Ñ ‚ä¢ T2 ‚û°[n,h] T.

(* Properties with eta-conversion for full local environments ***************)  

lemma pippo_aux (h) (a) (G0) (L0) (T0):
                (‚àÄG,L,T. ‚¶ÉG0,L0,T0‚¶Ñ >[h] ‚¶ÉG,L,T‚¶Ñ ‚Üí IH h a G L T) ‚Üí
                IH h a G0 L0 T0.
#h #a #G0 #L0 * *
[ #s #_ #_ #n #X1 #HX1 #X2 #HX2 #L1 #HL01 #L2 #HL02
  elim (cpm_inv_sort1 ‚Ä¶ HX1) -HX1 #H #Hn destruct
  lapply (cpce_inv_sort_sn ‚Ä¶ HX2) -HX2 #H destruct
  /3 width=3 by cpce_sort, cpm_sort, ex2_intro/
| #i #IH #Hi #n #X1 #HX1 #X2 #HX2 #L1 #HL01 #L2 #HL02
  elim (cnv_inv_lref_drops ‚Ä¶ Hi) -Hi #I #K0 #W0 #HLK0 #HW0
  elim (lpr_drops_conf ‚Ä¶ HLK0 ‚Ä¶ HL01) [| // ] #Y1 #H1 #HLK1
  elim (lpr_inv_pair_sn ‚Ä¶ H1) -H1 #K1 #W1 #HK01 #HW01 #H destruct
  elim (lpce_drops_conf ‚Ä¶ HLK0 ‚Ä¶ HL02) [| // ] #Y2 #H2 #HLK2
  elim (lpce_inv_pair_sn ‚Ä¶ H2) -H2 #K2 #W2 #HK02 #HW02 #H destruct
  elim (cpm_inv_lref1_drops ‚Ä¶ HX1) -HX1 *
  [ #H1 #H2 destruct
    elim (cpce_inv_lref_sn_drops_pair ‚Ä¶ HX2 ‚Ä¶ HLK0) -HX2 *
    [ #H1 #H2 destruct -L0 -K0 -W0
      /3 width=3 by cpce_ldef_drops, ex2_intro/
    | #H1 #HW #H2 destruct -L0 -W2 -HW0 -HK02
      @(ex2_intro ‚Ä¶ (#i)) [| // ]
      @(cpce_ldec_drops ‚Ä¶ HLK1) -HLK1 #n #p #V0 #U0 #HWU0
      /4 width=10 by lpr_cpms_trans, cpms_step_sn/
    | #n #p #W01 #W02 #V0 #V01 #V02 #U0 #H1 #HWU0 #HW001 #HW012 #HV001 #HV012 #H2 destruct 
    ]
  | lapply (drops_isuni_fwd_drop2 ‚Ä¶ HLK1) [ // ] -W1 #HLK1
    #Y0 #X0 #W1 #HLY0 #HW01 #HWX1 -HL01 -HL02
    lapply (drops_mono ‚Ä¶ HLY0 ‚Ä¶ HLK0) -HLY0 #H destruct
    lapply (cpce_inv_lref_sn_drops_ldef ‚Ä¶ HX2 ‚Ä¶ HLK0) -HX2 #H destruct
    elim (IH ‚Ä¶ HW0 ‚Ä¶ HW01 ‚Ä¶ HW02 ‚Ä¶ HK01 ‚Ä¶ HK02)
    [| /3 width=2 by fqup_fpbg, fqup_lref/ ] -L0 -K0 #W #HW1 #HW2
    elim (lifts_total W (ùêî‚ù¥‚Üëi‚ùµ)) #V #HWV
    /3 width=9 by cpce_lifts_bi, cpm_delta_drops, ex2_intro/
  | lapply (drops_isuni_fwd_drop2 ‚Ä¶ HLK1) [ // ] -W1 #HLK1
    #m #Y0 #X0 #W1 #HLY0 #HW01 #HWX1 #H destruct -HL01 -HL02
    lapply (drops_mono ‚Ä¶ HLY0 ‚Ä¶ HLK0) -HLY0 #H destruct
    elim (cpce_inv_lref_sn_drops_ldec ‚Ä¶ HX2 ‚Ä¶ HLK0) -HX2 *
    [ #_ #H destruct
      elim (IH ‚Ä¶ HW0 ‚Ä¶ HW01 ‚Ä¶ HW02 ‚Ä¶ HK01 ‚Ä¶ HK02)
      [| /3 width=2 by fqup_fpbg, fqup_lref/ ] -L0 -K0 #W #HW1 #HW2
      elim (lifts_total W (ùêî‚ù¥‚Üëi‚ùµ)) #V #HWV
      /3 width=9 by cpce_lifts_bi, cpm_ell_drops, ex2_intro/
    | lapply (drops_isuni_fwd_drop2 ‚Ä¶ HLK2) [ // ] -W2 #HLK2
      #n #p #W01 #W02 #V0 #V01 #V02 #U0 #_ #HW001 #HW012 #_ #_ #H destruct -V0 -V01 -U0
      elim (IH ‚Ä¶ HW0 ‚Ä¶ HW01 ‚Ä¶ HW001 ‚Ä¶ HK01 ‚Ä¶ HK02)
      [| /3 width=2 by fqup_fpbg, fqup_lref/ ] -L0 -K0 #W #HW1 #HW2
      elim (lifts_total W (ùêî‚ù¥‚Üëi‚ùµ)) #V #HWV
      /4 width=11 by cpce_lifts_bi, cpm_lifts_bi, cpm_ee, ex2_intro/
    ]
  ]
| #l #_ #_ #n #X1 #HX1 #X2 #HX2 #L1 #HL01 #L2 #HL02
  elim (cpm_inv_gref1 ‚Ä¶ HX1) -HX1 #H1 #H2 destruct
  lapply (cpce_inv_gref_sn ‚Ä¶ HX2) -HX2 #H destruct
  /3 width=3 by cpce_gref, cpr_refl, ex2_intro/

(*
lemma cpce_inv_eta_drops (h) (n) (G) (L) (i):
      ‚àÄX. ‚¶ÉG,L‚¶Ñ ‚ä¢ #i ‚¨åŒ∑[h] X ‚Üí
      ‚àÄK,W. ‚á©*[i] L ‚âò K.‚ìõW ‚Üí
      ‚àÄp,V1,U. ‚¶ÉG,K‚¶Ñ ‚ä¢ W ‚û°*[n,h] ‚ìõ{p}V1.U ‚Üí
      ‚àÄV2. ‚¶ÉG,K‚¶Ñ ‚ä¢ V1 ‚¨åŒ∑[h] V2 ‚Üí
      ‚àÄW2. ‚áß*[‚Üëi] V2 ‚âò W2 ‚Üí X = +‚ìõW2.‚ìê#0.#‚Üëi.

theorem cpce_mono_cnv (h) (a) (G) (L):
        ‚àÄT. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ![h,a] ‚Üí
        ‚àÄT1. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ‚¨åŒ∑[h] T1 ‚Üí ‚àÄT2. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ‚¨åŒ∑[h] T2 ‚Üí T1 = T2.
#h #a #G #L #T #HT
*)
