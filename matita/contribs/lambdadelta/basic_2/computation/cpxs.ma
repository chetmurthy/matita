(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/notation/relations/predstar_5.ma".
include "basic_2/unfold/sstas.ma".
include "basic_2/reduction/cnx.ma".
include "basic_2/computation/cprs.ma".

(* CONTEXT-SENSITIVE EXTENDED PARALLEL COMPUTATION ON TERMS *****************)

definition cpxs: ‚àÄh. sd h ‚Üí lenv ‚Üí relation term ‚âù
                 Œªh,g. LTC ‚Ä¶ (cpx h g).

interpretation "extended context-sensitive parallel computation (term)"
   'PRedStar h g L T1 T2 = (cpxs h g L T1 T2).

(* Basic eliminators ********************************************************)

lemma cpxs_ind: ‚àÄh,g,L,T1. ‚àÄR:predicate term. R T1 ‚Üí
                (‚àÄT,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°[g] T2 ‚Üí R T ‚Üí R T2) ‚Üí
                ‚àÄT2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí R T2.
#h #g #L #T1 #R #HT1 #IHT1 #T2 #HT12
@(TC_star_ind ‚Ä¶ HT1 IHT1 ‚Ä¶ HT12) //
qed-.

lemma cpxs_ind_dx: ‚àÄh,g,L,T2. ‚àÄR:predicate term. R T2 ‚Üí
                   (‚àÄT1,T. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°*[g] T2 ‚Üí R T ‚Üí R T1) ‚Üí
                   ‚àÄT1. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí R T1.
#h #g #L #T2 #R #HT2 #IHT2 #T1 #HT12
@(TC_star_ind_dx ‚Ä¶ HT2 IHT2 ‚Ä¶ HT12) //
qed-.

(* Basic properties *********************************************************)

lemma cpxs_refl: ‚àÄh,g,L,T. ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°*[g] T.
/2 width=1/ qed.

lemma cpx_cpxs: ‚àÄh,g,L,T1,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2.
/2 width=1/ qed.

lemma cpxs_strap1: ‚àÄh,g,L,T1,T. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T ‚Üí
                   ‚àÄT2. ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2.
normalize /2 width=3/ qed.

lemma cpxs_strap2: ‚àÄh,g,L,T1,T. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°[g] T ‚Üí
                   ‚àÄT2. ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°*[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2.
normalize /2 width=3/ qed.

lemma lsubr_cpxs_trans: ‚àÄh,g. lsub_trans ‚Ä¶ (cpxs h g) lsubr.
/3 width=5 by lsubr_cpx_trans, TC_lsub_trans/
qed-.

lemma sstas_cpxs: ‚àÄh,g,L,T1,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢* [g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2.
#h #g #L #T1 #T2 #H @(sstas_ind ‚Ä¶ H) -T2 //
/3 width=4 by cpxs_strap1, ssta_cpx/
qed.

lemma cprs_cpxs: ‚àÄh,g,L,T1,T2. L ‚ä¢ T1 ‚û°* T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2.
#h #g #L #T1 #T2 #H @(cprs_ind ‚Ä¶ H) -T2 // /3 width=3/
qed.

lemma cpxs_bind_dx: ‚àÄh,g,L,V1,V2. ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°[g] V2 ‚Üí
                    ‚àÄI,T1,T2. ‚¶Éh, L. ‚ìë{I}V1‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí
                    ‚àÄa. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìë{a,I}V1.T1 ‚û°*[g] ‚ìë{a,I}V2.T2.
#h #g #L #V1 #V2 #HV12 #I #T1 #T2 #HT12 #a @(cpxs_ind_dx ‚Ä¶ HT12) -T1
/3 width=1/ /3 width=3/
qed.

lemma cpxs_flat_dx: ‚àÄh,g,L,V1,V2. ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°[g] V2 ‚Üí
                    ‚àÄT1,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí
                    ‚àÄI. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìï{I} V1. T1 ‚û°*[g] ‚ìï{I} V2. T2.
#h #g #L #V1 #V2 #HV12 #T1 #T2 #HT12 @(cpxs_ind ‚Ä¶ HT12) -T2 /3 width=1/ /3 width=5/
qed.

lemma cpxs_flat_sn: ‚àÄh,g,L,T1,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°[g] T2 ‚Üí
                    ‚àÄV1,V2. ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°*[g] V2 ‚Üí
                    ‚àÄI. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìï{I} V1. T1 ‚û°*[g] ‚ìï{I} V2. T2.
#h #g #L #T1 #T2 #HT12 #V1 #V2 #H @(cpxs_ind ‚Ä¶ H) -V2 /3 width=1/ /3 width=5/
qed.

lemma cpxs_zeta: ‚àÄh,g,L,V,T1,T,T2. ‚áß[0, 1] T2 ‚â° T ‚Üí
                 ‚¶Éh, L.‚ììV‚¶Ñ ‚ä¢ T1 ‚û°*[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ +‚ììV.T1 ‚û°*[g] T2.
#h #g #L #V #T1 #T #T2 #HT2 #H @(TC_ind_dx ‚Ä¶ T1 H) -T1 /3 width=3/
qed.

lemma cpxs_tau: ‚àÄh,g,L,T1,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí ‚àÄV. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìùV.T1 ‚û°*[g] T2.
#h #g #L #T1 #T2 #H elim H -T2 /2 width=3/ /3 width=1/
qed.

lemma cpxs_ti: ‚àÄh,g,L,V1,V2. ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°*[g] V2 ‚Üí ‚àÄT. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìùV1.T ‚û°*[g] V2.
#h #g #L #V1 #V2 #H elim H -V2 /2 width=3/ /3 width=1/
qed.

lemma cpxs_beta_dx: ‚àÄh,g,a,L,V1,V2,W1,W2,T1,T2.
                    ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°[g] V2 ‚Üí ‚¶Éh, L.‚ìõW1‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ W1 ‚û°[g] W2 ‚Üí
                    ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìêV1.‚ìõ{a}W1.T1 ‚û°*[g] ‚ìì{a}‚ìùW2.V2.T2.
#h #g #a #L #V1 #V2 #W1 #W2 #T1 #T2 #HV12 * -T2 /3 width=1/
/4 width=7 by cpxs_strap1, cpxs_bind_dx, cpxs_flat_dx, cpx_beta/ (**) (* auto too slow without trace *)
qed.

lemma cpxs_theta_dx: ‚àÄh,g,a,L,V1,V,V2,W1,W2,T1,T2.
                     ‚¶Éh, L‚¶Ñ ‚ä¢ V1 ‚û°[g] V ‚Üí ‚áß[0, 1] V ‚â° V2 ‚Üí ‚¶Éh, L.‚ììW1‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 ‚Üí
                     ‚¶Éh, L‚¶Ñ ‚ä¢ W1 ‚û°[g] W2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìêV1.‚ìì{a}W1.T1 ‚û°*[g] ‚ìì{a}W2.‚ìêV2.T2.
#h #g #a #L #V1 #V #V2 #W1 #W2 #T1 #T2 #HV1 #HV2 * -T2 [ /3 width=3/ ]
/4 width=9 by cpxs_strap1, cpxs_bind_dx, cpxs_flat_dx, cpx_theta/ (**) (* auto too slow without trace *)
qed.

(* Basic inversion lemmas ***************************************************)

lemma cpxs_inv_sort1: ‚àÄh,g,L,U2,k. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ãÜk ‚û°*[g] U2 ‚Üí
                      ‚àÉ‚àÉn,l. deg h g k (n+l) & U2 = ‚ãÜ((next h)^n k).
#h #g #L #U2 #k #H @(cpxs_ind ‚Ä¶ H) -U2
[ elim (deg_total h g k) #l #Hkl
  @(ex2_2_intro ‚Ä¶ 0 ‚Ä¶ Hkl) -Hkl //
| #U #U2 #_ #HU2 * #n #l #Hknl #H destruct
  elim (cpx_inv_sort1 ‚Ä¶ HU2) -HU2
  [ #H destruct /2 width=4/
  | * #l0 #Hkl0 #H destruct -l
    @(ex2_2_intro ‚Ä¶ (n+1) l0) /2 width=1 by deg_inv_prec/ >iter_SO //
  ]
]
qed-.

lemma cpxs_inv_cast1: ‚àÄh,g,L,W1,T1,U2. ‚¶Éh, L‚¶Ñ ‚ä¢ ‚ìùW1.T1 ‚û°*[g] U2 ‚Üí
                      ‚à®‚à® ‚àÉ‚àÉW2,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ W1 ‚û°*[g] W2 & ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] T2 & U2 = ‚ìùW2.T2
                       | ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚û°*[g] U2
                       | ‚¶Éh, L‚¶Ñ ‚ä¢ W1 ‚û°*[g] U2.
#h #g #L #W1 #T1 #U2 #H @(cpxs_ind ‚Ä¶ H) -U2 /3 width=5/
#U2 #U #_ #HU2 * /3 width=3/ *
#W #T #HW1 #HT1 #H destruct
elim (cpx_inv_cast1 ‚Ä¶ HU2) -HU2 /3 width=3/ *
#W2 #T2 #HW2 #HT2 #H destruct
lapply (cpxs_strap1 ‚Ä¶ HW1 ‚Ä¶ HW2) -W
lapply (cpxs_strap1 ‚Ä¶ HT1 ‚Ä¶ HT2) -T /3 width=5/
qed-.

lemma cpxs_inv_cnx1: ‚àÄh,g,L,T,U. ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚û°*[g] U ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ ùêç[g]‚¶ÉT‚¶Ñ ‚Üí T = U.
#h #g #L #T #U #H @(cpxs_ind_dx ‚Ä¶ H) -T //
#T0 #T #H1T0 #_ #IHT #H2T0
lapply (H2T0 ‚Ä¶ H1T0) -H1T0 #H destruct /2 width=1/
qed-.
