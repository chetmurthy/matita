(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/syntax/lveq_lveq.ma".
include "basic_2/static/fle_fqup.ma".

(* FREE VARIABLES INCLUSION FOR RESTRICTED CLOSURES *************************)

(* Advanced inversion lemmas ************************************************)

lemma fle_frees_trans: ‚àÄL1,L2,T1,T2. ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ ‚Üí
                       ‚àÄf2. L2 ‚ä¢ ùêÖ*‚¶ÉT2‚¶Ñ ‚â° f2 ‚Üí
                       ‚àÉ‚àÉn1,n2,f1. L1 ‚ä¢ ùêÖ*‚¶ÉT1‚¶Ñ ‚â° f1 &
                                   L1 ‚âã‚ìß*[n1, n2] L2 & ‚´±*[n1]f1 ‚äÜ ‚´±*[n2]f2.
#L1 #L2 #T1 #T2 * #n1 #n2 #f1 #g2 #Hf1 #Hg2 #HL #Hn #f2 #Hf2
lapply (frees_mono ‚Ä¶ Hg2 ‚Ä¶ Hf2) -Hg2 -Hf2 #Hgf2
lapply (tls_eq_repl n2 ‚Ä¶ Hgf2) -Hgf2 #Hgf2
lapply (sle_eq_repl_back2 ‚Ä¶ Hn ‚Ä¶ Hgf2) -g2
/2 width=6 by ex3_3_intro/
qed-.

lemma fle_frees_trans_eq: ‚àÄL1,L2. |L1| = |L2| ‚Üí
                          ‚àÄT1,T2. ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ ‚Üí ‚àÄf2. L2 ‚ä¢ ùêÖ*‚¶ÉT2‚¶Ñ ‚â° f2 ‚Üí
                          ‚àÉ‚àÉf1. L1 ‚ä¢ ùêÖ*‚¶ÉT1‚¶Ñ ‚â° f1 & f1 ‚äÜ f2.
#L1 #L2 #H1L #T1 #T2 #H2L #f2 #Hf2
elim (fle_frees_trans ‚Ä¶ H2L ‚Ä¶ Hf2) -T2 #n1 #n2 #f1 #Hf1 #H2L #Hf12
elim (lveq_inj_length ‚Ä¶ H2L) // -L2 #H1 #H2 destruct
/2 width=3 by ex2_intro/
qed-.

(* Main properties **********************************************************)

theorem fle_trans_sn: ‚àÄL1,L2,T1,T. ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ ‚Üí
                      ‚àÄT2. ‚¶ÉL2, T‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ ‚Üí ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ.
#L1 #L2 #T1 #T
* #m1 #m0 #g1 #g0 #Hg1 #Hg0 #Hm #Hg
#T2
* #n0 #n2 #f0 #f2 #Hf0 #Hf2 #Hn #Hf
lapply (frees_mono ‚Ä¶ Hf0 ‚Ä¶ Hg0) -Hf0 -Hg0 #Hfg0
elim (lveq_inj_length ‚Ä¶ Hn) // -Hn #H1 #H2 destruct
lapply (sle_eq_repl_back1 ‚Ä¶ Hf ‚Ä¶ Hfg0) -f0
/4 width=10 by sle_tls, sle_trans, ex4_4_intro/
qed-.

theorem fle_trans_dx: ‚àÄL1,T1,T. ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL1, T‚¶Ñ ‚Üí
                      ‚àÄL2,T2. ‚¶ÉL1, T‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ ‚Üí ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ.
#L1 #T1 #T
* #m1 #m0 #g1 #g0 #Hg1 #Hg0 #Hm #Hg
#L2 #T2
* #n0 #n2 #f0 #f2 #Hf0 #Hf2 #Hn #Hf
lapply (frees_mono ‚Ä¶ Hg0 ‚Ä¶ Hf0) -Hg0 -Hf0 #Hgf0
elim (lveq_inj_length ‚Ä¶ Hm) // -Hm #H1 #H2 destruct
lapply (sle_eq_repl_back2 ‚Ä¶ Hg ‚Ä¶ Hgf0) -g0
/4 width=10 by sle_tls, sle_trans, ex4_4_intro/
qed-.

theorem fle_bind_sn_ge: ‚àÄL1,L2. |L2| ‚â§ |L1| ‚Üí
                        ‚àÄV1,T1,T. ‚¶ÉL1, V1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ ‚Üí ‚¶ÉL1.‚ìß, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ ‚Üí
                        ‚àÄp,I. ‚¶ÉL1, ‚ìë{p,I}V1.T1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ.
#L1 #L2 #HL #V1 #T1 #T * #n1 #x #f1 #g #Hf1 #Hg #H1n1 #H2n1 #H #p #I
elim (fle_frees_trans ‚Ä¶ H ‚Ä¶ Hg) -H #n2 #n #f2 #Hf2 #H1n2 #H2n2
elim (lveq_inj_void_sn_ge ‚Ä¶ H1n1 ‚Ä¶ H1n2) -H1n2 // #H1 #H2 #H3 destruct
elim (sor_isfin_ex f1 (‚´±f2)) /3 width=3 by frees_fwd_isfin, isfin_tl/ #f #Hf #_
<tls_xn in H2n2; #H2n2
/4 width=12 by frees_bind_void, sor_inv_sle, sor_tls, ex4_4_intro/
qed.

theorem fle_flat_sn: ‚àÄL1,L2,V1,T1,T. ‚¶ÉL1, V1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ ‚Üí ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ ‚Üí
                     ‚àÄI. ‚¶ÉL1, ‚ìï{I}V1.T1‚¶Ñ ‚äÜ ‚¶ÉL2, T‚¶Ñ.
#L1 #L2 #V1 #T1 #T * #n1 #x #f1 #g #Hf1 #Hg #H1n1 #H2n1 #H #I
elim (fle_frees_trans ‚Ä¶ H ‚Ä¶ Hg) -H #n2 #n #f2 #Hf2 #H1n2 #H2n2
elim (lveq_inj ‚Ä¶ H1n1 ‚Ä¶ H1n2) -H1n2 #H1 #H2 destruct
elim (sor_isfin_ex f1 f2) /2 width=3 by frees_fwd_isfin/ #f #Hf #_
/4 width=12 by frees_flat, sor_inv_sle, sor_tls, ex4_4_intro/
qed.

theorem fle_bind_eq: ‚àÄL1,L2. |L1| = |L2| ‚Üí ‚àÄV1,V2. ‚¶ÉL1, V1‚¶Ñ ‚äÜ ‚¶ÉL2, V2‚¶Ñ ‚Üí
                     ‚àÄI2,T1,T2. ‚¶ÉL1.‚ìß, T1‚¶Ñ ‚äÜ ‚¶ÉL2.‚ìë{I2}V2, T2‚¶Ñ ‚Üí
                     ‚àÄp,I1. ‚¶ÉL1, ‚ìë{p,I1}V1.T1‚¶Ñ ‚äÜ ‚¶ÉL2, ‚ìë{p,I2}V2.T2‚¶Ñ.
#L1 #L2 #HL #V1 #V2
* #n1 #m1 #f1 #g1 #Hf1 #Hg1 #H1L #Hfg1 #I2 #T1 #T2
* #n2 #m2 #f2 #g2 #Hf2 #Hg2 #H2L #Hfg2 #p #I1
elim (lveq_inj_length ‚Ä¶ H1L) // #H1 #H2 destruct
elim (lveq_inj_length ‚Ä¶ H2L) // -HL -H2L #H1 #H2 destruct
elim (sor_isfin_ex f1 (‚´±f2)) /3 width=3 by frees_fwd_isfin, isfin_tl/ #f #Hf #_
elim (sor_isfin_ex g1 (‚´±g2)) /3 width=3 by frees_fwd_isfin, isfin_tl/ #g #Hg #_
/4 width=15 by frees_bind_void, frees_bind, monotonic_sle_sor, sle_tl, ex4_4_intro/
qed.

theorem fle_bind: ‚àÄL1,L2,V1,V2. ‚¶ÉL1, V1‚¶Ñ ‚äÜ ‚¶ÉL2, V2‚¶Ñ ‚Üí
                  ‚àÄI1,I2,T1,T2. ‚¶ÉL1.‚ìë{I1}V1, T1‚¶Ñ ‚äÜ ‚¶ÉL2.‚ìë{I2}V2, T2‚¶Ñ ‚Üí
                  ‚àÄp. ‚¶ÉL1, ‚ìë{p,I1}V1.T1‚¶Ñ ‚äÜ ‚¶ÉL2, ‚ìë{p,I2}V2.T2‚¶Ñ.
#L1 #L2 #V1 #V2
* #n1 #m1 #f1 #g1 #Hf1 #Hg1 #H1L #Hfg1 #I1 #I2 #T1 #T2
* #n2 #m2 #f2 #g2 #Hf2 #Hg2 #H2L #Hfg2 #p
elim (lveq_inv_pair_pair ‚Ä¶ H2L) -H2L #H2L #H1 #H2 destruct
elim (lveq_inj ‚Ä¶ H2L ‚Ä¶ H1L) -H1L #H1 #H2 destruct
elim (sor_isfin_ex f1 (‚´±f2)) /3 width=3 by frees_fwd_isfin, isfin_tl/ #f #Hf #_
elim (sor_isfin_ex g1 (‚´±g2)) /3 width=3 by frees_fwd_isfin, isfin_tl/ #g #Hg #_
/4 width=15 by frees_bind, monotonic_sle_sor, sle_tl, ex4_4_intro/
qed.

theorem fle_flat: ‚àÄL1,L2,V1,V2. ‚¶ÉL1, V1‚¶Ñ ‚äÜ ‚¶ÉL2, V2‚¶Ñ ‚Üí
                  ‚àÄT1,T2. ‚¶ÉL1, T1‚¶Ñ ‚äÜ ‚¶ÉL2, T2‚¶Ñ ‚Üí
                  ‚àÄI1,I2. ‚¶ÉL1, ‚ìï{I1}V1.T1‚¶Ñ ‚äÜ ‚¶ÉL2, ‚ìï{I2}V2.T2‚¶Ñ.
/3 width=1 by fle_flat_sn, fle_flat_dx_dx, fle_flat_dx_sn/ qed-.
