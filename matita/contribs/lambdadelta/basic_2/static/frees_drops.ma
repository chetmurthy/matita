(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground_2/relocation/rtmap_pushs.ma".
include "ground_2/relocation/rtmap_coafter.ma".
include "basic_2/relocation/lifts_lifts.ma".
include "basic_2/relocation/drops.ma".
include "basic_2/static/frees.ma".

(* CONTEXT-SENSITIVE FREE VARIABLES *****************************************)

(* Advanced properties ******************************************************)

lemma frees_lref_atom: ‚àÄL,i. ‚¨á*[‚íª, ùêî‚ù¥i‚ùµ] L ‚â° ‚ãÜ ‚Üí L ‚ä¢ ùêÖ*‚¶É#i‚¶Ñ ‚â° ùêàùêù.
#L elim L -L /2 width=1 by frees_atom/
#L #I #V #IH *
[ #H lapply (drops_fwd_isid ‚Ä¶ H ?) -H // #H destruct
| /4 width=3 by frees_lref, drops_inv_drop1/
]
qed.

lemma frees_lref_pair: ‚àÄf,K,V. K ‚ä¢ ùêÖ*‚¶ÉV‚¶Ñ ‚â° f ‚Üí 
                       ‚àÄi,I,L. ‚¨á*[i] L ‚â° K.‚ìë{I}V ‚Üí L ‚ä¢ ùêÖ*‚¶É#i‚¶Ñ ‚â° ‚Üë*[i] ‚´Øf.
#f #K #V #Hf #i elim i -i
[ #I #L #H lapply (drops_fwd_isid ‚Ä¶ H ?) -H /2 width=1 by frees_zero/
| #i #IH #I #L #H elim (drops_inv_succ ‚Ä¶ H) -H /3 width=2 by frees_lref/
]
qed.

(* Advanced inversion lemmas ************************************************)

lemma frees_inv_lref_drops: ‚àÄi,f,L. L ‚ä¢ ùêÖ*‚¶É#i‚¶Ñ ‚â° f ‚Üí
                            (‚¨á*[‚íª, ùêî‚ù¥i‚ùµ] L ‚â° ‚ãÜ ‚àß ùêà‚¶Éf‚¶Ñ) ‚à®
                            ‚àÉ‚àÉg,I,K,V. K ‚ä¢ ùêÖ*‚¶ÉV‚¶Ñ ‚â° g &
                                       ‚¨á*[i] L ‚â° K.‚ìë{I}V & f = ‚Üë*[i] ‚´Øg.
#i elim i -i
[ #f #L #H elim (frees_inv_zero ‚Ä¶ H) -H *
  /4 width=7 by ex3_4_intro, or_introl, or_intror, conj, drops_refl/
| #i #IH #f #L #H elim (frees_inv_lref ‚Ä¶ H) -H * /3 width=1 by or_introl, conj/
  #g #I #K #V #Hg #H1 #H2 destruct
  elim (IH ‚Ä¶ Hg) -IH -Hg *
  [ /4 width=3 by or_introl, conj, isid_push, drops_drop/
  | /4 width=7 by drops_drop, ex3_4_intro, or_intror/
  ]
]
qed-.

(* Properties with generic slicing for local environments *******************)

(* Inversion lemmas with generic slicing for local environments *************)

lemma frees_inv_lifts: ‚àÄb,f2,L,U. L ‚ä¢ ùêÖ*‚¶ÉU‚¶Ñ ‚â° f2 ‚Üí
                       ‚àÄf,K. ‚¨á*[b, f] L ‚â° K ‚Üí ‚àÄT. ‚¨Ü*[f] T ‚â° U ‚Üí
                       ‚àÄf1. f ~‚äö f1 ‚â° f2 ‚Üí K ‚ä¢ ùêÖ*‚¶ÉT‚¶Ñ ‚â° f1.
#b #f2 #L #U #H lapply (frees_fwd_isfin ‚Ä¶ H) elim H -f2 -L -U
[ #f2 #I #Hf2 #_ #f #K #H1 #T #H2 #f1 #H3
  lapply (coafter_fwd_isid2 ‚Ä¶ H3 ‚Ä¶ Hf2) -H3 // -Hf2 #Hf1
  elim (drops_inv_atom1 ‚Ä¶ H1) -H1 #H #_ destruct
  elim (lifts_fwd_atom2 ‚Ä¶ H2) -H2
  /2 width=3 by frees_atom/
| #f2 #I #L #W #s #_ #IH #Hf2 #f #Y #H1 #T #H2 #f1 #H3
  lapply (isfin_fwd_push ‚Ä¶ Hf2 ??) -Hf2 [3: |*: // ] #Hf2
  lapply (lifts_inv_sort2 ‚Ä¶ H2) -H2 #H destruct
  elim (coafter_inv_xxp ‚Ä¶ H3) -H3 [1,3: * |*: // ]
  [ #g #g1 #Hf2 #H #H0 destruct
    elim (drops_inv_skip1 ‚Ä¶ H1) -H1 #K #V #HLK #_ #H destruct
  | #g #Hf2 #H destruct
    lapply (drops_inv_drop1 ‚Ä¶ H1) -H1
  ] /3 width=4 by frees_sort/
| #f2 #I #L #W #_ #IH #Hf2 #f #Y #H1 #T #H2 #f1 #H3
  lapply (isfin_inv_next ‚Ä¶ Hf2 ??) -Hf2 [3: |*: // ] #Hf2
  elim (lifts_inv_lref2 ‚Ä¶ H2) -H2 #i #H2 #H destruct
  lapply (at_inv_xxp ‚Ä¶ H2 ?) -H2 // * #g #H #H0 destruct
  elim (drops_inv_skip1 ‚Ä¶ H1) -H1 #K #V #HLK #HVW #H destruct
  elim (coafter_inv_pxn ‚Ä¶ H3) -H3 [ |*: // ] #g1 #Hf2 #H destruct
  /3 width=4 by frees_zero/
| #f2 #I #L #W #j #_ #IH #Hf2 #f #Y #H1 #T #H2 #f1 #H3
  lapply (isfin_fwd_push ‚Ä¶ Hf2 ??) -Hf2 [3: |*: // ] #Hf2
  elim (lifts_inv_lref2 ‚Ä¶ H2) -H2 #x #H2 #H destruct
  elim (coafter_inv_xxp ‚Ä¶ H3) -H3 [1,3: * |*: // ]
  [ #g #g1 #Hf2 #H #H0 destruct
    elim (drops_inv_skip1 ‚Ä¶ H1) -H1 #K #V #HLK #HVW #H destruct
    elim (at_inv_xpn ‚Ä¶ H2) -H2 [ |*: // ] #j #Hg #H destruct
  | #g #Hf2 #H destruct
    lapply (drops_inv_drop1 ‚Ä¶ H1) -H1
    lapply (at_inv_xnn ‚Ä¶ H2 ????) -H2 [5: |*: // ]
  ] /4 width=4 by lifts_lref, frees_lref/
| #f2 #I #L #W #l #_ #IH #Hf2 #f #Y #H1 #T #H2 #f1 #H3
  lapply (isfin_fwd_push ‚Ä¶ Hf2 ??) -Hf2 [3: |*: // ] #Hf2
  lapply (lifts_inv_gref2 ‚Ä¶ H2) -H2 #H destruct
  elim (coafter_inv_xxp ‚Ä¶ H3) -H3 [1,3: * |*: // ]
  [ #g #g1 #Hf2 #H #H0 destruct
    elim (drops_inv_skip1 ‚Ä¶ H1) -H1 #K #V #HLK #_ #H destruct
  | #g #Hf2 #H destruct
    lapply (drops_inv_drop1 ‚Ä¶ H1) -H1
  ] /3 width=4 by frees_gref/
| #f2W #f2U #f2 #p #I #L #W #U #_ #_ #H1f2 #IHW #IHU #H2f2 #f #K #H1 #X #H2 #f1 #H3
  elim (sor_inv_isfin3 ‚Ä¶ H1f2) // #H1f2W #H
  lapply (isfin_inv_tl ‚Ä¶ H) -H
  elim (lifts_inv_bind2 ‚Ä¶ H2) -H2 #V #T #HVW #HTU #H destruct
  elim (coafter_inv_sor ‚Ä¶ H3 ‚Ä¶ H1f2) -H3 -H1f2 // #f1W #f1U #H2f2W #H
  elim (coafter_inv_tl0 ‚Ä¶ H) -H /4 width=5 by frees_bind, drops_skip/
| #f2W #f2U #f2 #I #L #W #U #_ #_ #H1f2 #IHW #IHU #H2f2 #f #K #H1 #X #H2 #f1 #H3
  elim (sor_inv_isfin3 ‚Ä¶ H1f2) //
  elim (lifts_inv_flat2 ‚Ä¶ H2) -H2 #V #T #HVW #HTU #H destruct
  elim (coafter_inv_sor ‚Ä¶ H3 ‚Ä¶ H1f2) -H3 -H1f2 /3 width=5 by frees_flat/
]
qed-.
