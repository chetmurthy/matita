(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/substitution/ldrop_ldrop.ma".
include "basic_2/substitution/csup.ma".

(* SUPCLOSURE ***************************************************************)

(* Advanced inversion lemmas ************************************************)

lemma csup_inv_ldrop: ∀L1,L2,T1,T2. ⦃L1, T1⦄ > ⦃L2, T2⦄ →
                      ∀J,W,j. ⇩[0, j] L1 ≡ L2.ⓑ{J}W → T1 = #j ∧ T2 = W.
#L1 #L2 #T1 #T2 * -L1 -L2 -T1 -T2
[ #I #L #K #V #i #HLKV #J #W #j #HLKW
  elim (ldrop_conf_div … HLKV … HLKW) -L /2 width=1/
| #a
| #a
]
#I #L #V #T #J #W #j #H
lapply (ldrop_pair2_fwd_cw … H W) -H #H
[2: lapply (transitive_lt (#{L,W}) … H) /2 width=1/ -H #H ]
elim (lt_refl_false … H)
qed-.

(* Main forward lemmas ******************************************************)

theorem csup_trans_fwd_refl: ∀L,L0,T1,T2. ⦃L, T1⦄ > ⦃L0, T2⦄ →
                             ∀T3. ⦃L0, T2⦄ > ⦃L, T3⦄ →
                             L = L0 ∨ ⦃L, T1⦄ > ⦃L, T3⦄.
#L #L0 #T1 #T2 * -L -L0 -T1 -T2 /2 width=1/
[ #I #L0 #K0 #V0 #i #HLK0 #T3 #H
  lapply (ldrop_pair2_fwd_cw … HLK0 T3) -HLK0 #H1
  lapply (csup_fwd_cw … H) -H #H2
  lapply (transitive_lt … H1 H2) -H1 -H2 #H
  elim (lt_refl_false … H)
| #a #I #L0 #V2 #T2 #T3 #HT23
  elim (csup_inv_ldrop … HT23 I V2 0 ?) -HT23 // #H1 #H2 destruct /2 width=1/
  qed-.
