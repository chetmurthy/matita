(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* include "basic_2/rt_equivalence/cpes.ma". *)
include "basic_2/dynamic/cnv_cpmuwe.ma".
(* include "basic_2/dynamic/lsubv.ma". *)

(* T-BOUND CONTEXT-SENSITIVE PARALLEL RT-EQUIVALENCE FOR TERMS **************)

(* Properties with restricted refinement for local environments *************)

lemma lsubr_cnuw_trans (h) (G):
      ‚àÄL2,T. ‚¶ÉG,L2‚¶Ñ ‚ä¢ ‚û°ùêçùêñ*[h] T ‚Üí ‚àÄL1. L1 ‚´É L2 ‚Üí ‚¶ÉG,L1‚¶Ñ ‚ä¢ ‚û°ùêçùêñ*[h] T.
#h #G #L2 #T1 #HT1 #L1 #HL12 #n #T2 #HT12 

lemma lsubv_cpmuwe_trans (h) (a) (n) (G):
      lsub_trans ‚Ä¶ (cpmuwe h n G) (lsubv h a G).
#h #a #n #G #L2 #T1 #T2 * #HT12 #HT2 #L1 #HL12
lapply (lsubv_cpms_trans ‚Ä¶ HT12 ‚Ä¶ HL12) -HT12 #HT12
@(cpmuwe_intro ‚Ä¶ HT12) -HT12

lemma cnv_cpmuwe_cpms_conf (h) (a) (G) (L):
      ‚àÄT. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ![h,a] ‚Üí ‚àÄn1,T1. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ‚û°*[n1,h] T1 ‚Üí
      ‚àÄn2,T2. ‚¶ÉG,L‚¶Ñ ‚ä¢ T ‚û°*ùêçùêñ*[h,n2] T2 ‚Üí
      ‚àÉ‚àÉT0. ‚¶ÉG,L‚¶Ñ ‚ä¢ T1 ‚û°*[n2-n1,h] T0 & T0 ‚âÖ T2 & ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚û°ùêçùêñ*[h] T2.
#h #a #G #L #T0 #HT0 #n1 #T1 #HT01 #n2 #T2 * #HT02 #HT2
elim (cnv_cpms_conf ‚Ä¶ HT0 ‚Ä¶ HT01 ‚Ä¶ HT02) -T0 #T0 #HT10 #HT20
lapply (HT2 ‚Ä¶ HT20) -HT20 #HT20
/3 width=3 by tweq_sym, ex3_intro/
qed-.

lemma lsubv_cpms_abst_conf_cnv (h) (a) (G) (L1) (T0):
      ‚àÄn1,p1,W1,T1. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T0 ‚û°*[n1,h] ‚ìõ{p1}W1.T1 ‚Üí
      ‚àÄL2. ‚¶ÉG,L2‚¶Ñ ‚ä¢ T0 ![h,a] ‚Üí G ‚ä¢ L1 ‚´É![h,a] L2 ‚Üí
      ‚àÉ‚àÉn2,p2,W2,T2. ‚¶ÉG,L2‚¶Ñ ‚ä¢ T0 ‚û°*[n2,h] ‚ìõ{p2}W2.T2.
#h #a #G #L1 #T0 #n1 #p1 #W1 #T1 #HT01 #L2 #HT0 #HL12
elim (cnv_R_cpmuwe_total ‚Ä¶ HT0) #n2 * #X2 #HT02
elim (abst_dec X2) [ * | #HnX2 ]
[ #p2 #W2 #T2 #H destruct
  /3 width=5 by cpmuwe_fwd_cpms, ex1_4_intro/
| lapply (lsubv_cnv_trans ‚Ä¶ HT0 ‚Ä¶ HL12) -HT0 #HT0
  lapply (lsubv_cpmuwe_trans ‚Ä¶ HT02 ‚Ä¶ HL12) -HT02 -HL12 #HT02
  elim (cnv_cpmuwe_cpms_conf ‚Ä¶ HT0 ‚Ä¶ HT01 ‚Ä¶ HT02) -HT0 -HT01 -HT02 #U2 #H1 #H2 #_ 
  elim (cpms_inv_abst_sn ‚Ä¶ H1) -H1 #W2 #T2 #_ #_ #H destruct
  elim (tweq_inv_abst_sn ‚Ä¶ H2) -W2 -T2 #W2 #T2 #H destruct
  elim (HnX2 p1 W2 T2) -HnX2 //
]
qed-.
