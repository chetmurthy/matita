(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/notation/relations/lrsubeq_4.ma".
include "basic_2/substitution/drop.ma".

(* LOCAL ENVIRONMENT REFINEMENT FOR EXTENDED SUBSTITUTION *******************)

inductive lsuby: relation4 ynat ynat lenv lenv ≝
| lsuby_atom: ∀L,l,m. lsuby l m L (⋆)
| lsuby_zero: ∀I1,I2,L1,L2,V1,V2.
              lsuby 0 0 L1 L2 → lsuby 0 0 (L1.ⓑ{I1}V1) (L2.ⓑ{I2}V2)
| lsuby_pair: ∀I1,I2,L1,L2,V,m. lsuby 0 m L1 L2 →
              lsuby 0 (⫯m) (L1.ⓑ{I1}V) (L2.ⓑ{I2}V)
| lsuby_succ: ∀I1,I2,L1,L2,V1,V2,l,m.
              lsuby l m L1 L2 → lsuby (⫯l) m (L1.ⓑ{I1}V1) (L2.ⓑ{I2}V2)
.

interpretation
  "local environment refinement (extended substitution)"
  'LRSubEq L1 l m L2 = (lsuby l m L1 L2).

(* Basic properties *********************************************************)

lemma lsuby_pair_lt: ∀I1,I2,L1,L2,V,m. L1 ⊆[0, ⫰m] L2 → 0 < m →
                     L1.ⓑ{I1}V ⊆[0, m] L2.ⓑ{I2}V.
#I1 #I2 #L1 #L2 #V #m #HL12 #Hm <(ylt_inv_O1 … Hm) /2 width=1 by lsuby_pair/
qed.

lemma lsuby_succ_lt: ∀I1,I2,L1,L2,V1,V2,l,m. L1 ⊆[⫰l, m] L2 → 0 < l →
                     L1.ⓑ{I1}V1 ⊆[l, m] L2. ⓑ{I2}V2.
#I1 #I2 #L1 #L2 #V1 #V2 #l #m #HL12 #Hl <(ylt_inv_O1 … Hl) /2 width=1 by lsuby_succ/
qed.

lemma lsuby_pair_O_Y: ∀L1,L2. L1 ⊆[0, ∞] L2 →
                      ∀I1,I2,V. L1.ⓑ{I1}V ⊆[0,∞] L2.ⓑ{I2}V.
#L1 #L2 #HL12 #I1 #I2 #V lapply (lsuby_pair I1 I2 … V … HL12) -HL12 //
qed.

lemma lsuby_refl: ∀L,l,m. L ⊆[l, m] L.
#L elim L -L //
#L #I #V #IHL #l elim (ynat_cases … l) [| * #x ]
#Hl destruct /2 width=1 by lsuby_succ/
#m elim (ynat_cases … m) [| * #x ]
#Hm destruct /2 width=1 by lsuby_zero, lsuby_pair/
qed.

lemma lsuby_O2: ∀L2,L1,l. |L2| ≤ |L1| → L1 ⊆[l, 0] L2.
#L2 elim L2 -L2 // #L2 #I2 #V2 #IHL2 *
[ #l #H elim (ylt_yle_false … H) -H //
| #L1 #I1 #V1 #l
 #H lapply (yle_inv_succ … H) -H #HL12
 elim (ynat_cases l) /3 width=1 by lsuby_zero/
 * /3 width=1 by lsuby_succ/
]
qed.

lemma lsuby_sym: ∀l,m,L1,L2. L1 ⊆[l, m] L2 → |L1| = |L2| → L2 ⊆[l, m] L1.
#l #m #L1 #L2 #H elim H -l -m -L1 -L2
[ #L1 #l #m #H >(length_inv_zero_dx … H) -L1 //
| /2 width=1 by lsuby_O2/
| #I1 #I2 #L1 #L2 #V #m #_ #IHL12 #H lapply (ysucc_inv_inj … H) -H
  /3 width=1 by lsuby_pair/
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #IHL12 #H lapply (ysucc_inv_inj … H) -H
  /3 width=1 by lsuby_succ/
]
qed-.

(* Basic inversion lemmas ***************************************************)

fact lsuby_inv_atom1_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 → L1 = ⋆ → L2 = ⋆.
#L1 #L2 #l #m * -L1 -L2 -l -m //
[ #I1 #I2 #L1 #L2 #V1 #V2 #_ #H destruct
| #I1 #I2 #L1 #L2 #V #m #_ #H destruct
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #H destruct
]
qed-.

lemma lsuby_inv_atom1: ∀L2,l,m. ⋆ ⊆[l, m] L2 → L2 = ⋆.
/2 width=5 by lsuby_inv_atom1_aux/ qed-.

fact lsuby_inv_zero1_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J1,K1,W1. L1 = K1.ⓑ{J1}W1 → l = 0 → m = 0 →
                          L2 = ⋆ ∨
                          ∃∃J2,K2,W2. K1 ⊆[0, 0] K2 & L2 = K2.ⓑ{J2}W2.
#L1 #L2 #l #m * -L1 -L2 -l -m /2 width=1 by or_introl/
[ #I1 #I2 #L1 #L2 #V1 #V2 #HL12 #J1 #K1 #W1 #H #_ #_ destruct
  /3 width=5 by ex2_3_intro, or_intror/
| #I1 #I2 #L1 #L2 #V #m #_ #J1 #K1 #W1 #_ #_ #H
  elim (ysucc_inv_O_dx … H)
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #J1 #K1 #W1 #_ #H
  elim (ysucc_inv_O_dx … H)
]
qed-.

lemma lsuby_inv_zero1: ∀I1,K1,L2,V1. K1.ⓑ{I1}V1 ⊆[0, 0] L2 →
                       L2 = ⋆ ∨
                       ∃∃I2,K2,V2. K1 ⊆[0, 0] K2 & L2 = K2.ⓑ{I2}V2.
/2 width=9 by lsuby_inv_zero1_aux/ qed-.

fact lsuby_inv_pair1_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J1,K1,W. L1 = K1.ⓑ{J1}W → l = 0 → 0 < m →
                          L2 = ⋆ ∨
                          ∃∃J2,K2. K1 ⊆[0, ⫰m] K2 & L2 = K2.ⓑ{J2}W.
#L1 #L2 #l #m * -L1 -L2 -l -m /2 width=1 by or_introl/
[ #I1 #I2 #L1 #L2 #V1 #V2 #_ #J1 #K1 #W #_ #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V #m #HL12 #J1 #K1 #W #H #_ #_ destruct
  /3 width=4 by ex2_2_intro, or_intror/
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #J1 #K1 #W #_ #H
  elim (ysucc_inv_O_dx … H)
]
qed-.

lemma lsuby_inv_pair1: ∀I1,K1,L2,V,m. K1.ⓑ{I1}V ⊆[0, m] L2 → 0 < m →
                       L2 = ⋆ ∨
                       ∃∃I2,K2. K1 ⊆[0, ⫰m] K2 & L2 = K2.ⓑ{I2}V.
/2 width=6 by lsuby_inv_pair1_aux/ qed-.

fact lsuby_inv_succ1_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J1,K1,W1. L1 = K1.ⓑ{J1}W1 → 0 < l →
                          L2 = ⋆ ∨
                          ∃∃J2,K2,W2. K1 ⊆[⫰l, m] K2 & L2 = K2.ⓑ{J2}W2.
#L1 #L2 #l #m * -L1 -L2 -l -m /2 width=1 by or_introl/
[ #I1 #I2 #L1 #L2 #V1 #V2 #_ #J1 #K1 #W1 #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V #m #_ #J1 #K1 #W1 #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #HL12 #J1 #K1 #W1 #H #_ destruct
  /3 width=5 by ex2_3_intro, or_intror/
]
qed-.

lemma lsuby_inv_succ1: ∀I1,K1,L2,V1,l,m. K1.ⓑ{I1}V1 ⊆[l, m] L2 → 0 < l →
                       L2 = ⋆ ∨
                       ∃∃I2,K2,V2. K1 ⊆[⫰l, m] K2 & L2 = K2.ⓑ{I2}V2.
/2 width=5 by lsuby_inv_succ1_aux/ qed-.

fact lsuby_inv_zero2_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J2,K2,W2. L2 = K2.ⓑ{J2}W2 → l = 0 → m = 0 →
                          ∃∃J1,K1,W1. K1 ⊆[0, 0] K2 & L1 = K1.ⓑ{J1}W1.
#L1 #L2 #l #m * -L1 -L2 -l -m
[ #L1 #l #m #J2 #K2 #W1 #H destruct
| #I1 #I2 #L1 #L2 #V1 #V2 #HL12 #J2 #K2 #W2 #H #_ #_ destruct
  /2 width=5 by ex2_3_intro/
| #I1 #I2 #L1 #L2 #V #m #_ #J2 #K2 #W2 #_ #_ #H
  elim (ysucc_inv_O_dx … H)
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #J2 #K2 #W2 #_ #H
  elim (ysucc_inv_O_dx … H)
]
qed-.

lemma lsuby_inv_zero2: ∀I2,K2,L1,V2. L1 ⊆[0, 0] K2.ⓑ{I2}V2 →
                       ∃∃I1,K1,V1. K1 ⊆[0, 0] K2 & L1 = K1.ⓑ{I1}V1.
/2 width=9 by lsuby_inv_zero2_aux/ qed-.

fact lsuby_inv_pair2_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J2,K2,W. L2 = K2.ⓑ{J2}W → l = 0 → 0 < m →
                          ∃∃J1,K1. K1 ⊆[0, ⫰m] K2 & L1 = K1.ⓑ{J1}W.
#L1 #L2 #l #m * -L1 -L2 -l -m
[ #L1 #l #m #J2 #K2 #W #H destruct
| #I1 #I2 #L1 #L2 #V1 #V2 #_ #J2 #K2 #W #_ #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V #m #HL12 #J2 #K2 #W #H #_ #_ destruct
  /2 width=4 by ex2_2_intro/
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #J2 #K2 #W #_ #H
  elim (ysucc_inv_O_dx … H)
]
qed-.

lemma lsuby_inv_pair2: ∀I2,K2,L1,V,m. L1 ⊆[0, m] K2.ⓑ{I2}V → 0 < m →
                       ∃∃I1,K1. K1 ⊆[0, ⫰m] K2 & L1 = K1.ⓑ{I1}V.
/2 width=6 by lsuby_inv_pair2_aux/ qed-.

fact lsuby_inv_succ2_aux: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                          ∀J2,K2,W2. L2 = K2.ⓑ{J2}W2 → 0 < l →
                          ∃∃J1,K1,W1. K1 ⊆[⫰l, m] K2 & L1 = K1.ⓑ{J1}W1.
#L1 #L2 #l #m * -L1 -L2 -l -m
[ #L1 #l #m #J2 #K2 #W2 #H destruct
| #I1 #I2 #L1 #L2 #V1 #V2 #_ #J2 #K2 #W2 #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V #m #_ #J2 #K1 #W2 #_ #H
  elim (ylt_yle_false … H) //
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #HL12 #J2 #K2 #W2 #H #_ destruct
  /2 width=5 by ex2_3_intro/
]
qed-.

lemma lsuby_inv_succ2: ∀I2,K2,L1,V2,l,m. L1 ⊆[l, m] K2.ⓑ{I2}V2 → 0 < l →
                       ∃∃I1,K1,V1. K1 ⊆[⫰l, m] K2 & L1 = K1.ⓑ{I1}V1.
/2 width=5 by lsuby_inv_succ2_aux/ qed-.

(* Basic forward lemmas *****************************************************)

lemma lsuby_fwd_length: ∀L1,L2,l,m. L1 ⊆[l, m] L2 → |L2| ≤ |L1|.
#L1 #L2 #l #m #H elim H -L1 -L2 -l -m /2 width=1 by yle_succ/
qed-.

(* Properties on basic slicing **********************************************)

lemma lsuby_drop_trans_be: ∀L1,L2,l,m. L1 ⊆[l, m] L2 →
                           ∀I2,K2,W,s,i. ⬇[s, 0, i] L2 ≡ K2.ⓑ{I2}W →
                           l ≤ i → ∀m0. i + ⫯m0 = l + m →
                           ∃∃I1,K1. K1 ⊆[0, m0] K2 & ⬇[s, 0, i] L1 ≡ K1.ⓑ{I1}W.
#L1 #L2 #l #m #H elim H -L1 -L2 -l -m
[ #L1 #l #m #J2 #K2 #W #s #i #H
  elim (drop_inv_atom1 … H) -H #H destruct
| #I1 #I2 #L1 #L2 #V1 #V2 #_ #_ #J2 #K2 #W #s #i #_ #_ #m0
  >yplus_O2 >yplus_succ2 #H elim (ysucc_inv_O_dx … H)
| #I1 #I2 #L1 #L2 #V #m #HL12 #IHL12 #J2 #K2 #W #s #i #H #_ #m0
  >yplus_succ2 >yplus_succ2 #H0 lapply (ysucc_inv_inj … H0) -H0
  elim (drop_inv_O1_pair1 … H) -H * #Hi #HLK1 [ -IHL12 | -HL12 ]
  [ destruct -I2 /2 width=4 by drop_pair, ex2_2_intro/
  | lapply (ylt_inv_O1 … Hi)
    #H <H -H <yplus_succ_swap #Him elim (IHL12 … HLK1 … Him) -IHL12 -HLK1 -Him
    /3 width=4 by drop_drop_lt, ex2_2_intro/
  ]
| #I1 #I2 #L1 #L2 #V1 #V2 #l #m #_ #IHL12 #J2 #K2 #W #s #i #HLK2 #Hli #m0
  elim (yle_inv_succ1 … Hli) -Hli #Hli #Hi
  lapply (drop_inv_drop1_lt … HLK2 ?) -HLK2 /2 width=1 by ylt_O1/ #HLK2
  >yplus_succ1 >yplus_succ2 #H lapply (ysucc_inv_inj … H) -H
  <Hi <yplus_succ_swap #H elim (IHL12 … HLK2 … H) -IHL12 -HLK2 -H
  /3 width=4 by drop_drop, ex2_2_intro/
]
qed-.
