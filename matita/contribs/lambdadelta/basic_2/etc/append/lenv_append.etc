lemma length_inv_pos_dx_append: ∀d,L. |L| = d + 1 →
                                ∃∃I,K,V. |K| = d & L = ⋆.ⓑ{I}V @@ K.
#d @(nat_ind_plus … d) -d
[ #L #H
  elim (length_inv_pos_dx … H) -H #I #K #V #H
  >(length_inv_zero_dx … H) -H #H destruct
  @ex2_3_intro [4: /2 width=2/ |5: // |1,2,3: skip ] (**) (* /3/ does not work *)
| #d #IHd #L #H
  elim (length_inv_pos_dx … H) -H #I #K #V #H
  elim (IHd … H) -IHd -H #I0 #K0 #V0 #H1 #H2 #H3 destruct
  @(ex2_3_intro … (K0.ⓑ{I}V)) //
]
qed-.

lemma length_inv_pos_sn_append: ∀d,L. 1 + d = |L| →
                                ∃∃I,K,V. d = |K| & L = ⋆. ⓑ{I}V @@ K.
#d >commutative_plus @(nat_ind_plus … d) -d
[ #L #H elim (length_inv_pos_sn … H) -H #I #K #V #H1 #H2 destruct
  >(length_inv_zero_sn … H1) -K
  @(ex2_3_intro … (⋆)) // (**) (* explicit constructor *)
| #d #IHd #L #H elim (length_inv_pos_sn … H) -H #I #K #V #H1 #H2 destruct
  >H1 in IHd; -H1 #IHd
  elim (IHd K) -IHd // #J #L #W #H1 #H2 destruct
  @(ex2_3_intro … (L.ⓑ{I}V)) // (**) (* explicit constructor *)
  >append_length /2 width=1/
]
qed-.
