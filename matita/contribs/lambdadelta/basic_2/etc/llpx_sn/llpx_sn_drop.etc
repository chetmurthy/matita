(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/substitution/drop_drop.ma".
include "basic_2/multiple/llpx_sn_lreq.ma".

(* LAZY SN POINTWISE EXTENSION OF A CONTEXT-SENSITIVE REALTION FOR TERMS ****)

(* Advanced forward lemmas **************************************************)

lemma llpx_sn_fwd_lref_dx: ∀R,L1,L2,l,i. llpx_sn R l (#i) L1 L2 →
                           ∀I,K2,V2. ⬇[i] L2 ≡ K2.ⓑ{I}V2 →
                           i < l ∨
                           ∃∃K1,V1. ⬇[i] L1 ≡ K1.ⓑ{I}V1 & llpx_sn R 0 V1 K1 K2 &
                                    R K1 V1 V2 & l ≤ i.
#R #L1 #L2 #l #i #H #I #K2 #V2 #HLK2 elim (llpx_sn_fwd_lref … H) -H [ * || * ]
[ #_ #H elim (lt_refl_false i)
  lapply (drop_fwd_length_lt2 … HLK2) -HLK2
  /2 width=3 by lt_to_le_to_lt/ (**) (* full auto too slow *)
| /2 width=1 by or_introl/
| #I #K11 #K22 #V11 #V22 #HLK11 #HLK22 #HK12 #HV12 #Hli
  lapply (drop_mono … HLK22 … HLK2) -L2 #H destruct
  /3 width=5 by ex4_2_intro, or_intror/
]
qed-.

lemma llpx_sn_fwd_lref_sn: ∀R,L1,L2,l,i. llpx_sn R l (#i) L1 L2 →
                           ∀I,K1,V1. ⬇[i] L1 ≡ K1.ⓑ{I}V1 →
                           i < l ∨
                           ∃∃K2,V2. ⬇[i] L2 ≡ K2.ⓑ{I}V2 & llpx_sn R 0 V1 K1 K2 &
                                    R K1 V1 V2 & l ≤ i.
#R #L1 #L2 #l #i #H #I #K1 #V1 #HLK1 elim (llpx_sn_fwd_lref … H) -H [ * || * ]
[ #H #_ elim (lt_refl_false i)
  lapply (drop_fwd_length_lt2 … HLK1) -HLK1
  /2 width=3 by lt_to_le_to_lt/ (**) (* full auto too slow *)
| /2 width=1 by or_introl/
| #I #K11 #K22 #V11 #V22 #HLK11 #HLK22 #HK12 #HV12 #Hli
  lapply (drop_mono … HLK11 … HLK1) -L1 #H destruct
  /3 width=5 by ex4_2_intro, or_intror/
]
qed-.

(* Advanced inversion lemmas ************************************************)

lemma llpx_sn_inv_lref_ge_dx: ∀R,L1,L2,l,i. llpx_sn R l (#i) L1 L2 → l ≤ i →
                              ∀I,K2,V2. ⬇[i] L2 ≡ K2.ⓑ{I}V2 →
                              ∃∃K1,V1. ⬇[i] L1 ≡ K1.ⓑ{I}V1 &
                                       llpx_sn R 0 V1 K1 K2 & R K1 V1 V2.
#R #L1 #L2 #l #i #H #Hli #I #K2 #V2 #HLK2 elim (llpx_sn_fwd_lref_dx … H … HLK2) -L2
[ #H elim (ylt_yle_false … H Hli)
| * /2 width=5 by ex3_2_intro/
]
qed-.

lemma llpx_sn_inv_lref_ge_sn: ∀R,L1,L2,l,i. llpx_sn R l (#i) L1 L2 → l ≤ i →
                              ∀I,K1,V1. ⬇[i] L1 ≡ K1.ⓑ{I}V1 →
                              ∃∃K2,V2. ⬇[i] L2 ≡ K2.ⓑ{I}V2 &
                                       llpx_sn R 0 V1 K1 K2 & R K1 V1 V2.
#R #L1 #L2 #l #i #H #Hli #I #K1 #V1 #HLK1 elim (llpx_sn_fwd_lref_sn … H … HLK1) -L1
[ #H elim (ylt_yle_false … H Hli)
| * /2 width=5 by ex3_2_intro/
]
qed-.

lemma llpx_sn_inv_lref_ge_bi: ∀R,L1,L2,l,i. llpx_sn R l (#i) L1 L2 → l ≤ i →
                              ∀I1,I2,K1,K2,V1,V2.
                              ⬇[i] L1 ≡ K1.ⓑ{I1}V1 → ⬇[i] L2 ≡ K2.ⓑ{I2}V2 →
                              ∧∧ I1 = I2 & llpx_sn R 0 V1 K1 K2 & R K1 V1 V2.
#R #L1 #L2 #l #i #HL12 #Hli #I1 #I2 #K1 #K2 #V1 #V2 #HLK1 #HLK2
elim (llpx_sn_inv_lref_ge_sn … HL12 … HLK1) // -L1 -l
#J #Y #HY lapply (drop_mono … HY … HLK2) -L2 -i #H destruct /2 width=1 by and3_intro/
qed-.

fact llpx_sn_inv_S_aux: ∀R,L1,L2,T,l0. llpx_sn R l0 T L1 L2 → ∀l. l0 = l + 1 →
                        ∀K1,K2,I,V1,V2. ⬇[l] L1 ≡ K1.ⓑ{I}V1 → ⬇[l] L2 ≡ K2.ⓑ{I}V2 →
                        llpx_sn R 0 V1 K1 K2 → R K1 V1 V2 → llpx_sn R l T L1 L2.
#R #L1 #L2 #T #l0 #H elim H -L1 -L2 -T -l0
/2 width=1 by llpx_sn_gref, llpx_sn_free, llpx_sn_sort/
[ #L1 #L2 #l0 #i #HL12 #Hil #l #H #K1 #K2 #I #V1 #V2 #HLK1 #HLK2 #HK12 #HV12 destruct
  elim (yle_split_eq i l) /2 width=1 by llpx_sn_skip, ylt_fwd_succ2/ -HL12 -Hil
  #H destruct /2 width=9 by llpx_sn_lref/
| #I #L1 #L2 #K11 #K22 #V1 #V2 #l0 #i #Hl0i #HLK11 #HLK22 #HK12 #HV12 #_ #l #H #K1 #K2 #J #W1 #W2 #_ #_ #_ #_ destruct
  /3 width=9 by llpx_sn_lref, yle_pred_sn/
| #a #I #L1 #L2 #V #T #l0 #_ #_ #IHV #IHT #l #H #K1 #K2 #J #W1 #W2 #HLK1 #HLK2 #HK12 #HW12 destruct
  /4 width=9 by llpx_sn_bind, drop_drop/
| #I #L1 #L2 #V #T #l0 #_ #_ #IHV #IHT #l #H #K1 #K2 #J #W1 #W2 #HLK1 #HLK2 #HK12 #HW12 destruct
  /3 width=9 by llpx_sn_flat/
]
qed-.

lemma llpx_sn_inv_S: ∀R,L1,L2,T,l. llpx_sn R (l + 1) T L1 L2 →
                     ∀K1,K2,I,V1,V2. ⬇[l] L1 ≡ K1.ⓑ{I}V1 → ⬇[l] L2 ≡ K2.ⓑ{I}V2 →
                     llpx_sn R 0 V1 K1 K2 → R K1 V1 V2 → llpx_sn R l T L1 L2.
/2 width=9 by llpx_sn_inv_S_aux/ qed-.

lemma llpx_sn_inv_bind_O: ∀R. (∀L. reflexive … (R L)) →
                          ∀a,I,L1,L2,V,T. llpx_sn R 0 (ⓑ{a,I}V.T) L1 L2 →
                          llpx_sn R 0 V L1 L2 ∧ llpx_sn R 0 T (L1.ⓑ{I}V) (L2.ⓑ{I}V).
#R #HR #a #I #L1 #L2 #V #T #H elim (llpx_sn_inv_bind … H) -H
/3 width=9 by drop_pair, conj, llpx_sn_inv_S/
qed-.

(* More advanced forward lemmas *********************************************)

lemma llpx_sn_fwd_bind_O_dx: ∀R. (∀L. reflexive … (R L)) →
                             ∀a,I,L1,L2,V,T. llpx_sn R 0 (ⓑ{a,I}V.T) L1 L2 →
                             llpx_sn R 0 T (L1.ⓑ{I}V) (L2.ⓑ{I}V).
#R #HR #a #I #L1 #L2 #V #T #H elim (llpx_sn_inv_bind_O … H) -H //
qed-.

(* Advanced properties ******************************************************)

lemma llpx_sn_bind_repl_O: ∀R,I,L1,L2,V1,V2,T. llpx_sn R 0 T (L1.ⓑ{I}V1) (L2.ⓑ{I}V2) →
                           ∀J,W1,W2. llpx_sn R 0 W1 L1 L2 → R L1 W1 W2 → llpx_sn R 0 T (L1.ⓑ{J}W1) (L2.ⓑ{J}W2).
/3 width=9 by llpx_sn_bind_repl_SO, llpx_sn_inv_S/ qed-.

lemma llpx_sn_dec: ∀R. (∀L,T1,T2. Decidable (R L T1 T2)) →
                   ∀T,L1,L2,l. Decidable (llpx_sn R l T L1 L2).
#R #HR #T #L1 @(f2_ind … rfw … L1 T) -L1 -T
#x #IH #L1 * *
[ #s #Hx #L2 elim (eq_nat_dec (|L1|) (|L2|)) /3 width=1 by or_introl, llpx_sn_sort/
| #i #Hx #L2 elim (eq_nat_dec (|L1|) (|L2|))
  [ #HL12 #l elim (ylt_split i l) /3 width=1 by llpx_sn_skip, or_introl/
    #Hli elim (lt_or_ge i (|L1|)) #HiL1
    elim (lt_or_ge i (|L2|)) #HiL2 /3 width=1 by or_introl, llpx_sn_free/
    elim (drop_O1_lt (Ⓕ) … HiL2) #I2 #K2 #V2 #HLK2
    elim (drop_O1_lt (Ⓕ) … HiL1) #I1 #K1 #V1 #HLK1
    elim (eq_bind2_dec I2 I1)
    [ #H2 elim (HR K1 V1 V2) -HR
      [ #H3 elim (IH K1 V1 … K2 0) destruct
        /3 width=9 by llpx_sn_lref, drop_fwd_rfw, or_introl/
      ]
    ]
    -IH #H3 @or_intror
    #H elim (llpx_sn_fwd_lref … H) -H [1,3,4,6,7,9: * ]
    [1,3,5: /3 width=4 by lt_to_le_to_lt, lt_refl_false/
    |7,8,9: /2 width=4 by ylt_yle_false/
    ]
    #Z #Y1 #Y2 #X1 #X2 #HLY1 #HLY2 #HY12 #HX12
    lapply (drop_mono … HLY1 … HLK1) -HLY1 -HLK1
    lapply (drop_mono … HLY2 … HLK2) -HLY2 -HLK2
    #H #H0 destruct /2 width=1 by/
  ]
| #p #Hx #L2 elim (eq_nat_dec (|L1|) (|L2|)) /3 width=1 by or_introl, llpx_sn_gref/
| #a #I #V #T #Hx #L2 #l destruct
  elim (IH L1 V … L2 l) /2 width=1 by/
  elim (IH (L1.ⓑ{I}V) T … (L2.ⓑ{I}V) (⫯l)) -IH /3 width=1 by or_introl, llpx_sn_bind/
  #H1 #H2 @or_intror
  #H elim (llpx_sn_inv_bind … H) -H /2 width=1 by/
| #I #V #T #Hx #L2 #l destruct
  elim (IH L1 V … L2 l) /2 width=1 by/
  elim (IH L1 T … L2 l) -IH /3 width=1 by or_introl, llpx_sn_flat/
  #H1 #H2 @or_intror
  #H elim (llpx_sn_inv_flat … H) -H /2 width=1 by/
]
-x /4 width=4 by llpx_sn_fwd_length, or_intror/
qed-.

(* Inversion lemmas on negated lazy pointwise extension *********************)

lemma nllpx_sn_inv_bind: ∀R. (∀L,T1,T2. Decidable (R L T1 T2)) →
                         ∀a,I,L1,L2,V,T,l. (llpx_sn R l (ⓑ{a,I}V.T) L1 L2 → ⊥) →
                         (llpx_sn R l V L1 L2 → ⊥) ∨ (llpx_sn R (⫯l) T (L1.ⓑ{I}V) (L2.ⓑ{I}V) → ⊥).
#R #HR #a #I #L1 #L2 #V #T #l #H elim (llpx_sn_dec … HR V L1 L2 l)
/4 width=1 by llpx_sn_bind, or_intror, or_introl/
qed-.

lemma nllpx_sn_inv_flat: ∀R. (∀L,T1,T2. Decidable (R L T1 T2)) →
                         ∀I,L1,L2,V,T,l. (llpx_sn R l (ⓕ{I}V.T) L1 L2 → ⊥) →
                         (llpx_sn R l V L1 L2 → ⊥) ∨ (llpx_sn R l T L1 L2 → ⊥).
#R #HR #I #L1 #L2 #V #T #l #H elim (llpx_sn_dec … HR V L1 L2 l)
/4 width=1 by llpx_sn_flat, or_intror, or_introl/
qed-.

lemma nllpx_sn_inv_bind_O: ∀R. (∀L,T1,T2. Decidable (R L T1 T2)) →
                           ∀a,I,L1,L2,V,T. (llpx_sn R 0 (ⓑ{a,I}V.T) L1 L2 → ⊥) →
                           (llpx_sn R 0 V L1 L2 → ⊥) ∨ (llpx_sn R 0 T (L1.ⓑ{I}V) (L2.ⓑ{I}V) → ⊥).
#R #HR #a #I #L1 #L2 #V #T #H elim (llpx_sn_dec … HR V L1 L2 0)
/4 width=1 by llpx_sn_bind_O, or_intror, or_introl/
qed-.
