(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/rt_transition/cpr_drops_basic.ma".
include "basic_2/dynamic/nta_ind.ma".

lemma lpr_cpr_conf_cpc_sym (h) (G) (L1):
      ‚àÄT1,T2:term. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 ‚û°[h] T2 ‚Üí
      ‚àÄL2. ‚¶ÉG,L1‚¶Ñ ‚ä¢ ‚û°[h] L2 ‚Üí ‚¶ÉG,L2‚¶Ñ ‚ä¢ T2 ‚¨å*[h] T1.
#h #G #L1 #T1 #T2 #HT12 #L2 #HL12
elim (lpr_cpr_conf_dx ‚Ä¶ HT12 ‚Ä¶ HL12) -L1 #T #HT1 #HT2
/3 width=3 by cprs_div, cpm_cpms/
qed.

(* NATIVE TYPE ASSIGNMENT FOR TERMS *****************************************)

definition IH_nta (h) (G) (L1) (T1) ‚âù
           ‚àÄU. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 :[h,ùüê] U ‚Üí ‚àÄT2. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 ‚û°[h] T2 ‚Üí
           ‚àÄL2. ‚¶ÉG,L1‚¶Ñ ‚ä¢ ‚û°[h] L2 ‚Üí ‚¶ÉG,L2‚¶Ñ ‚ä¢ T2 :[h,ùüê] U.

definition IH_cnv (h) (G) (L1) (T1) ‚âù
           (‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 ![h,ùüê]) ‚Üí ‚àÄT2. ‚¶ÉG,L1‚¶Ñ ‚ä¢ T1 ‚û°[h] T2 ‚Üí
           ‚àÄL2. ‚¶ÉG,L1‚¶Ñ ‚ä¢ ‚û°[h] L2 ‚Üí ‚¶ÉG,L2‚¶Ñ ‚ä¢ T2 ![h,ùüê].

(* Specific proofs for restricted applicability *****************************)

lemma nta_to_cnv (h) (G) (L1) (T1):
      IH_nta h G L1 T1 ‚Üí IH_cnv h G L1 T1.
#h #G #L1 #T1 #H #HT1 #T2 #HT12 #L2 #HL12
elim (cnv_nta_sn ‚Ä¶ HT1) -HT1 #U1 #HTU1
/3 width=2 by nta_fwd_cnv_sn/
qed-.

(* Note preservation of type without big-tree theorem *)
lemma nta_cpr_conf_lpr (h) (G) (L1) (T1): IH_nta h G L1 T1.
#h #G #L1 #T1 @(fqup_wf_ind (‚ìâ) ‚Ä¶ G L1 T1) -G -L1 -T1
#G0 #L0 #T0 #IH #U
@(insert_eq_0 ‚Ä¶ T0) #T1
@(insert_eq_0 ‚Ä¶ L0) #L1
@(insert_eq_0 ‚Ä¶ G0) #G
#H @(nta_ind_rest_cnv ‚Ä¶ H) -G -L1 -T1 -U
[ #G #L1 #s #HG0 #HL0 #HT0 #X #HX #L2 #HL12 destruct -IH
  lapply (cpr_inv_sort1 ‚Ä¶ HX) -HX #H destruct //
| #G #K1 #V1 #W1 #U #HVW1 #HW1U #_ #HG0 #HL0 #HT0 #X #HX #Y #HY destruct
  elim (lpr_inv_pair_sn ‚Ä¶ HY) -HY #K2 #V2 #HK12 #HV12 #H destruct
  elim (cpr_inv_zero1 ‚Ä¶ HX) -HX
  [ #H destruct
    /4 width=6 by nta_ldef, fqu_fqup, fqu_lref_O/
  | * #Y1 #X1 #X2 #HX12 #HX2 #H destruct -HV12
    @(nta_lifts_bi ‚Ä¶ (‚ìâ) ‚Ä¶ HX2 ‚Ä¶ HW1U) -X -U
    /4 width=6 by drops_refl, drops_drop, fqu_fqup, fqu_lref_O/
  ]
| #G #K1 #W1 #V1 #HW1 #HWV1 #HG0 #HL0 #HT0 #X #HX #Y #HY destruct
  elim (lpr_inv_pair_sn ‚Ä¶ HY) -HY #K2 #W2 #HK12 #HW12 #H destruct
  elim (cpr_inv_zero1 ‚Ä¶ HX) -HX
  [ #H destruct
    lapply (nta_to_cnv ‚Ä¶ HW1 ‚Ä¶ W1 ‚Ä¶ HK12)
    [1,2: /3 width=1 by fqu_fqup, fqu_lref_O/ ] #H
    lapply (cnv_lifts ‚Ä¶ H (‚ìâ) ‚Ä¶ (K2.‚ìõW2) ‚Ä¶ HWV1) -H
    [ /3 width=1 by drops_refl, drops_drop/ ] #HV1
    elim (cpm_lifts_sn ‚Ä¶ HW12 (‚ìâ) ‚Ä¶ (K1.‚ìõW2) ‚Ä¶ HWV1) -HWV1
    [2: /3 width=1 by drops_refl, drops_drop/ ] #V2 #HWV2 #HV12
    lapply (nta_to_cnv ‚Ä¶ HW1 ‚Ä¶ HW12 ‚Ä¶ HK12) -HW1 -HW12
    [ /3 width=1 by fqu_fqup, fqu_lref_O/ ] -IH #HW2
    @(nta_conv_cnv ‚Ä¶ V2)
    /3 width=3 by nta_ldec_cnv, lpr_cpr_conf_cpc_sym, lpr_bind_refl_dx/
  | * #Y1 #X1 #X2 #_ #_ #H destruct
  ]
| #I1 #G #K1 #T1 #U1 #i #Hi #HTU1 #_ #HG0 #HL0 #HT0 #X #HX #Y #HY destruct
  elim (lpr_inv_bind_sn ‚Ä¶ HY) -HY #I2 #K2 #HK12 #_ #H destruct
  elim (cpr_inv_lref1 ‚Ä¶ HX) -HX
  [ #H destruct /4 width=6 by nta_lref, fqu_fqup/
  | * #Z1 #Y1 #X1 #HiX1 #HX1 #H destruct
    @(nta_lifts_bi ‚Ä¶ (‚ìâ) ‚Ä¶ HX1 ‚Ä¶ HTU1) -X -U1
    /4 width=6 by drops_refl, drops_drop, fqu_fqup/
  ]
| #p #I #G #L1 #V1 #T1 #U #HV1 #HT1 #_ #HG0 #HL0 #HT0 #X #HX #L2 #HL12 destruct
  elim (cpm_inv_bind1 ‚Ä¶ HX) -HX *
  [ #V2 #T2 #HV12 #HT12 #H destruct
    lapply (IH ‚Ä¶ HT1 T1 ‚Ä¶ (L2.‚ìë{I}V1) ?)
    [4:|*: /2 width=1 by lpr_bind_refl_dx/ ] #H
    lapply (nta_fwd_cnv_dx ‚Ä¶ H) -H #HU
    @(nta_conv_cnv ‚Ä¶ (‚ìë{p,I}V2.U))
    [ @nta_bind_cnv [ /3 width=6 by nta_to_cnv/ | /4 width=8 by lpr_bind, ext2_pair/ ]
    | /3 width=3 by lpr_cpr_conf_cpc_sym, cpr_pair_sn/
    | /4 width=6 by nta_to_cnv, cnv_bind/
    ]
  | #U1 #HUT1 #HU1X #H1 #H2 destruct
(*  
    elim (cpr_subst h G (L1.‚ììV1) U 0)
    [|*: /3 width=3 by drops_refl/ ] #U0 #T0 #HU0 #HTU0
    lapply (nta_conv_cnv ‚Ä¶ HT1 ‚Ä¶ U0 ??)
    [ @(cnv_lifts ‚Ä¶ HTU0) 
    
    @(IH ‚Ä¶ HU1X ‚Ä¶ HL12) -L2 -X
    @(nta_conv_cnv ‚Ä¶ T0)
    [
    | @cpcs_cprs_sn @(cprs_step_sn ‚Ä¶ (+‚ììV1.U0))
      /2 width=1 by cpm_bind/ /3 width=3 by cpm_cpms, cpm_zeta/
  
  
    elim (cpm_lifts_sn ‚Ä¶ HU1X (‚ìâ) ‚Ä¶ (L1.‚ììV1) ‚Ä¶ HUT1) -U1
    [| /3 width=1 by drops_refl, drops_drop/ ] #T2 #HXT2 #HT12
*)
