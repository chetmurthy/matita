(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "Basic_2/grammar/lenv_length.ma".

(* LOCAL ENVIRONMENT EQUALITY ***********************************************)

notation "hvbox( T1 break [ d , break e ] ‚âà break T2 )"
   non associative with precedence 45
   for @{ 'Eq $T1 $d $e $T2 }.

inductive leq: nat ‚Üí nat ‚Üí relation lenv ‚âù
| leq_sort: ‚àÄd,e. leq d e (‚ãÜ) (‚ãÜ)
| leq_OO:   ‚àÄL1,L2. leq 0 0 L1 L2
| leq_eq:   ‚àÄL1,L2,I,V,e. leq 0 e L1 L2 ‚Üí
            leq 0 (e + 1) (L1. ùïì{I} V) (L2.ùïì{I} V)
| leq_skip: ‚àÄL1,L2,I1,I2,V1,V2,d,e.
            leq d e L1 L2 ‚Üí leq (d + 1) e (L1. ùïì{I1} V1) (L2. ùïì{I2} V2)
.

interpretation "local environment equality" 'Eq L1 d e L2 = (leq d e L1 L2).

definition leq_repl_dx: ‚àÄS. (lenv ‚Üí relation S) ‚Üí Prop ‚âù ŒªS,R.
                        ‚àÄL1,s1,s2. R L1 s1 s2 ‚Üí
                        ‚àÄL2,d,e. L1 [d, e]‚âà L2 ‚Üí R L2 s1 s2.

(* Basic properties *********************************************************)

lemma TC_leq_repl_dx: ‚àÄS,R. leq_repl_dx S R ‚Üí leq_repl_dx S (ŒªL. (TC ‚Ä¶ (R L))).
#S #R #HR #L1 #s1 #s2 #H elim H -H s2
[ /3 width=5/
| #s #s2 #_ #Hs2 #IHs1 #L2 #d #e #HL12
  lapply (HR ‚Ä¶ Hs2 ‚Ä¶ HL12) -HR Hs2 HL12 /3/
]
qed.

lemma leq_refl: ‚àÄd,e,L. L [d, e] ‚âà L.
#d elim d -d
[ #e elim e -e // #e #IHe #L elim L -L /2/
| #d #IHd #e #L elim L -L /2/
]
qed.

lemma leq_sym: ‚àÄL1,L2,d,e. L1 [d, e] ‚âà L2 ‚Üí L2 [d, e] ‚âà L1.
#L1 #L2 #d #e #H elim H -H L1 L2 d e /2/
qed.

lemma leq_skip_lt: ‚àÄL1,L2,d,e. L1 [d - 1, e] ‚âà L2 ‚Üí 0 < d ‚Üí
                   ‚àÄI1,I2,V1,V2. L1. ùïì{I1} V1 [d, e] ‚âà L2. ùïì{I2} V2.

#L1 #L2 #d #e #HL12 #Hd >(plus_minus_m_m d 1) /2/
qed.

(* Basic inversion lemmas ***************************************************)
