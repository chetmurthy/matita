(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/grammar/term_vector.ma".
include "basic_2/multiple/fpas.ma".

(* MULTIPLE VECTOR AJUSTMENT ************************************************)

inductive fpasv (s:bool): bi_relation lenv (list term) ≝
| fpasv_nil : ∀L1,L2,T1,T2. ⦃L1, T1⦄ ⇳*[s] ⦃L2, T2⦄  → fpasv s L1 (◊) L2 (◊)
| fpasv_cons: ∀L1,L2,T1s,T2s,T1,T2. ⦃L1, T1⦄ ⇳*[s] ⦃L2, T2⦄  →
              fpasv s L1 T1s L2 T2s →
              fpasv s L1 (T1 @ T1s) L2 (T2 @ T2s)
.

interpretation
   "multiple vector ajustment (restricted closure)"
   'RAjustStar L1 T1s s L2 T2s = (fpasv s L1 T1s L2 T2s).

(* Basic inversion lemmas ***************************************************)



(* Basic_1: was just: lifts1_flat (left to right) *)
lemma fpas_inv_applv1: ∀L1,L2,V1s,T1,X,s. ⦃L1, Ⓐ V1s.T1⦄ ⇳*[s] ⦃L2, X⦄ →
                       ∃∃V2s,T2. ⦃L1, V1s⦄ ⇳*[s] ⦃L2, V2s⦄ & ⦃L1, T1⦄ ⇳*[s] ⦃L2, T2⦄ &
                                 X = Ⓐ V2s.T2.
#L1 #L2 #V1s elim V1s -V1s
[ #T1 #X #s #H
  @(ex3_2_intro … (◊) X) /2 width=3 by fpasv_nil/ (**) (* explicit constructor *)
| #V1 #V1s #IHV1s #T1 #X #s #H
  elim (lifts_inv_flat1 … H) -H #V2 #Y #HV12 #HY #H destruct
  elim (IHV1s … HY) -IHV1s -HY #V2s #T2 #HV12s #HT12 #H destruct
  @(ex3_2_intro) [4: // |3: /2 width=2 by liftsv_cons/ |1,2: skip | // ] (**) (* explicit constructor *)
]
qed-.

(* Basic properties *********************************************************)

(* Basic_1: was just: lifts1_flat (right to left) *)
lemma lifts_applv: ∀V1s,V2s,des. ⇧*[des] V1s ≡ V2s →
                   ∀T1,T2. ⇧*[des] T1 ≡ T2 →
                   ⇧*[des] Ⓐ V1s. T1 ≡ Ⓐ V2s. T2.
#V1s #V2s #des #H elim H -V1s -V2s /3 width=1 by lifts_flat/
qed.
