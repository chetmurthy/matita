(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground_2/relocation/rtmap_sle.ma".
include "basic_2/notation/relations/relationstar_5.ma".
include "basic_2/syntax/lenv.ma".

(* GENERIC ENTRYWISE EXTENSION OF CONTEXT-SENSITIVE REALTIONS FOR TERMS *****)

(* Basic_2A1: includes: lpx_sn_atom lpx_sn_pair *)
inductive lexs (RN,RP:relation3 lenv term term): rtmap ‚Üí relation lenv ‚âù
| lexs_atom: ‚àÄf. lexs RN RP f (‚ãÜ) (‚ãÜ)
| lexs_next: ‚àÄf,I,L1,L2,V1,V2.
             lexs RN RP f L1 L2 ‚Üí RN L1 V1 V2 ‚Üí
             lexs RN RP (‚´Øf) (L1.‚ìë{I}V1) (L2.‚ìë{I}V2)
| lexs_push: ‚àÄf,I,L1,L2,V1,V2.
             lexs RN RP f L1 L2 ‚Üí RP L1 V1 V2 ‚Üí
             lexs RN RP (‚Üëf) (L1.‚ìë{I}V1) (L2.‚ìë{I}V2)
.

interpretation "generic entrywise extension (local environment)"
   'RelationStar RN RP f L1 L2 = (lexs RN RP f L1 L2).

definition R_pw_confluent2_lexs: relation3 lenv term term ‚Üí relation3 lenv term term ‚Üí
                                 relation3 lenv term term ‚Üí relation3 lenv term term ‚Üí
                                 relation3 lenv term term ‚Üí relation3 lenv term term ‚Üí
                                 relation3 rtmap lenv term ‚âù
                                 ŒªR1,R2,RN1,RP1,RN2,RP2,f,L0,T0.
                                 ‚àÄT1. R1 L0 T0 T1 ‚Üí ‚àÄT2. R2 L0 T0 T2 ‚Üí
                                 ‚àÄL1. L0 ‚¶ª*[RN1, RP1, f] L1 ‚Üí ‚àÄL2. L0 ‚¶ª*[RN2, RP2, f] L2 ‚Üí
                                 ‚àÉ‚àÉT. R2 L1 T1 T & R1 L2 T2 T.

definition lexs_transitive: relation5 (relation3 lenv term term)
                                      (relation3 lenv term term) ‚Ä¶ ‚âù
                            ŒªR1,R2,R3,RN,RP.
                            ‚àÄf,L1,T1,T. R1 L1 T1 T ‚Üí ‚àÄL2. L1 ‚¶ª*[RN, RP, f] L2 ‚Üí
                            ‚àÄT2. R2 L2 T T2 ‚Üí R3 L1 T1 T2.

(* Basic inversion lemmas ***************************************************)

fact lexs_inv_atom1_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí X = ‚ãÜ ‚Üí Y = ‚ãÜ.
#RN #RP #f #X #Y * -f -X -Y //
#f #I #L1 #L2 #V1 #V2 #_ #_ #H destruct
qed-.

(* Basic_2A1: includes lpx_sn_inv_atom1 *)
lemma lexs_inv_atom1: ‚àÄRN,RP,f,Y. ‚ãÜ ‚¶ª*[RN, RP, f] Y ‚Üí Y = ‚ãÜ.
/2 width=6 by lexs_inv_atom1_aux/ qed-.

fact lexs_inv_next1_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí ‚àÄg,J,K1,W1. X = K1.‚ìë{J}W1 ‚Üí f = ‚´Øg ‚Üí
                         ‚àÉ‚àÉK2,W2. K1 ‚¶ª*[RN, RP, g] K2 & RN K1 W1 W2 & Y = K2.‚ìë{J}W2.
#RN #RP #f #X #Y * -f -X -Y
[ #f #g #J #K1 #W1 #H destruct
| #f #I #L1 #L2 #V1 #V2 #HL #HV #g #J #K1 #W1 #H1 #H2 <(injective_next ‚Ä¶ H2) -g destruct
  /2 width=5 by ex3_2_intro/
| #f #I #L1 #L2 #V1 #V2 #_ #_ #g #J #K1 #W1 #_ #H elim (discr_push_next ‚Ä¶ H)
]
qed-.

(* Basic_2A1: includes lpx_sn_inv_pair1 *)
lemma lexs_inv_next1: ‚àÄRN,RP,g,J,K1,Y,W1. K1.‚ìë{J}W1 ‚¶ª*[RN, RP, ‚´Øg] Y ‚Üí
                      ‚àÉ‚àÉK2,W2. K1 ‚¶ª*[RN, RP, g] K2 & RN K1 W1 W2 & Y = K2.‚ìë{J}W2.
/2 width=7 by lexs_inv_next1_aux/ qed-.


fact lexs_inv_push1_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí ‚àÄg,J,K1,W1. X = K1.‚ìë{J}W1 ‚Üí f = ‚Üëg ‚Üí
                         ‚àÉ‚àÉK2,W2. K1 ‚¶ª*[RN, RP, g] K2 & RP K1 W1 W2 & Y = K2.‚ìë{J}W2.
#RN #RP #f #X #Y * -f -X -Y
[ #f #g #J #K1 #W1 #H destruct
| #f #I #L1 #L2 #V1 #V2 #_ #_ #g #J #K1 #W1 #_ #H elim (discr_next_push ‚Ä¶ H)
| #f #I #L1 #L2 #V1 #V2 #HL #HV #g #J #K1 #W1 #H1 #H2 <(injective_push ‚Ä¶ H2) -g destruct
  /2 width=5 by ex3_2_intro/
]
qed-.

lemma lexs_inv_push1: ‚àÄRN,RP,g,J,K1,Y,W1. K1.‚ìë{J}W1 ‚¶ª*[RN, RP, ‚Üëg] Y ‚Üí
                      ‚àÉ‚àÉK2,W2. K1 ‚¶ª*[RN, RP, g] K2 & RP K1 W1 W2 & Y = K2.‚ìë{J}W2.
/2 width=7 by lexs_inv_push1_aux/ qed-.

fact lexs_inv_atom2_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí Y = ‚ãÜ ‚Üí X = ‚ãÜ.
#RN #RP #f #X #Y * -f -X -Y //
#f #I #L1 #L2 #V1 #V2 #_ #_ #H destruct
qed-.

(* Basic_2A1: includes lpx_sn_inv_atom2 *)
lemma lexs_inv_atom2: ‚àÄRN,RP,f,X. X ‚¶ª*[RN, RP, f] ‚ãÜ ‚Üí X = ‚ãÜ.
/2 width=6 by lexs_inv_atom2_aux/ qed-.

fact lexs_inv_next2_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí ‚àÄg,J,K2,W2. Y = K2.‚ìë{J}W2 ‚Üí f = ‚´Øg ‚Üí
                         ‚àÉ‚àÉK1,W1. K1 ‚¶ª*[RN, RP, g] K2 & RN K1 W1 W2 & X = K1.‚ìë{J}W1.
#RN #RP #f #X #Y * -f -X -Y
[ #f #g #J #K2 #W2 #H destruct
| #f #I #L1 #L2 #V1 #V2 #HL #HV #g #J #K2 #W2 #H1 #H2 <(injective_next ‚Ä¶ H2) -g destruct
  /2 width=5 by ex3_2_intro/
| #f #I #L1 #L2 #V1 #V2 #_ #_ #g #J #K2 #W2 #_ #H elim (discr_push_next ‚Ä¶ H)
]
qed-.

(* Basic_2A1: includes lpx_sn_inv_pair2 *)
lemma lexs_inv_next2: ‚àÄRN,RP,g,J,X,K2,W2. X ‚¶ª*[RN, RP, ‚´Øg] K2.‚ìë{J}W2 ‚Üí
                      ‚àÉ‚àÉK1,W1. K1 ‚¶ª*[RN, RP, g] K2 & RN K1 W1 W2 & X = K1.‚ìë{J}W1.
/2 width=7 by lexs_inv_next2_aux/ qed-.

fact lexs_inv_push2_aux: ‚àÄRN,RP,f,X,Y. X ‚¶ª*[RN, RP, f] Y ‚Üí ‚àÄg,J,K2,W2. Y = K2.‚ìë{J}W2 ‚Üí f = ‚Üëg ‚Üí
                         ‚àÉ‚àÉK1,W1. K1 ‚¶ª*[RN, RP, g] K2 & RP K1 W1 W2 & X = K1.‚ìë{J}W1.
#RN #RP #f #X #Y * -f -X -Y
[ #f #J #K2 #W2 #g #H destruct
| #f #I #L1 #L2 #V1 #V2 #_ #_ #g #J #K2 #W2 #_ #H elim (discr_next_push ‚Ä¶ H)
| #f #I #L1 #L2 #V1 #V2 #HL #HV #g #J #K2 #W2 #H1 #H2 <(injective_push ‚Ä¶ H2) -g destruct
  /2 width=5 by ex3_2_intro/
]
qed-.

lemma lexs_inv_push2: ‚àÄRN,RP,g,J,X,K2,W2. X ‚¶ª*[RN, RP, ‚Üëg] K2.‚ìë{J}W2 ‚Üí
                      ‚àÉ‚àÉK1,W1. K1 ‚¶ª*[RN, RP, g] K2 & RP K1 W1 W2 & X = K1.‚ìë{J}W1.
/2 width=7 by lexs_inv_push2_aux/ qed-.

(* Basic_2A1: includes lpx_sn_inv_pair *)
lemma lexs_inv_next: ‚àÄRN,RP,f,I1,I2,L1,L2,V1,V2.
                     L1.‚ìë{I1}V1 ‚¶ª*[RN, RP, ‚´Øf] (L2.‚ìë{I2}V2) ‚Üí
                     ‚àß‚àß L1 ‚¶ª*[RN, RP, f] L2 & RN L1 V1 V2 & I1 = I2.
#RN #RP #f #I1 #I2 #L1 #L2 #V1 #V2 #H elim (lexs_inv_next1 ‚Ä¶ H) -H
#L0 #V0 #HL10 #HV10 #H destruct /2 width=1 by and3_intro/
qed-.

lemma lexs_inv_push: ‚àÄRN,RP,f,I1,I2,L1,L2,V1,V2.
                     L1.‚ìë{I1}V1 ‚¶ª*[RN, RP, ‚Üëf] (L2.‚ìë{I2}V2) ‚Üí
                     ‚àß‚àß L1 ‚¶ª*[RN, RP, f] L2 & RP L1 V1 V2 & I1 = I2.
#RN #RP #f #I1 #I2 #L1 #L2 #V1 #V2 #H elim (lexs_inv_push1 ‚Ä¶ H) -H
#L0 #V0 #HL10 #HV10 #H destruct /2 width=1 by and3_intro/
qed-.

lemma lexs_inv_tl: ‚àÄRN,RP,f,I,L1,L2,V1,V2. L1 ‚¶ª*[RN, RP, ‚´±f] L2 ‚Üí
                   RN L1 V1 V2 ‚Üí RP L1 V1 V2 ‚Üí 
                   L1.‚ìë{I}V1 ‚¶ª*[RN, RP, f] L2.‚ìë{I}V2.
#RN #RP #f #I #L2 #L2 #V1 #V2 elim (pn_split f) *
/2 width=1 by lexs_next, lexs_push/
qed-.

(* Basic forward lemmas *****************************************************)

lemma lexs_fwd_pair: ‚àÄRN,RP,f,I1,I2,L1,L2,V1,V2. 
                     L1.‚ìë{I1}V1 ‚¶ª*[RN, RP, f] L2.‚ìë{I2}V2 ‚Üí
                     L1 ‚¶ª*[RN, RP, ‚´±f] L2 ‚àß I1 = I2.
#RN #RP #f #I1 #I2 #L2 #L2 #V1 #V2 #Hf
elim (pn_split f) * #g #H destruct
[ elim (lexs_inv_push ‚Ä¶ Hf) | elim (lexs_inv_next ‚Ä¶ Hf) ] -Hf
/2 width=1 by conj/
qed-.

(* Basic properties *********************************************************)

lemma lexs_eq_repl_back: ‚àÄRN,RP,L1,L2. eq_repl_back ‚Ä¶ (Œªf. L1 ‚¶ª*[RN, RP, f] L2).
#RN #RP #L1 #L2 #f1 #H elim H -f1 -L1 -L2 //
#f1 #I #L1 #L2 #V1 #v2 #_ #HV #IH #f2 #H
[ elim (eq_inv_nx ‚Ä¶ H) -H /3 width=3 by lexs_next/
| elim (eq_inv_px ‚Ä¶ H) -H /3 width=3 by lexs_push/
]
qed-.

lemma lexs_eq_repl_fwd: ‚àÄRN,RP,L1,L2. eq_repl_fwd ‚Ä¶ (Œªf. L1 ‚¶ª*[RN, RP, f] L2).
#RN #RP #L1 #L2 @eq_repl_sym /2 width=3 by lexs_eq_repl_back/ (**) (* full auto fails *)
qed-.

(* Basic_2A1: includes: lpx_sn_refl *)
lemma lexs_refl: ‚àÄRN,RP.
                 (‚àÄL. reflexive ‚Ä¶ (RN L)) ‚Üí
                 (‚àÄL. reflexive ‚Ä¶ (RP L)) ‚Üí
                 ‚àÄf.reflexive ‚Ä¶ (lexs RN RP f).
#RN #RP #HRN #HRP #f #L generalize in match f; -f elim L -L //
#L #I #V #IH * * /2 width=1 by lexs_next, lexs_push/
qed.

lemma lexs_sym: ‚àÄRN,RP.
                (‚àÄL1,L2,T1,T2. RN L1 T1 T2 ‚Üí RN L2 T2 T1) ‚Üí
                (‚àÄL1,L2,T1,T2. RP L1 T1 T2 ‚Üí RP L2 T2 T1) ‚Üí
                ‚àÄf. symmetric ‚Ä¶ (lexs RN RP f).
#RN #RP #HRN #HRP #f #L1 #L2 #H elim H -L1 -L2 -f
/3 width=2 by lexs_next, lexs_push/
qed-.

lemma lexs_pair_repl: ‚àÄRN,RP,f,I,L1,L2,V1,V2.
                      L1.‚ìë{I}V1 ‚¶ª*[RN, RP, f] L2.‚ìë{I}V2 ‚Üí
                      ‚àÄW1,W2. RN L1 W1 W2 ‚Üí RP L1 W1 W2 ‚Üí
                      L1.‚ìë{I}W1 ‚¶ª*[RN, RP, f] L2.‚ìë{I}W2.
#RN #RP #f #I #L1 #L2 #V1 #V2 #HL12 #W1 #W2 #HN #HP
elim (lexs_fwd_pair ‚Ä¶ HL12) -HL12 /2 width=1 by lexs_inv_tl/
qed-.

lemma lexs_co: ‚àÄRN1,RP1,RN2,RP2.
               (‚àÄL1,T1,T2. RN1 L1 T1 T2 ‚Üí RN2 L1 T1 T2) ‚Üí
               (‚àÄL1,T1,T2. RP1 L1 T1 T2 ‚Üí RP2 L1 T1 T2) ‚Üí
               ‚àÄf,L1,L2. L1 ‚¶ª*[RN1, RP1, f] L2 ‚Üí L1 ‚¶ª*[RN2, RP2, f] L2.
#RN1 #RP1 #RN2 #RP2 #HRN #HRP #f #L1 #L2 #H elim H -f -L1 -L2
/3 width=1 by lexs_atom, lexs_next, lexs_push/
qed-.

lemma lexs_co_isid: ‚àÄRN1,RP1,RN2,RP2.
                    (‚àÄL1,T1,T2. RP1 L1 T1 T2 ‚Üí RP2 L1 T1 T2) ‚Üí
                    ‚àÄf,L1,L2. L1 ‚¶ª*[RN1, RP1, f] L2 ‚Üí ùêà‚¶Éf‚¶Ñ ‚Üí
                    L1 ‚¶ª*[RN2, RP2, f] L2.
#RN1 #RP1 #RN2 #RP2 #HR #f #L1 #L2 #H elim H -f -L1 -L2 //
#f #I #K1 #K2 #V1 #V2 #_ #HV12 #IH #H
[ elim (isid_inv_next ‚Ä¶ H) -H //
| /4 width=3 by lexs_push, isid_inv_push/
] 
qed-.

lemma sle_lexs_trans: ‚àÄRN,RP. (‚àÄL,T1,T2. RN L T1 T2 ‚Üí RP L T1 T2) ‚Üí
                      ‚àÄf2,L1,L2. L1 ‚¶ª*[RN, RP, f2] L2 ‚Üí
                      ‚àÄf1. f1 ‚äÜ f2 ‚Üí L1 ‚¶ª*[RN, RP, f1] L2.
#RN #RP #HR #f2 #L1 #L2 #H elim H -f2 -L1 -L2 //
#f2 #I #L1 #L2 #V1 #V2 #_ #HV12 #IH
[ * * [2: #n1 ] ] #f1 #H
[ /4 width=5 by lexs_next, sle_inv_nn/
| /4 width=5 by lexs_push, sle_inv_pn/
| elim (sle_inv_xp ‚Ä¶ H) -H [2,3: // ]
  #g1 #H #H1 destruct /3 width=5 by lexs_push/
]
qed-.

lemma sle_lexs_conf: ‚àÄRN,RP. (‚àÄL,T1,T2. RP L T1 T2 ‚Üí RN L T1 T2) ‚Üí
                     ‚àÄf1,L1,L2. L1 ‚¶ª*[RN, RP, f1] L2 ‚Üí
                     ‚àÄf2. f1 ‚äÜ f2 ‚Üí L1 ‚¶ª*[RN, RP, f2] L2.
#RN #RP #HR #f1 #L1 #L2 #H elim H -f1 -L1 -L2 //
#f1 #I #L1 #L2 #V1 #V2 #_ #HV12 #IH
[2: * * [2: #n2 ] ] #f2 #H
[ /4 width=5 by lexs_next, sle_inv_pn/
| /4 width=5 by lexs_push, sle_inv_pp/
| elim (sle_inv_nx ‚Ä¶ H) -H [2,3: // ]
  #g2 #H #H2 destruct /3 width=5 by lexs_next/
]
qed-.
