(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/substitution/ldrop_ldrop.ma".
include "basic_2/multiple/frees.ma".

(* CONTEXT-SENSITIVE FREE VARIABLES *****************************************)

(* Advanced properties ******************************************************)

lemma frees_dec: ‚àÄL,U,d,i. Decidable (frees d L U i).
#L #U @(f2_ind ‚Ä¶ rfw ‚Ä¶ L U) -L -U
#n #IH #L * *
[ -IH /3 width=5 by frees_inv_sort, or_intror/
| #j #Hn #d #i elim (lt_or_eq_or_gt i j) #Hji
  [ -n @or_intror #H elim (lt_refl_false i)
    lapply (frees_inv_lref_ge ‚Ä¶ H ?) -L -d /2 width=1 by lt_to_le/
  | -n /2 width=1 by or_introl/
  | elim (ylt_split j d) #Hdi
    [ -n @or_intror #H elim (lt_refl_false i)
      lapply (frees_inv_lref_skip ‚Ä¶ H ?) -L //
    | elim (lt_or_ge j (|L|)) #Hj
      [ elim (ldrop_O1_lt (‚íª) L j) // -Hj #I #K #W #HLK destruct
        elim (IH K W ‚Ä¶ 0 (i-j-1)) -IH [1,3: /3 width=5 by frees_lref_be, ldrop_fwd_rfw, or_introl/ ] #HnW
        @or_intror #H elim (frees_inv_lref_lt ‚Ä¶ H) // #Z #Y #X #_ #HLY -d
        lapply (ldrop_mono ‚Ä¶ HLY ‚Ä¶ HLK) -L #H destruct /2 width=1 by/  
      | -n @or_intror #H elim (lt_refl_false i)
        lapply (frees_inv_lref_free ‚Ä¶ H ?) -d //
      ]
    ]
  ]
| -IH /3 width=5 by frees_inv_gref, or_intror/
| #a #I #W #U #Hn #d #i destruct
  elim (IH L W ‚Ä¶ d i) [1,3: /3 width=1 by frees_bind_sn, or_introl/ ] #HnW
  elim (IH (L.‚ìë{I}W) U ‚Ä¶ (‚´Ød) (i+1)) -IH [1,3: /3 width=1 by frees_bind_dx, or_introl/ ] #HnU
  @or_intror #H elim (frees_inv_bind ‚Ä¶ H) -H /2 width=1 by/
| #I #W #U #Hn #d #i destruct
  elim (IH L W ‚Ä¶ d i) [1,3: /3 width=1 by frees_flat_sn, or_introl/ ] #HnW
  elim (IH L U ‚Ä¶ d i) -IH [1,3: /3 width=1 by frees_flat_dx, or_introl/ ] #HnU
  @or_intror #H elim (frees_inv_flat ‚Ä¶ H) -H /2 width=1 by/
]
qed-.

lemma frees_S: ‚àÄL,U,d,i. L ‚ä¢ i œµ ùêÖ*[yinj d]‚¶ÉU‚¶Ñ ‚Üí ‚àÄI,K,W. ‚á©[d] L ‚â° K.‚ìë{I}W ‚Üí
               (K ‚ä¢ i-d-1 œµ ùêÖ*[0]‚¶ÉW‚¶Ñ ‚Üí ‚ä•) ‚Üí L ‚ä¢ i œµ ùêÖ*[‚´Ød]‚¶ÉU‚¶Ñ.
#L #U #d #i #H elim (frees_inv ‚Ä¶ H) -H /3 width=2 by frees_eq/
* #I #K #W #j #Hdj #Hji #HnU #HLK #HW #I0 #K0 #W0 #HLK0 #HnW0
lapply (yle_inv_inj ‚Ä¶ Hdj) -Hdj #Hdj
elim (le_to_or_lt_eq ‚Ä¶ Hdj) -Hdj
[ -I0 -K0 -W0 /3 width=9 by frees_be, yle_inj/
| -Hji -HnU #H destruct
  lapply (ldrop_mono ‚Ä¶ HLK0 ‚Ä¶ HLK) #H destruct -I
  elim HnW0 -L -U -HnW0 //
]
qed.

(* Note: lemma 1250 *)
lemma frees_bind_dx_O: ‚àÄa,I,L,W,U,i. L.‚ìë{I}W ‚ä¢ i+1 œµ ùêÖ*[0]‚¶ÉU‚¶Ñ ‚Üí
                       L ‚ä¢ i œµ ùêÖ*[0]‚¶É‚ìë{a,I}W.U‚¶Ñ.
#a #I #L #W #U #i #HU elim (frees_dec L W 0 i)
/4 width=5 by frees_S, frees_bind_dx, frees_bind_sn/
qed.
