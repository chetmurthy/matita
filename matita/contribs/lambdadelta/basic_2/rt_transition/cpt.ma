(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground_2/steps/rtc_ist_shift.ma".
include "ground_2/steps/rtc_ist_plus.ma".
include "ground_2/steps/rtc_ist_max.ma".
include "basic_2/notation/relations/pty_6.ma".
include "basic_2/rt_transition/cpg.ma".

(* T-BOUND CONTEXT-SENSITIVE PARALLEL T-TRANSITION FOR TERMS ****************)

definition cpt (h) (G) (L) (n): relation2 term term ‚âù
           ŒªT1,T2. ‚àÉ‚àÉc. ùêì‚¶Én,c‚¶Ñ & ‚¶ÉG,L‚¶Ñ ‚ä¢ T1 ‚¨à[eq ‚Ä¶,c,h] T2.

interpretation
  "t-bound context-sensitive parallel t-transition (term)"
  'PTy h n G L T1 T2 = (cpt h G L n T1 T2).

(* Basic properties *********************************************************)

lemma cpt_ess (h) (G) (L):
      ‚àÄs. ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ãÜs ‚¨Ü[h,1] ‚ãÜ(‚´Ø[h]s).
/2 width=3 by cpg_ess, ex2_intro/ qed.

lemma cpt_delta (h) (n) (G) (K):
      ‚àÄV1,V2. ‚¶ÉG,K‚¶Ñ ‚ä¢ V1 ‚¨Ü[h,n] V2 ‚Üí
      ‚àÄW2. ‚áß*[1] V2 ‚âò W2 ‚Üí ‚¶ÉG,K.‚ììV1‚¶Ñ ‚ä¢ #0 ‚¨Ü[h,n] W2.
#h #n #G #K #V1 #V2 *
/3 width=5 by cpg_delta, ex2_intro/
qed.

lemma cpt_ell (h) (n) (G) (K):
      ‚àÄV1,V2. ‚¶ÉG,K‚¶Ñ ‚ä¢ V1 ‚¨Ü[h,n] V2 ‚Üí
      ‚àÄW2. ‚áß*[1] V2 ‚âò W2 ‚Üí ‚¶ÉG,K.‚ìõV1‚¶Ñ ‚ä¢ #0 ‚¨Ü[h,‚Üën] W2.
#h #n #G #K #V1 #V2 *
/3 width=5 by cpg_ell, ex2_intro, ist_succ/
qed.

lemma cpt_lref (h) (n) (G) (K):
      ‚àÄT,i. ‚¶ÉG,K‚¶Ñ ‚ä¢ #i ‚¨Ü[h,n] T ‚Üí ‚àÄU. ‚áß*[1] T ‚âò U ‚Üí
      ‚àÄI. ‚¶ÉG,K.‚ìò{I}‚¶Ñ ‚ä¢ #‚Üëi ‚¨Ü[h,n] U.
#h #n #G #K #T #i *
/3 width=5 by cpg_lref, ex2_intro/
qed.

lemma cpt_bind (h) (n) (G) (L):
      ‚àÄV1,V2. ‚¶ÉG,L‚¶Ñ ‚ä¢ V1 ‚¨Ü[h,0] V2 ‚Üí ‚àÄI,T1,T2. ‚¶ÉG,L.‚ìë{I}V1‚¶Ñ ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí
      ‚àÄp. ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ìë{p,I}V1.T1 ‚¨Ü[h,n] ‚ìë{p,I}V2.T2.
#h #n #G #L #V1 #V2 * #cV #HcV #HV12 #I #T1 #T2 *
/3 width=5 by cpg_bind, ist_max_O1, ex2_intro/
qed.

lemma cpt_appl (h) (n) (G) (L):
      ‚àÄV1,V2. ‚¶ÉG,L‚¶Ñ ‚ä¢ V1 ‚¨Ü[h,0] V2 ‚Üí
      ‚àÄT1,T2. ‚¶ÉG,L‚¶Ñ ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ìêV1.T1 ‚¨Ü[h,n] ‚ìêV2.T2.
#h #n #G #L #V1 #V2 * #cV #HcV #HV12 #T1 #T2 *
/3 width=5 by ist_max_O1, cpg_appl, ex2_intro/
qed.

lemma cpt_cast (h) (n) (G) (L):
      ‚àÄU1,U2. ‚¶ÉG,L‚¶Ñ ‚ä¢ U1 ‚¨Ü[h,n] U2 ‚Üí
      ‚àÄT1,T2. ‚¶ÉG,L‚¶Ñ ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ìùU1.T1 ‚¨Ü[h,n] ‚ìùU2.T2.
#h #n #G #L #U1 #U2 * #cU #HcU #HU12 #T1 #T2 *
/3 width=6 by cpg_cast, ex2_intro/
qed.

lemma cpt_ee (h) (n) (G) (L):
      ‚àÄU1,U2. ‚¶ÉG,L‚¶Ñ ‚ä¢ U1 ‚¨Ü[h,n] U2 ‚Üí ‚àÄT. ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ìùU1.T ‚¨Ü[h,‚Üën] U2.
#h #n #G #L #V1 #V2 *
/3 width=3 by cpg_ee, ist_succ, ex2_intro/
qed.

(* Basic properties *********************************************************)

lemma cpt_refl (h) (G) (L): reflexive ‚Ä¶ (cpt h G L 0).
/3 width=3 by cpg_refl, ex2_intro/ qed.

(* Advanced properties ******************************************************)

lemma cpt_sort (h) (G) (L):
      ‚àÄn. n ‚â§ 1 ‚Üí ‚àÄs. ‚¶ÉG,L‚¶Ñ ‚ä¢ ‚ãÜs ‚¨Ü[h,n] ‚ãÜ((next h)^n s).
#h #G #L * //
#n #H #s <(le_n_O_to_eq n) /2 width=1 by le_S_S_to_le/
qed.
