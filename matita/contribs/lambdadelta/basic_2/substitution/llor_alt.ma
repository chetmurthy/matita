(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/relocation/lpx_sn_alt.ma".
include "basic_2/substitution/llor.ma".

(* POINTWISE UNION FOR LOCAL ENVIRONMENTS ***********************************)

(* Alternative definition ***************************************************)

theorem llor_intro_alt: ‚àÄT,L2,L1,L. |L1| ‚â§ |L2| ‚Üí |L1| = |L| ‚Üí
                        (‚àÄI1,I,K1,K,V1,V,i. ‚á©[i] L1 ‚â° K1.‚ìë{I1}V1 ‚Üí ‚á©[i] L ‚â° K.‚ìë{I}V ‚Üí
                           (K1 ‚ä¢ |L2|-|L1|+i ~œµ ùêÖ*[yinj 0]‚¶ÉT‚¶Ñ ‚Üí I1 = I ‚àß V1 = V) ‚àß
                           (‚àÄI2,K2,V2. (K1 ‚ä¢ |L2|-|L1|+i ~œµ ùêÖ*[yinj 0]‚¶ÉT‚¶Ñ ‚Üí ‚ä•) ‚Üí
                                       ‚á©[|L2|-|L1|+i] L2 ‚â° K2.‚ìë{I2}V2 ‚Üí I1 = I ‚àß V2 = V
                           )
                        ) ‚Üí L1 ‚©ñ[T] L2 ‚â° L.
#T #L2 #L1 #L #HL12 #HL1 #IH @lpx_sn_intro_alt // -HL1
#I1 #I #K1 #K #V1 #V #i #HLK1 #HLK
lapply (ldrop_fwd_length_minus4 ‚Ä¶ HLK1)
lapply (ldrop_fwd_length_le4 ‚Ä¶ HLK1)
normalize in ‚ä¢ (%‚Üí%‚Üí?); #HKL1 #Hi
lapply (plus_minus_minus_be_aux ‚Ä¶ HL12 Hi) // -Hi <minus_plus #Hi
lapply (transitive_le ‚Ä¶ HKL1 HL12) -HKL1 -HL12 #HKL1
elim (IH ‚Ä¶ HLK1 HLK) -IH -HLK1 -HLK #IH1 #IH2
elim (cofrees_dec K1 T 0 (|L2|-|L1|+i))
[ -IH2 #HT elim (IH1 ‚Ä¶ HT) -IH1
  #HI1 #HV1 @conj // <HV1 -V @clor_sn // <Hi -Hi //
| -IH1 #HnT elim (ldrop_O1_lt (‚íª) L2 (|L2|-|L1|+i)) /2 width=1 by monotonic_lt_minus_l/
  #I2 #K2 #V2 #HLK2 elim (IH2 ‚Ä¶ HLK2) -IH2 /2 width=1 by/
  #HI1 #HV2 @conj // <HV2 -V @(clor_dx ‚Ä¶ I2 K2) // <Hi -Hi /2 width=1 by/
]
qed.

theorem llor_inv_alt: ‚àÄT,L2,L1,L. L1 ‚©ñ[T] L2 ‚â° L ‚Üí |L1| ‚â§ |L2| ‚Üí
                      |L1| = |L| ‚àß
                      (‚àÄI1,I,K1,K,V1,V,i.
                         ‚á©[i] L1 ‚â° K1.‚ìë{I1}V1 ‚Üí ‚á©[i] L ‚â° K.‚ìë{I}V ‚Üí
                         (‚àß‚àß K1 ‚ä¢ |L2|-|L1|+i ~œµ ùêÖ*[yinj 0]‚¶ÉT‚¶Ñ & I1 = I & V1 = V) ‚à®
                         (‚àÉ‚àÉI2,K2,V2. (K1 ‚ä¢ |L2|-|L1|+i ~œµ ùêÖ*[yinj 0]‚¶ÉT‚¶Ñ ‚Üí ‚ä•) &
                                      ‚á©[|L2|-|L1|+i] L2 ‚â° K2.‚ìë{I2}V2 &
                                      I1 = I & V2 = V
                         )
                      ).
#T #L2 #L1 #L #H #HL12 elim (lpx_sn_inv_alt ‚Ä¶ H) -H
#HL1 #IH @conj // -HL1
#I1 #I #K1 #K #V1 #V #i #HLK1 #HLK
lapply (ldrop_fwd_length_minus4 ‚Ä¶ HLK1)
lapply (ldrop_fwd_length_le4 ‚Ä¶ HLK1)
normalize in ‚ä¢ (%‚Üí%‚Üí?); #HKL1 #Hi
lapply (plus_minus_minus_be_aux ‚Ä¶ HL12 Hi) // -HL12 -Hi -HKL1
<minus_plus #Hi >Hi -Hi
elim (IH ‚Ä¶ HLK1 HLK) -IH #HI1 *
/4 width=5 by or_introl, or_intror, and3_intro, ex4_3_intro/
qed-.
