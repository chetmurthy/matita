(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.tcs.unibo.it                            *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground_2/notation/functions/apply_2.ma".
include "ground_2/relocation/nstream_eq.ma".
include "ground_2/relocation/rtmap_istot.ma".

(* RELOCATION N-STREAM ******************************************************)

rec definition apply (i: nat) on i: rtmap ‚Üí nat ‚âù ?.
* #n #f cases i -i
[ @n
| #i lapply (apply i f) -apply -i -f
  #i @(‚´Ø(n+i))
]
defined.

interpretation "functional application (nstream)"
   'Apply f i = (apply i f).

(* Specific properties on at ************************************************)

lemma at_O1: ‚àÄi2,f. @‚¶É0, i2@f‚¶Ñ ‚âò i2.
#i2 elim i2 -i2 /2 width=5 by at_refl, at_next/
qed.

lemma at_S1: ‚àÄn,f,i1,i2. @‚¶Éi1, f‚¶Ñ ‚âò i2 ‚Üí @‚¶É‚´Øi1, n@f‚¶Ñ ‚âò ‚´Ø(n+i2).
#n elim n -n /3 width=7 by at_push, at_next/
qed.

lemma at_total: ‚àÄi1,f. @‚¶Éi1, f‚¶Ñ ‚âò f@‚ù¥i1‚ùµ.
#i1 elim i1 -i1
[ * // | #i #IH * /3 width=1 by at_S1/ ]
qed.

lemma at_istot: ‚àÄf. ùêì‚¶Éf‚¶Ñ.
/2 width=2 by ex_intro/ qed.

lemma at_plus2: ‚àÄf,i1,i,n,m. @‚¶Éi1, n@f‚¶Ñ ‚âò i ‚Üí @‚¶Éi1, (m+n)@f‚¶Ñ ‚âò m+i.
#f #i1 #i #n #m #H elim m -m //
#m <plus_S1 /2 width=5 by at_next/ (**) (* full auto fails *)
qed.

(* Specific inversion lemmas on at ******************************************)

lemma at_inv_O1: ‚àÄf,n,i2. @‚¶É0, n@f‚¶Ñ ‚âò i2 ‚Üí n = i2.
#f #n elim n -n /2 width=6 by at_inv_ppx/
#n #IH #i2 #H elim (at_inv_xnx ‚Ä¶ H) -H [2,3: // ]
#j2 #Hj * -i2 /3 width=1 by eq_f/
qed-.

lemma at_inv_S1: ‚àÄf,n,j1,i2. @‚¶É‚´Øj1, n@f‚¶Ñ ‚âò i2 ‚Üí
                 ‚àÉ‚àÉj2. @‚¶Éj1, f‚¶Ñ ‚âò j2 & ‚´Ø(n+j2) = i2.
#f #n elim n -n /2 width=5 by at_inv_npx/
#n #IH #j1 #i2 #H elim (at_inv_xnx ‚Ä¶ H) -H [2,3: // ]
#j2 #Hj * -i2 elim (IH ‚Ä¶ Hj) -IH -Hj
#i2 #Hi * -j2 /2 width=3 by ex2_intro/
qed-.

lemma at_inv_total: ‚àÄf,i1,i2. @‚¶Éi1, f‚¶Ñ ‚âò i2 ‚Üí f@‚ù¥i1‚ùµ = i2.
/2 width=6 by at_mono/ qed-.

(* Spercific forward lemmas on at *******************************************)

lemma at_increasing_plus: ‚àÄf,n,i1,i2. @‚¶Éi1, n@f‚¶Ñ ‚âò i2 ‚Üí i1 + n ‚â§ i2.
#f #n *
[ #i2 #H <(at_inv_O1 ‚Ä¶ H) -i2 //
| #i1 #i2 #H elim (at_inv_S1 ‚Ä¶ H) -H
  #j1 #Ht * -i2 /4 width=2 by at_increasing, monotonic_le_plus_r, le_S_S/
]
qed-.

lemma at_fwd_id: ‚àÄf,n,i. @‚¶Éi, n@f‚¶Ñ ‚âò i ‚Üí 0 = n.
#f #n #i #H elim (at_fwd_id_ex ‚Ä¶ H) -H
#g #H elim (push_inv_seq_dx ‚Ä¶ H) -H //
qed-.

(* Basic properties *********************************************************)

lemma apply_eq_repl (i): eq_repl ‚Ä¶ (Œªf1,f2. f1@‚ù¥i‚ùµ = f2@‚ù¥i‚ùµ).
#i elim i -i [2: #i #IH ] * #n1 #f1 * #n2 #f2 #H
elim (eq_inv_seq_aux ‚Ä¶ H) -H normalize //
#Hn #Hf /4 width=1 by eq_f2, eq_f/
qed.

lemma apply_S1: ‚àÄf,i. (‚´Øf)@‚ù¥i‚ùµ = ‚´Ø(f@‚ù¥i‚ùµ).
* #n #f * //
qed.

(* Main inversion lemmas ****************************************************)

theorem apply_inj: ‚àÄf,i1,i2,j. f@‚ù¥i1‚ùµ = j ‚Üí f@‚ù¥i2‚ùµ = j ‚Üí i1 = i2.
/2 width=4 by at_inj/ qed-.
