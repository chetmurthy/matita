(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "delayed_updating/unwind/unwind2_path.ma".
include "delayed_updating/unwind/unwind_gen_structure.ma".

(* UNWIND FOR PATH **********************************************************)

(* Constructions with list_rcons ********************************************)

lemma unwind2_path_d_dx (f) (p) (n) :
      (‚äóp)‚óñùó±((‚ñ∂[f](p·¥ø))Ôº†‚ß£‚ù®n‚ù©) = ‚ñº[f](p‚óñùó±n).
#f #p #n <unwind2_path_unfold
<unwind_gen_d_dx //
qed.

lemma unwind2_path_m_dx (f) (p):
      ‚äóp = ‚ñº[f](p‚óñùó∫).
#f #p <unwind2_path_unfold //
qed.

lemma unwind2_path_L_dx (f) (p):
      (‚äóp)‚óñùóü = ‚ñº[f](p‚óñùóü).
#f #p <unwind2_path_unfold //
qed.

lemma unwind2_path_A_dx (f) (p):
      (‚äóp)‚óñùóî = ‚ñº[f](p‚óñùóî).
#f #p <unwind2_path_unfold //
qed.

lemma unwind2_path_S_dx (f) (p):
      (‚äóp)‚óñùó¶ = ‚ñº[f](p‚óñùó¶).
#f #p <unwind2_path_unfold //
qed.

lemma unwind2_path_root (f) (p):
      ‚àÉ‚àÉr. ùêû = ‚äór & ‚äóp‚óèr = ‚ñº[f]p.
#f #p
elim (unwind_gen_root)
/2 width=3 by ex2_intro/
qed-.

(* Constructions with proper condition for path *****************************)

lemma unwind2_path_append_proper_dx (f) (p1) (p2): p2 œµ ùêè ‚Üí
      (‚äóp1)‚óè(‚ñº[‚ñ∂[f]p1·¥ø]p2) = ‚ñº[f](p1‚óèp2).
#f #p1 #p2 #Hp2 <unwind2_path_unfold <unwind2_path_unfold
<unwind_gen_append_proper_dx // -Hp2 <reverse_append
@(list_ind_rcons ‚Ä¶ p2) -p2 // #q2 #l2 #_
<reverse_rcons <list_tl_lcons <list_tl_lcons //
qed-.

(* Constructions with inner condition for path ******************************)

lemma unwind2_path_append_inner_sn (f) (p1) (p2): p1 œµ ùêà ‚Üí
      (‚äóp1)‚óè(‚ñº[‚ñ∂[f]p1·¥ø]p2) = ‚ñº[f](p1‚óèp2).
#f #p1 #p2 #Hp1 <unwind2_path_unfold <unwind2_path_unfold
<unwind_gen_append_inner_sn // -Hp1 <reverse_append
@(list_ind_rcons ‚Ä¶ p2) -p2 // #q2 #l2 #_
<reverse_rcons <list_tl_lcons <list_tl_lcons //
qed-.

(* Inversions with list_lcons ***********************************************)

lemma unwind2_path_inv_S_sn (f) (p) (q):
      (ùó¶‚óóq) = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉr1,r2. ùêû = ‚äór1 & q = ‚ñº[‚ñ∂[f]r1·¥ø]r2 & r1‚óèùó¶‚óór2 = p.
#f #p #q #H0
elim (unwind_gen_inv_S_sn ‚Ä¶ H0) -H0 #r1 #r2 #Hr1 #H1 #H2 destruct
<reverse_append <reverse_lcons
@(list_ind_rcons ‚Ä¶ r2) -r2 [ /2 width=5 by ex3_2_intro/ ] #r2 #l2 #_
<reverse_rcons <list_append_lcons_sn <list_append_rcons_sn
<list_tl_lcons <unwind2_rmap_append <unwind2_rmap_S_sn
/2 width=5 by ex3_2_intro/
qed-.

(* Inversions with proper condition for path ********************************)

lemma unwind2_path_inv_append_proper_dx (f) (p) (q1) (q2):
      q2 œµ ùêè ‚Üí q1‚óèq2 = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉp1,p2. ‚äóp1 = q1 & ‚ñº[‚ñ∂[f]p1·¥ø]p2 = q2 & p1‚óèp2 = p.
#f #p #q1 #q2 #Hq2 #H0
elim (unwind_gen_inv_append_proper_dx ‚Ä¶ Hq2 H0) -Hq2 -H0
#p1 #p2 #H1 #H2 #H3 destruct <reverse_append
@(list_ind_rcons ‚Ä¶ p2) -p2 [ /2 width=5 by ex3_2_intro/ ] #q2 #l2 #_
<reverse_rcons <list_tl_lcons <unwind2_rmap_append
@ex3_2_intro [4: |*: // ] <unwind2_path_unfold // (**) (* auto fails *)
qed-.

(* Inversions with inner condition for path *********************************)

lemma unwind2_path_inv_append_inner_sn (f) (p) (q1) (q2):
      q1 œµ ùêà ‚Üí q1‚óèq2 = ‚ñº[f]p ‚Üí
      ‚àÉ‚àÉp1,p2. ‚äóp1 = q1 & ‚ñº[‚ñ∂[f]p1·¥ø]p2 = q2 & p1‚óèp2 = p.
#f #p #q1 #q2 #Hq1 #H0
elim (unwind_gen_inv_append_inner_sn ‚Ä¶ Hq1 H0) -Hq1 -H0
#p1 #p2 #H1 #H2 #H3 destruct <reverse_append
@(list_ind_rcons ‚Ä¶ p2) -p2 [ /2 width=5 by ex3_2_intro/ ] #q2 #l2 #_
<reverse_rcons <list_tl_lcons <unwind2_rmap_append
@ex3_2_intro [4: |*: // ] <unwind2_path_unfold // (**) (* auto fails *)
qed-.
