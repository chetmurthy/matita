(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "delayed_updating/substitution/lift.ma".
include "ground/notation/relations/ringeq_3.ma".

(* LIFT FOR PATH ***********************************************************)

definition lift_exteq (A): relation2 (lift_continuation A) (lift_continuation A) ‚âù
           Œªk1,k2. ‚àÄf,p. k1 f p = k2 f p.

interpretation
  "extensional equivalence (lift continuation)"
  'RingEq A k1 k2 = (lift_exteq A k1 k2).

(* Constructions with lift_exteq ********************************************)

lemma lift_eq_repl_sn (A) (p) (k1) (k2) (f):
      k1 ‚âó{A} k2 ‚Üí ‚Üë‚ù®k1, f, p‚ù© = ‚Üë‚ù®k2, f, p‚ù©.
#A #p @(path_ind_lift ‚Ä¶ p) -p [| #n | #n #l0 #q ]
[ #k1 #k2 #f #Hk <lift_empty <lift_empty //
|*: #IH #k1 #k2 #f #Hk /2 width=1 by/
]
qed-.

(* Advanced constructions ***************************************************)

lemma lift_lcons_alt (A) (k) (f) (p) (l):
      ‚Üë‚ù®Œªg,p2. k g (l‚óóp2), f, p‚ù© = ‚Üë{A}‚ù®Œªg,p2. k g ((l‚óóùêû)‚óèp2), f, p‚ù©.
#A #k #f #p #l
@lift_eq_repl_sn #p2 #g // (**) (* auto fails with typechecker failure *)
qed.

lemma lift_append_rcons_sn (A) (k) (f) (p1) (p) (l):
      ‚Üë‚ù®Œªg,p2. k g (p1‚óèl‚óóp2), f, p‚ù© = ‚Üë{A}‚ù®Œªg,p2. k g (p1‚óñl‚óèp2), f, p‚ù©.
#A #k #f #p1 #p #l
@lift_eq_repl_sn #p2 #g
<list_append_rcons_sn //
qed.

(* Advanced constructions with proj_path ************************************)

lemma lift_path_append_sn (p) (f) (q):
      q‚óè‚Üë[f]p = ‚Üë‚ù®(Œªg,p. proj_path g (q‚óèp)), f, p‚ù©.
#p @(path_ind_lift ‚Ä¶ p) -p // [ #n #l #p |*: #p ] #IH #f #q
[ <lift_d_lcons_sn <lift_d_lcons_sn <IH -IH //
| <lift_L_sn <lift_L_sn >lift_lcons_alt >lift_append_rcons_sn
  <IH <IH -IH <list_append_rcons_sn //
| <lift_A_sn <lift_A_sn >lift_lcons_alt >lift_append_rcons_sn
  <IH <IH -IH <list_append_rcons_sn //
| <lift_S_sn <lift_S_sn >lift_lcons_alt >lift_append_rcons_sn
  <IH <IH -IH <list_append_rcons_sn //
]
qed.

lemma lift_path_lcons (f) (p) (l):
      l‚óó‚Üë[f]p = ‚Üë‚ù®(Œªg,p. proj_path g (l‚óóp)), f, p‚ù©.
#f #p #l
>lift_lcons_alt <lift_path_append_sn //
qed.

lemma lift_path_L_sn (f) (p):
      (ùóü‚óó‚Üë[‚´Øf]p) = ‚Üë[f](ùóü‚óóp).
// qed.

lemma lift_path_A_sn (f) (p):
      (ùóî‚óó‚Üë[f]p) = ‚Üë[f](ùóî‚óóp).
// qed.

lemma lift_path_S_sn (f) (p):
      (ùó¶‚óó‚Üë[f]p) = ‚Üë[f](ùó¶‚óóp).
// qed.
