(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/xoa/and_4.ma".
include "basic_2A/notation/relations/lazyor_5.ma".
include "basic_2A/multiple/frees.ma".

(* POINTWISE UNION FOR LOCAL ENVIRONMENTS ***********************************)

definition llor: ynat ‚Üí relation4 term lenv lenv lenv ‚âù Œªl,T,L2,L1,L.
                 ‚àß‚àß |L1| = |L2| & |L1| = |L|
                  & (‚àÄI1,I2,I,K1,K2,K,V1,V2,V,i.
                       ‚¨á[i] L1 ‚â° K1.‚ìë{I1}V1 ‚Üí ‚¨á[i] L2 ‚â° K2.‚ìë{I2}V2 ‚Üí ‚¨á[i] L ‚â° K.‚ìë{I}V ‚Üí ‚à®‚à®
                       (‚àß‚àß yinj i < l & I1 = I & V1 = V) |
                       (‚àß‚àß (L1 ‚ä¢ i œµ ùêÖ*[l]‚¶ÉT‚¶Ñ ‚Üí ‚ä•) & I1 = I & V1 = V) |
                       (‚àß‚àß l ‚â§ yinj i & L1 ‚ä¢ i œµ ùêÖ*[l]‚¶ÉT‚¶Ñ & I2 = I & V2 = V)
                    ).

interpretation
   "lazy union (local environment)"
   'LazyOr L1 T l L2 L = (llor l T L2 L1 L).

(* Basic properties *********************************************************)

(* Note: this can be proved by llor_skip *)
lemma llor_atom: ‚àÄT,l. ‚ãÜ ‚ãì[T, l] ‚ãÜ ‚â° ‚ãÜ.
#T #l @and3_intro //
#I1 #I2 #I #K1 #K2 #K #V1 #V2 #V #i #HLK1
elim (drop_inv_atom1 ‚Ä¶ HLK1) -HLK1 #H destruct
qed.
